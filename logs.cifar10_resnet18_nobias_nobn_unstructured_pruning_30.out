/home/gvignen/.local/lib/python3.10/site-packages/torch/utils/data/dataloader.py:557: UserWarning: This DataLoader will create 2 worker processes in total. Our suggested max number of worker in current system is 1, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.
  warnings.warn(_create_warning_msg(
------- Setting up parameters -------
dumping parameters at  /home/gvignen/otfusion/exp_cifar10_resnet18_nobias_nobn_unstructured_pruning_30/configurations
The parameters are: 
 Namespace(n_epochs=300, batch_size_train=64, batch_size_test=1000, learning_rate=0.01, momentum=0.5, log_interval=100, to_download=True, disable_bias=True, dataset='Cifar10', num_models=2, model_name='resnet18_nobias_nobn', config_file=None, config_dir='/home/gvignen/otfusion/exp_cifar10_resnet18_nobias_nobn_unstructured_pruning_30/configurations', num_hidden_nodes=400, num_hidden_nodes1=400, num_hidden_nodes2=200, num_hidden_nodes3=100, num_hidden_nodes4=50, sweep_id=90, gpu_id=0, skip_last_layer=False, skip_last_layer_type='average', debug=False, cifar_style_data=False, activation_histograms=True, act_num_samples=200, softmax_temperature=1, activation_mode='raw', options_type='generic', deprecated=None, save_result_file='sample_cifar10_resnet18_nobias_nobn_unstructured_pruning_30.csv', sweep_name='exp_cifar10_resnet18_nobias_nobn_unstructured_pruning_30', reg=0.01, reg_m=0.001, ground_metric='euclidean', ground_metric_normalize='none', not_squared=True, clip_gm=False, clip_min=0, clip_max=5, tmap_stats=False, ensemble_step=0.5, ground_metric_eff=True, retrain=300, retrain_lr_decay=-1, retrain_lr_decay_factor=None, retrain_lr_decay_epochs=None, retrain_avg_only=False, retrain_geometric_only=True, load_models='./resnet_models/', ckpt_type='best', recheck_cifar=True, recheck_acc=True, eval_aligned=False, enable_dropout=False, dump_model=False, dump_final_models=False, correction=True, activation_seed=21, weight_stats=True, sinkhorn_type='normal', geom_ensemble_type='acts', act_bug=False, standardize_acts=False, transform_acts=False, center_acts=False, prelu_acts=True, pool_acts=False, pool_relu=False, normalize_acts=False, normalize_wts=False, gromov=False, gromov_loss='square_loss', tensorboard_root='./tensorboard', tensorboard=False, same_model=-1, dist_normalize=False, update_acts=False, past_correction=True, partial_reshape=False, choice='0 2 4 6 8', diff_init=False, partition_type='labels', personal_class_idx=9, partition_dataloader=-1, personal_split_frac=0.1, exact=True, skip_personal_idx=False, prediction_wts=False, width_ratio=1, proper_marginals=False, retrain_seed=-1, no_random_trainloaders=False, reinit_trainloaders=False, second_model_name=None, print_distances=False, deterministic=False, skip_retrain=-1, importance=None, unbalanced=False, temperature=20, alpha=0.7, dist_epochs=60, handle_skips=True, prune=True, prune_frac=0.3, prune_type='unstructured', experiment_name='cifar10_resnet18_nobias_nobn_unstructured_pruning_30', timestamp='2024-01-06_19-44-44_583055', rootdir='/home/gvignen/otfusion/exp_cifar10_resnet18_nobias_nobn_unstructured_pruning_30', baseroot='/home/gvignen/otfusion', result_dir='/home/gvignen/otfusion/exp_cifar10_resnet18_nobias_nobn_unstructured_pruning_30/results', exp_name='exp_cifar10_resnet18_nobias_nobn_unstructured_pruning_30', csv_dir='/home/gvignen/otfusion/exp_cifar10_resnet18_nobias_nobn_unstructured_pruning_30/csv')
refactored get_config
------- Loading pre-trained models -------
loading cifar10 dataloaders
Files already downloaded and verified
Files already downloaded and verified
Files already downloaded and verified
Files already downloaded and verified
loading model with idx 0 and checkpoint_type is best
model parameters are 
 [torch.Size([64, 3, 3, 3]), torch.Size([64, 64, 3, 3]), torch.Size([64, 64, 3, 3]), torch.Size([64, 64, 3, 3]), torch.Size([64, 64, 3, 3]), torch.Size([128, 64, 3, 3]), torch.Size([128, 128, 3, 3]), torch.Size([128, 64, 1, 1]), torch.Size([128, 128, 3, 3]), torch.Size([128, 128, 3, 3]), torch.Size([256, 128, 3, 3]), torch.Size([256, 256, 3, 3]), torch.Size([256, 128, 1, 1]), torch.Size([256, 256, 3, 3]), torch.Size([256, 256, 3, 3]), torch.Size([512, 256, 3, 3]), torch.Size([512, 512, 3, 3]), torch.Size([512, 256, 1, 1]), torch.Size([512, 512, 3, 3]), torch.Size([512, 512, 3, 3]), torch.Size([10, 512])]
Loading model at path ./resnet_models/model_0/best.checkpoint which had accuracy 0.9310999816656113 and at epoch 181
loading model with idx 1 and checkpoint_type is best
model parameters are 
 [torch.Size([64, 3, 3, 3]), torch.Size([64, 64, 3, 3]), torch.Size([64, 64, 3, 3]), torch.Size([64, 64, 3, 3]), torch.Size([64, 64, 3, 3]), torch.Size([128, 64, 3, 3]), torch.Size([128, 128, 3, 3]), torch.Size([128, 64, 1, 1]), torch.Size([128, 128, 3, 3]), torch.Size([128, 128, 3, 3]), torch.Size([256, 128, 3, 3]), torch.Size([256, 256, 3, 3]), torch.Size([256, 128, 1, 1]), torch.Size([256, 256, 3, 3]), torch.Size([256, 256, 3, 3]), torch.Size([512, 256, 3, 3]), torch.Size([512, 512, 3, 3]), torch.Size([512, 256, 1, 1]), torch.Size([512, 512, 3, 3]), torch.Size([512, 512, 3, 3]), torch.Size([10, 512])]
Loading model at path ./resnet_models/model_1/best.checkpoint which had accuracy 0.9319999837875367 and at epoch 205
Done loading all the models

--------- Testing in global mode ---------
size of test_loader dataset:  10000

Test set: Avg. loss: 0.0043, Accuracy: 9311/10000 (93%)


--------- Testing in global mode ---------
size of test_loader dataset:  10000

Test set: Avg. loss: 0.0044, Accuracy: 9320/10000 (93%)

Rechecked accuracies are  [93.11, 93.2]
----------Prune the 2 Parent models now---------
---------let's see result after pruning-------------
dict_keys([])
---------let's see result after pruning-------------
dict_keys([])
--------Rechecking accuracies again!--------

--------- Testing in global mode ---------
size of test_loader dataset:  10000

Test set: Avg. loss: 0.0043, Accuracy: 9306/10000 (93%)

----- Saving Pruned model0-------

--------- Testing in global mode ---------
size of test_loader dataset:  10000

Test set: Avg. loss: 0.0044, Accuracy: 9303/10000 (93%)

----- Saving Pruned model1-------
Rechecked accuracies are  [93.06, 93.03]
layer conv1.weight has #params  1728
layer layer1.0.conv1.weight has #params  36864
layer layer1.0.conv2.weight has #params  36864
layer layer1.1.conv1.weight has #params  36864
layer layer1.1.conv2.weight has #params  36864
layer layer2.0.conv1.weight has #params  73728
layer layer2.0.conv2.weight has #params  147456
layer layer2.0.shortcut.0.weight has #params  8192
layer layer2.1.conv1.weight has #params  147456
layer layer2.1.conv2.weight has #params  147456
layer layer3.0.conv1.weight has #params  294912
layer layer3.0.conv2.weight has #params  589824
layer layer3.0.shortcut.0.weight has #params  32768
layer layer3.1.conv1.weight has #params  589824
layer layer3.1.conv2.weight has #params  589824
layer layer4.0.conv1.weight has #params  1179648
layer layer4.0.conv2.weight has #params  2359296
layer layer4.0.shortcut.0.weight has #params  131072
layer layer4.1.conv1.weight has #params  2359296
layer layer4.1.conv2.weight has #params  2359296
layer linear.weight has #params  5120
Activation Timer start
Files already downloaded and verified
Files already downloaded and verified
excluded
set forward hook for layer named:  conv1
this was continued,  bn1
this was continued,  layer1
this was continued,  layer1.0
set forward hook for layer named:  layer1.0.conv1
this was continued,  layer1.0.bn1
set forward hook for layer named:  layer1.0.conv2
this was continued,  layer1.0.shortcut
this was continued,  layer1.1
set forward hook for layer named:  layer1.1.conv1
this was continued,  layer1.1.bn1
set forward hook for layer named:  layer1.1.conv2
this was continued,  layer1.1.shortcut
this was continued,  layer2
this was continued,  layer2.0
set forward hook for layer named:  layer2.0.conv1
this was continued,  layer2.0.bn1
set forward hook for layer named:  layer2.0.conv2
this was continued,  layer2.0.shortcut
set forward hook for layer named:  layer2.0.shortcut.0
this was continued,  layer2.0.shortcut.1
this was continued,  layer2.1
set forward hook for layer named:  layer2.1.conv1
this was continued,  layer2.1.bn1
set forward hook for layer named:  layer2.1.conv2
this was continued,  layer2.1.shortcut
this was continued,  layer3
this was continued,  layer3.0
set forward hook for layer named:  layer3.0.conv1
this was continued,  layer3.0.bn1
set forward hook for layer named:  layer3.0.conv2
this was continued,  layer3.0.shortcut
set forward hook for layer named:  layer3.0.shortcut.0
this was continued,  layer3.0.shortcut.1
this was continued,  layer3.1
set forward hook for layer named:  layer3.1.conv1
this was continued,  layer3.1.bn1
set forward hook for layer named:  layer3.1.conv2
this was continued,  layer3.1.shortcut
this was continued,  layer4
this was continued,  layer4.0
set forward hook for layer named:  layer4.0.conv1
this was continued,  layer4.0.bn1
set forward hook for layer named:  layer4.0.conv2
this was continued,  layer4.0.shortcut
set forward hook for layer named:  layer4.0.shortcut.0
this was continued,  layer4.0.shortcut.1
this was continued,  layer4.1
set forward hook for layer named:  layer4.1.conv1
this was continued,  layer4.1.bn1
set forward hook for layer named:  layer4.1.conv2
this was continued,  layer4.1.shortcut
set forward hook for layer named:  linear
excluded
set forward hook for layer named:  conv1
this was continued,  bn1
this was continued,  layer1
this was continued,  layer1.0
set forward hook for layer named:  layer1.0.conv1
this was continued,  layer1.0.bn1
set forward hook for layer named:  layer1.0.conv2
this was continued,  layer1.0.shortcut
this was continued,  layer1.1
set forward hook for layer named:  layer1.1.conv1
this was continued,  layer1.1.bn1
set forward hook for layer named:  layer1.1.conv2
this was continued,  layer1.1.shortcut
this was continued,  layer2
this was continued,  layer2.0
set forward hook for layer named:  layer2.0.conv1
this was continued,  layer2.0.bn1
set forward hook for layer named:  layer2.0.conv2
this was continued,  layer2.0.shortcut
set forward hook for layer named:  layer2.0.shortcut.0
this was continued,  layer2.0.shortcut.1
this was continued,  layer2.1
set forward hook for layer named:  layer2.1.conv1
this was continued,  layer2.1.bn1
set forward hook for layer named:  layer2.1.conv2
this was continued,  layer2.1.shortcut
this was continued,  layer3
this was continued,  layer3.0
set forward hook for layer named:  layer3.0.conv1
this was continued,  layer3.0.bn1
set forward hook for layer named:  layer3.0.conv2
this was continued,  layer3.0.shortcut
set forward hook for layer named:  layer3.0.shortcut.0
this was continued,  layer3.0.shortcut.1
this was continued,  layer3.1
set forward hook for layer named:  layer3.1.conv1
this was continued,  layer3.1.bn1
set forward hook for layer named:  layer3.1.conv2
this was continued,  layer3.1.shortcut
this was continued,  layer4
this was continued,  layer4.0
set forward hook for layer named:  layer4.0.conv1
this was continued,  layer4.0.bn1
set forward hook for layer named:  layer4.0.conv2
this was continued,  layer4.0.shortcut
set forward hook for layer named:  layer4.0.shortcut.0
this was continued,  layer4.0.shortcut.1
this was continued,  layer4.1
set forward hook for layer named:  layer4.1.conv1
this was continued,  layer4.1.bn1
set forward hook for layer named:  layer4.1.conv2
this was continued,  layer4.1.shortcut
set forward hook for layer named:  linear
num_personal_idx  25
model_name is  resnet18_nobias_nobn
***********
min of act: -19.4750919342041, max: 20.365079879760742, mean: -0.011619118973612785
activations for idx 0 at layer conv1 have the following shape  torch.Size([200, 1, 64, 32, 32])
-----------
***********
min of act: -46.16472244262695, max: 16.21941566467285, mean: -2.25150465965271
activations for idx 0 at layer layer1.0.conv1 have the following shape  torch.Size([200, 1, 64, 32, 32])
-----------
***********
min of act: -10.254711151123047, max: 21.033916473388672, mean: 0.2103499174118042
activations for idx 0 at layer layer1.0.conv2 have the following shape  torch.Size([200, 1, 64, 32, 32])
-----------
***********
min of act: -33.40456771850586, max: 17.568513870239258, mean: -2.7096636295318604
activations for idx 0 at layer layer1.1.conv1 have the following shape  torch.Size([200, 1, 64, 32, 32])
-----------
***********
min of act: -10.44326400756836, max: 18.605022430419922, mean: 0.17775270342826843
activations for idx 0 at layer layer1.1.conv2 have the following shape  torch.Size([200, 1, 64, 32, 32])
-----------
***********
min of act: -43.119041442871094, max: 38.186912536621094, mean: -1.1885490417480469
activations for idx 0 at layer layer2.0.conv1 have the following shape  torch.Size([200, 1, 128, 16, 16])
-----------
***********
min of act: -50.73118209838867, max: 55.5224609375, mean: -1.5468500852584839
activations for idx 0 at layer layer2.0.conv2 have the following shape  torch.Size([200, 1, 128, 16, 16])
-----------
***********
min of act: -8.402030944824219, max: 14.672591209411621, mean: 0.10025901347398758
activations for idx 0 at layer layer2.0.shortcut.0 have the following shape  torch.Size([200, 1, 128, 16, 16])
-----------
***********
min of act: -81.81930541992188, max: 63.49489974975586, mean: -9.241398811340332
activations for idx 0 at layer layer2.1.conv1 have the following shape  torch.Size([200, 1, 128, 16, 16])
-----------
***********
min of act: -28.501733779907227, max: 58.291282653808594, mean: 0.03335137292742729
activations for idx 0 at layer layer2.1.conv2 have the following shape  torch.Size([200, 1, 128, 16, 16])
-----------
***********
min of act: -66.35118865966797, max: 89.87594604492188, mean: -5.177974224090576
activations for idx 0 at layer layer3.0.conv1 have the following shape  torch.Size([200, 1, 256, 8, 8])
-----------
***********
min of act: -111.74070739746094, max: 127.23382568359375, mean: -6.431044578552246
activations for idx 0 at layer layer3.0.conv2 have the following shape  torch.Size([200, 1, 256, 8, 8])
-----------
***********
min of act: -21.83056640625, max: 32.52511978149414, mean: -0.5496183037757874
activations for idx 0 at layer layer3.0.shortcut.0 have the following shape  torch.Size([200, 1, 256, 8, 8])
-----------
***********
min of act: -142.2140655517578, max: 158.8491668701172, mean: -13.233917236328125
activations for idx 0 at layer layer3.1.conv1 have the following shape  torch.Size([200, 1, 256, 8, 8])
-----------
***********
min of act: -67.61267852783203, max: 119.84422302246094, mean: -3.4012463092803955
activations for idx 0 at layer layer3.1.conv2 have the following shape  torch.Size([200, 1, 256, 8, 8])
-----------
***********
min of act: -64.00493621826172, max: 99.098876953125, mean: -5.563668251037598
activations for idx 0 at layer layer4.0.conv1 have the following shape  torch.Size([200, 1, 512, 4, 4])
-----------
***********
min of act: -96.22012329101562, max: 123.24137878417969, mean: -5.685640811920166
activations for idx 0 at layer layer4.0.conv2 have the following shape  torch.Size([200, 1, 512, 4, 4])
-----------
***********
min of act: -21.44759750366211, max: 28.129459381103516, mean: -1.6595728397369385
activations for idx 0 at layer layer4.0.shortcut.0 have the following shape  torch.Size([200, 1, 512, 4, 4])
-----------
***********
min of act: -91.38406372070312, max: 55.448028564453125, mean: -2.487097978591919
activations for idx 0 at layer layer4.1.conv1 have the following shape  torch.Size([200, 1, 512, 4, 4])
-----------
***********
min of act: -43.696529388427734, max: 114.05756378173828, mean: -1.678242802619934
activations for idx 0 at layer layer4.1.conv2 have the following shape  torch.Size([200, 1, 512, 4, 4])
-----------
***********
min of act: -32.082725524902344, max: 105.82585906982422, mean: 0.0027781487442553043
activations for idx 0 at layer linear have the following shape  torch.Size([200, 1, 10])
-----------
***********
min of act: -18.71624755859375, max: 17.617292404174805, mean: -0.014132972806692123
activations for idx 1 at layer conv1 have the following shape  torch.Size([200, 1, 64, 32, 32])
-----------
***********
min of act: -38.654296875, max: 17.020164489746094, mean: -2.2674407958984375
activations for idx 1 at layer layer1.0.conv1 have the following shape  torch.Size([200, 1, 64, 32, 32])
-----------
***********
min of act: -10.978911399841309, max: 21.863407135009766, mean: 0.1641595959663391
activations for idx 1 at layer layer1.0.conv2 have the following shape  torch.Size([200, 1, 64, 32, 32])
-----------
***********
min of act: -34.40382385253906, max: 19.49413299560547, mean: -2.568854331970215
activations for idx 1 at layer layer1.1.conv1 have the following shape  torch.Size([200, 1, 64, 32, 32])
-----------
***********
min of act: -8.141225814819336, max: 21.35078239440918, mean: 0.13010728359222412
activations for idx 1 at layer layer1.1.conv2 have the following shape  torch.Size([200, 1, 64, 32, 32])
-----------
***********
min of act: -39.03327178955078, max: 36.04518508911133, mean: -0.9792417883872986
activations for idx 1 at layer layer2.0.conv1 have the following shape  torch.Size([200, 1, 128, 16, 16])
-----------
***********
min of act: -55.47221755981445, max: 67.18917083740234, mean: -1.4437958002090454
activations for idx 1 at layer layer2.0.conv2 have the following shape  torch.Size([200, 1, 128, 16, 16])
-----------
***********
min of act: -6.946937084197998, max: 18.843713760375977, mean: 0.12398239225149155
activations for idx 1 at layer layer2.0.shortcut.0 have the following shape  torch.Size([200, 1, 128, 16, 16])
-----------
***********
min of act: -83.282958984375, max: 64.13397216796875, mean: -9.165031433105469
activations for idx 1 at layer layer2.1.conv1 have the following shape  torch.Size([200, 1, 128, 16, 16])
-----------
***********
min of act: -28.938411712646484, max: 80.02330017089844, mean: 0.07603633403778076
activations for idx 1 at layer layer2.1.conv2 have the following shape  torch.Size([200, 1, 128, 16, 16])
-----------
***********
min of act: -76.52228546142578, max: 99.63925170898438, mean: -4.811491966247559
activations for idx 1 at layer layer3.0.conv1 have the following shape  torch.Size([200, 1, 256, 8, 8])
-----------
***********
min of act: -96.25628662109375, max: 143.60150146484375, mean: -5.819852352142334
activations for idx 1 at layer layer3.0.conv2 have the following shape  torch.Size([200, 1, 256, 8, 8])
-----------
***********
min of act: -21.611900329589844, max: 43.25642395019531, mean: -0.4521089494228363
activations for idx 1 at layer layer3.0.shortcut.0 have the following shape  torch.Size([200, 1, 256, 8, 8])
-----------
***********
min of act: -131.05514526367188, max: 166.072021484375, mean: -13.473272323608398
activations for idx 1 at layer layer3.1.conv1 have the following shape  torch.Size([200, 1, 256, 8, 8])
-----------
***********
min of act: -71.17550659179688, max: 145.66839599609375, mean: -2.965724229812622
activations for idx 1 at layer layer3.1.conv2 have the following shape  torch.Size([200, 1, 256, 8, 8])
-----------
***********
min of act: -62.37258529663086, max: 112.71428680419922, mean: -5.7419939041137695
activations for idx 1 at layer layer4.0.conv1 have the following shape  torch.Size([200, 1, 512, 4, 4])
-----------
***********
min of act: -108.61929321289062, max: 113.21725463867188, mean: -6.498524188995361
activations for idx 1 at layer layer4.0.conv2 have the following shape  torch.Size([200, 1, 512, 4, 4])
-----------
***********
min of act: -27.2015380859375, max: 28.96869468688965, mean: -1.9943761825561523
activations for idx 1 at layer layer4.0.shortcut.0 have the following shape  torch.Size([200, 1, 512, 4, 4])
-----------
***********
min of act: -101.85111999511719, max: 91.43840789794922, mean: -2.5796022415161133
activations for idx 1 at layer layer4.1.conv1 have the following shape  torch.Size([200, 1, 512, 4, 4])
-----------
***********
min of act: -43.690391540527344, max: 115.85997772216797, mean: -1.7513309717178345
activations for idx 1 at layer layer4.1.conv2 have the following shape  torch.Size([200, 1, 512, 4, 4])
-----------
***********
min of act: -30.07071304321289, max: 105.58255004882812, mean: -0.01242864690721035
activations for idx 1 at layer linear have the following shape  torch.Size([200, 1, 10])
-----------
Activation Timer ends
------- Geometric Ensembling -------
Timer start

--------------- At layer index 0 ------------- 
 
Previous layer shape is  None
let's see the difference in layer names conv1 conv1
torch.Size([200, 1, 64, 32, 32]) shape of activations generally
reorder_dim is  [1, 2, 3, 0]
In layer conv1.weight: getting activation distance statistics
Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): 

Max : 26.117290496826172, Mean : 9.716392517089844, Min : 2.67275333404541, Std: 3.770303726196289
returns a uniform measure of cardinality:  64
returns a uniform measure of cardinality:  64
Refactored ground metric calc
inside refactored
Processing the coordinates to form ground_metric
dont leave off the squaring of the ground metric
# of ground metric features is  204800
# of ground metric features in 0 is   204800
# of ground metric features in 1 is   204800
ground metric (m0) is  tensor([[ 793.1656,  826.8145,  715.3048,  ...,  598.9480,  709.0266,
          921.5685],
        [ 482.2125,  737.8385,  648.3088,  ...,  573.5192,  593.4037,
          768.4047],
        [ 920.1000, 1070.8145,  539.9099,  ...,  730.1263,  848.6225,
         1015.0784],
        ...,
        [ 391.4934,  743.5104,  718.9152,  ...,  584.8985,  533.3876,
          497.6872],
        [ 943.6041, 1185.3024,  974.1493,  ...,  874.0186, 1040.3979,
          881.7513],
        [ 939.1801,  854.2325,  569.7272,  ...,  543.4508,  818.9630,
         1025.6931]], device='cuda:0')
shape of T_var is  torch.Size([64, 64])
T_var before correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
marginals are  tensor([[63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        ...,
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996]],
       device='cuda:0')
T_var after correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
T_var stats: max 0.9999935626983643, min 0.0, mean 0.015624899417161942, std 0.12403393536806107 
Ratio of trace to the matrix sum:  tensor(0.0625, device='cuda:0')
Here, trace is 3.999974250793457 and matrix sum is 63.99958801269531 
Shape of aligned wt is  torch.Size([64, 3, 9])
Shape of fc_layer0_weight_data is  torch.Size([64, 3, 9])

--------------- At layer index 1 ------------- 
 
Previous layer shape is  torch.Size([64, 3, 3, 3])
let's see the difference in layer names layer1.0.conv1 layer1.0.conv1
torch.Size([200, 1, 64, 32, 32]) shape of activations generally
reorder_dim is  [1, 2, 3, 0]
In layer layer1.0.conv1.weight: getting activation distance statistics
Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): 

Max : 46.025787353515625, Mean : 17.709033966064453, Min : 5.121025085449219, Std: 6.798807144165039
shape of layer: model 0 torch.Size([64, 64, 9])
shape of layer: model 1 torch.Size([64, 64, 9])
shape of activations: model 0 torch.Size([64, 32, 32, 200])
shape of activations: model 1 torch.Size([64, 32, 32, 200])
shape of previous transport map torch.Size([64, 64])
doing nothing for skips
returns a uniform measure of cardinality:  64
returns a uniform measure of cardinality:  64
Refactored ground metric calc
inside refactored
Processing the coordinates to form ground_metric
dont leave off the squaring of the ground metric
# of ground metric features is  204800
# of ground metric features in 0 is   204800
# of ground metric features in 1 is   204800
ground metric (m0) is  tensor([[1272.6104, 1743.8756, 1562.0188,  ..., 1156.4373, 1786.5734,
         1791.1959],
        [1439.6483, 1883.2480, 1552.2108,  ..., 1453.3708, 1943.8927,
         2016.3689],
        [ 325.9880, 1849.3495, 1477.0657,  ..., 1679.4618, 2101.1448,
         1077.2228],
        ...,
        [1708.5127, 1487.7098, 1568.2289,  ..., 1711.8015, 1735.3126,
         1752.9312],
        [ 481.6916, 2251.4099, 1769.5156,  ..., 2054.7234, 2527.9780,
         1230.5802],
        [1990.9309, 1561.6195, 1413.6665,  ..., 1785.3051, 1923.3854,
         2062.4912]], device='cuda:0')
shape of T_var is  torch.Size([64, 64])
T_var before correction  tensor([[0.0000, 0.0000, 0.0000,  ..., 0.0156, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        ...,
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]],
       device='cuda:0')
marginals are  tensor([[63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        ...,
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996]],
       device='cuda:0')
T_var after correction  tensor([[0.0000, 0.0000, 0.0000,  ..., 1.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        ...,
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]],
       device='cuda:0')
T_var stats: max 0.9999935626983643, min 0.0, mean 0.015624899417161942, std 0.12403392791748047 
Ratio of trace to the matrix sum:  tensor(0.0156, device='cuda:0')
Here, trace is 0.9999935626983643 and matrix sum is 63.99958801269531 
Shape of aligned wt is  torch.Size([64, 64, 9])
Shape of fc_layer0_weight_data is  torch.Size([64, 64, 9])

--------------- At layer index 2 ------------- 
 
Previous layer shape is  torch.Size([64, 64, 3, 3])
let's see the difference in layer names layer1.0.conv2 layer1.0.conv2
torch.Size([200, 1, 64, 32, 32]) shape of activations generally
reorder_dim is  [1, 2, 3, 0]
In layer layer1.0.conv2.weight: getting activation distance statistics
Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): 

Max : 20.761978149414062, Mean : 7.5462164878845215, Min : 1.947502613067627, Std: 3.096829414367676
shape of layer: model 0 torch.Size([64, 64, 9])
shape of layer: model 1 torch.Size([64, 64, 9])
shape of activations: model 0 torch.Size([64, 32, 32, 200])
shape of activations: model 1 torch.Size([64, 32, 32, 200])
shape of previous transport map torch.Size([64, 64])
doing nothing for skips
returns a uniform measure of cardinality:  64
returns a uniform measure of cardinality:  64
Refactored ground metric calc
inside refactored
Processing the coordinates to form ground_metric
dont leave off the squaring of the ground metric
# of ground metric features is  204800
# of ground metric features in 0 is   204800
# of ground metric features in 1 is   204800
ground metric (m0) is  tensor([[780.7460, 594.0410, 589.1895,  ..., 571.7651, 587.8156, 819.5070],
        [614.4555, 537.1479, 544.7785,  ..., 528.5054, 553.4102, 746.5612],
        [805.9315, 672.3096, 421.3099,  ..., 613.8454, 664.3861, 799.4754],
        ...,
        [438.5544, 577.4524, 616.2485,  ..., 631.2938, 526.4297, 487.2980],
        [833.4338, 781.3945, 725.7488,  ..., 683.4712, 746.2254, 775.1077],
        [729.2410, 548.7004, 413.0196,  ..., 441.3452, 632.8785, 814.4687]],
       device='cuda:0')
shape of T_var is  torch.Size([64, 64])
T_var before correction  tensor([[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        ...,
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0156],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]],
       device='cuda:0')
marginals are  tensor([[63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        ...,
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996]],
       device='cuda:0')
T_var after correction  tensor([[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        ...,
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 1.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]],
       device='cuda:0')
T_var stats: max 0.9999935626983643, min 0.0, mean 0.015624899417161942, std 0.12403393536806107 
Ratio of trace to the matrix sum:  tensor(0.0312, device='cuda:0')
Here, trace is 1.9999871253967285 and matrix sum is 63.99958801269531 
Shape of aligned wt is  torch.Size([64, 64, 9])
Shape of fc_layer0_weight_data is  torch.Size([64, 64, 9])

--------------- At layer index 3 ------------- 
 
Previous layer shape is  torch.Size([64, 64, 3, 3])
let's see the difference in layer names layer1.1.conv1 layer1.1.conv1
torch.Size([200, 1, 64, 32, 32]) shape of activations generally
reorder_dim is  [1, 2, 3, 0]
In layer layer1.1.conv1.weight: getting activation distance statistics
Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): 

Max : 37.42662811279297, Mean : 16.119312286376953, Min : 5.080016613006592, Std: 5.558422088623047
shape of layer: model 0 torch.Size([64, 64, 9])
shape of layer: model 1 torch.Size([64, 64, 9])
shape of activations: model 0 torch.Size([64, 32, 32, 200])
shape of activations: model 1 torch.Size([64, 32, 32, 200])
shape of previous transport map torch.Size([64, 64])
doing nothing for skips
returns a uniform measure of cardinality:  64
returns a uniform measure of cardinality:  64
Refactored ground metric calc
inside refactored
Processing the coordinates to form ground_metric
dont leave off the squaring of the ground metric
# of ground metric features is  204800
# of ground metric features in 0 is   204800
# of ground metric features in 1 is   204800
ground metric (m0) is  tensor([[1067.8602, 1451.5681,  977.5557,  ..., 1178.5419, 1378.3243,
         1291.6033],
        [1510.6180, 1858.8737, 1309.1716,  ..., 1755.5890, 1351.6926,
         1067.1088],
        [1881.2736, 2316.8921, 1425.2831,  ..., 1752.9371, 1354.5933,
         1349.5992],
        ...,
        [1197.2711, 1559.6486, 1049.9071,  ..., 1531.6174, 1369.9513,
         1279.9858],
        [1081.5927, 1607.3647,  821.3754,  ..., 1230.8850, 1313.4312,
         1383.3799],
        [1471.8890, 1941.6591, 1243.9823,  ..., 1571.8120,  756.8154,
         1456.5092]], device='cuda:0')
shape of T_var is  torch.Size([64, 64])
T_var before correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
marginals are  tensor([[63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        ...,
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996]],
       device='cuda:0')
T_var after correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
T_var stats: max 0.9999935626983643, min 0.0, mean 0.015624899417161942, std 0.12403393536806107 
Ratio of trace to the matrix sum:  tensor(0., device='cuda:0')
Here, trace is 0.0 and matrix sum is 63.99958801269531 
Shape of aligned wt is  torch.Size([64, 64, 9])
Shape of fc_layer0_weight_data is  torch.Size([64, 64, 9])

--------------- At layer index 4 ------------- 
 
Previous layer shape is  torch.Size([64, 64, 3, 3])
let's see the difference in layer names layer1.1.conv2 layer1.1.conv2
torch.Size([200, 1, 64, 32, 32]) shape of activations generally
reorder_dim is  [1, 2, 3, 0]
In layer layer1.1.conv2.weight: getting activation distance statistics
Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): 

Max : 19.673782348632812, Mean : 7.05734920501709, Min : 1.8298588991165161, Std: 3.0381417274475098
shape of layer: model 0 torch.Size([64, 64, 9])
shape of layer: model 1 torch.Size([64, 64, 9])
shape of activations: model 0 torch.Size([64, 32, 32, 200])
shape of activations: model 1 torch.Size([64, 32, 32, 200])
shape of previous transport map torch.Size([64, 64])
doing nothing for skips
returns a uniform measure of cardinality:  64
returns a uniform measure of cardinality:  64
Refactored ground metric calc
inside refactored
Processing the coordinates to form ground_metric
dont leave off the squaring of the ground metric
# of ground metric features is  204800
# of ground metric features in 0 is   204800
# of ground metric features in 1 is   204800
ground metric (m0) is  tensor([[716.6420, 492.2578, 479.7688,  ..., 443.0116, 511.0079, 832.2675],
        [652.6307, 522.6034, 483.9948,  ..., 479.6042, 560.1064, 806.8367],
        [757.2187, 621.7534, 379.7567,  ..., 514.1469, 604.6236, 830.5383],
        ...,
        [452.4279, 549.5753, 542.4119,  ..., 529.1207, 533.4955, 570.8937],
        [775.8595, 666.3028, 633.1334,  ..., 586.5197, 674.1633, 814.4525],
        [623.1087, 465.9185, 411.5250,  ..., 448.2016, 498.9142, 712.9133]],
       device='cuda:0')
shape of T_var is  torch.Size([64, 64])
T_var before correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
marginals are  tensor([[63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        ...,
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996]],
       device='cuda:0')
T_var after correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
T_var stats: max 0.9999935626983643, min 0.0, mean 0.015624899417161942, std 0.12403393536806107 
Ratio of trace to the matrix sum:  tensor(0.0312, device='cuda:0')
Here, trace is 1.9999871253967285 and matrix sum is 63.99958801269531 
Shape of aligned wt is  torch.Size([64, 64, 9])
Shape of fc_layer0_weight_data is  torch.Size([64, 64, 9])

--------------- At layer index 5 ------------- 
 
Previous layer shape is  torch.Size([64, 64, 3, 3])
let's see the difference in layer names layer2.0.conv1 layer2.0.conv1
torch.Size([200, 1, 128, 16, 16]) shape of activations generally
reorder_dim is  [1, 2, 3, 0]
In layer layer2.0.conv1.weight: getting activation distance statistics
Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): 

Max : 33.8663330078125, Mean : 13.705073356628418, Min : 3.529698371887207, Std: 5.37132453918457
shape of layer: model 0 torch.Size([128, 64, 9])
shape of layer: model 1 torch.Size([128, 64, 9])
shape of activations: model 0 torch.Size([128, 16, 16, 200])
shape of activations: model 1 torch.Size([128, 16, 16, 200])
shape of previous transport map torch.Size([64, 64])
saved skip T_var at layer 5 with shape torch.Size([128, 64, 3, 3])
shape of previous transport map now is torch.Size([64, 64])
returns a uniform measure of cardinality:  128
returns a uniform measure of cardinality:  128
Refactored ground metric calc
inside refactored
Processing the coordinates to form ground_metric
dont leave off the squaring of the ground metric
# of ground metric features is  51200
# of ground metric features in 0 is   51200
# of ground metric features in 1 is   51200
ground metric (m0) is  tensor([[1106.0371,  979.2676,  749.5366,  ...,  732.4875,  757.2182,
          803.6530],
        [ 912.0940,  864.2375,  679.1035,  ...,  723.5918,  640.9613,
          713.2323],
        [ 961.3875,  902.5685,  790.0768,  ...,  927.9661,  890.9656,
          847.6793],
        ...,
        [ 907.9371,  782.1791,  600.0593,  ...,  598.9280,  461.1341,
          596.1907],
        [1198.8284,  912.9711,  663.2855,  ...,  713.2734,  843.8781,
          868.0560],
        [1133.2852,  923.4522,  712.2772,  ...,  857.0936,  962.4626,
          858.3848]], device='cuda:0')
shape of T_var is  torch.Size([128, 128])
T_var before correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
marginals are  tensor([[127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        ...,
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984]],
       device='cuda:0')
T_var after correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
T_var stats: max 0.9999872446060181, min 0.0, mean 0.007812400348484516, std 0.08804396539926529 
Ratio of trace to the matrix sum:  tensor(0.0078, device='cuda:0')
Here, trace is 0.9999872446060181 and matrix sum is 127.99836730957031 
Shape of aligned wt is  torch.Size([128, 64, 9])
Shape of fc_layer0_weight_data is  torch.Size([128, 64, 9])

--------------- At layer index 6 ------------- 
 
Previous layer shape is  torch.Size([128, 64, 3, 3])
let's see the difference in layer names layer2.0.conv2 layer2.0.conv2
torch.Size([200, 1, 128, 16, 16]) shape of activations generally
reorder_dim is  [1, 2, 3, 0]
In layer layer2.0.conv2.weight: getting activation distance statistics
Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): 

Max : 63.259132385253906, Mean : 26.096744537353516, Min : 7.098402500152588, Std: 9.871074676513672
shape of layer: model 0 torch.Size([128, 128, 9])
shape of layer: model 1 torch.Size([128, 128, 9])
shape of activations: model 0 torch.Size([128, 16, 16, 200])
shape of activations: model 1 torch.Size([128, 16, 16, 200])
shape of previous transport map torch.Size([128, 128])
doing nothing for skips
returns a uniform measure of cardinality:  128
returns a uniform measure of cardinality:  128
Refactored ground metric calc
inside refactored
Processing the coordinates to form ground_metric
dont leave off the squaring of the ground metric
# of ground metric features is  51200
# of ground metric features in 0 is   51200
# of ground metric features in 1 is   51200
ground metric (m0) is  tensor([[1886.0704, 1398.8634, 1699.2589,  ..., 1692.2059,  905.7199,
         1923.2572],
        [2019.3152, 1184.9899, 1913.2766,  ..., 2000.6199, 1658.2341,
         1430.0751],
        [1830.3616, 1891.3090, 1701.3148,  ..., 1625.7029, 1541.6832,
         1929.4497],
        ...,
        [1771.5930, 1370.9524, 1840.2673,  ..., 1829.4561, 1653.0580,
         1586.8625],
        [1453.9561, 1357.3169, 1526.6305,  ..., 1593.5168, 1464.7268,
         1510.3944],
        [2068.3035, 1586.5133, 1919.8339,  ..., 1750.3398, 1736.0171,
         1849.6028]], device='cuda:0')
shape of T_var is  torch.Size([128, 128])
T_var before correction  tensor([[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0078, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        ...,
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]],
       device='cuda:0')
marginals are  tensor([[127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        ...,
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984]],
       device='cuda:0')
T_var after correction  tensor([[0.0000, 0.0000, 0.0000,  ..., 0.0000, 1.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        ...,
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]],
       device='cuda:0')
T_var stats: max 0.9999872446060181, min 0.0, mean 0.007812400348484516, std 0.08804396539926529 
Ratio of trace to the matrix sum:  tensor(0.0234, device='cuda:0')
Here, trace is 2.9999618530273438 and matrix sum is 127.99836730957031 
Shape of aligned wt is  torch.Size([128, 128, 9])
Shape of fc_layer0_weight_data is  torch.Size([128, 128, 9])

--------------- At layer index 7 ------------- 
 
Previous layer shape is  torch.Size([128, 128, 3, 3])
let's see the difference in layer names layer2.0.shortcut.0 layer2.0.shortcut.0
torch.Size([200, 1, 128, 16, 16]) shape of activations generally
reorder_dim is  [1, 2, 3, 0]
In layer layer2.0.shortcut.0.weight: getting activation distance statistics
Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): 

Max : 8.530586242675781, Mean : 3.4822773933410645, Min : 0.9838152527809143, Std: 1.3542702198028564
shape of layer: model 0 torch.Size([128, 64, 1])
shape of layer: model 1 torch.Size([128, 64, 1])
shape of activations: model 0 torch.Size([128, 16, 16, 200])
shape of activations: model 1 torch.Size([128, 16, 16, 200])
shape of previous transport map torch.Size([128, 128])
utilizing skip T_var saved from layer layer 5 with shape torch.Size([64, 64])
shape of previous transport map now is torch.Size([64, 64])
returns a uniform measure of cardinality:  128
returns a uniform measure of cardinality:  128
Refactored ground metric calc
inside refactored
Processing the coordinates to form ground_metric
dont leave off the squaring of the ground metric
# of ground metric features is  51200
# of ground metric features in 0 is   51200
# of ground metric features in 1 is   51200
ground metric (m0) is  tensor([[207.0585, 168.9969, 277.7790,  ..., 258.3315, 122.9664, 332.7689],
        [274.1597, 140.4882, 283.6591,  ..., 380.1808, 248.3857, 269.3367],
        [229.2266, 229.6489, 297.4773,  ..., 170.5977, 111.0607, 382.7064],
        ...,
        [245.7390, 161.4941, 303.0377,  ..., 334.9920, 223.4569, 293.6233],
        [134.8531, 153.0103, 203.6770,  ..., 275.5020, 193.4853, 170.2365],
        [195.1564, 167.1851, 259.2869,  ..., 210.0737, 156.5223, 304.1494]],
       device='cuda:0')
shape of T_var is  torch.Size([128, 128])
T_var before correction  tensor([[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0078, 0.0000],
        ...,
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]],
       device='cuda:0')
marginals are  tensor([[127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        ...,
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984]],
       device='cuda:0')
T_var after correction  tensor([[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 1.0000, 0.0000],
        ...,
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]],
       device='cuda:0')
T_var stats: max 0.9999872446060181, min 0.0, mean 0.007812400348484516, std 0.08804396539926529 
Ratio of trace to the matrix sum:  tensor(0.0156, device='cuda:0')
Here, trace is 1.9999744892120361 and matrix sum is 127.99836730957031 
Shape of aligned wt is  torch.Size([128, 64, 1])
Shape of fc_layer0_weight_data is  torch.Size([128, 64, 1])

--------------- At layer index 8 ------------- 
 
Previous layer shape is  torch.Size([128, 64, 1, 1])
let's see the difference in layer names layer2.1.conv1 layer2.1.conv1
torch.Size([200, 1, 128, 16, 16]) shape of activations generally
reorder_dim is  [1, 2, 3, 0]
In layer layer2.1.conv1.weight: getting activation distance statistics
Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): 

Max : 79.5191879272461, Mean : 33.318729400634766, Min : 9.998884201049805, Std: 12.22177791595459
shape of layer: model 0 torch.Size([128, 128, 9])
shape of layer: model 1 torch.Size([128, 128, 9])
shape of activations: model 0 torch.Size([128, 16, 16, 200])
shape of activations: model 1 torch.Size([128, 16, 16, 200])
shape of previous transport map torch.Size([128, 128])
averaging multiple T_var's
returns a uniform measure of cardinality:  128
returns a uniform measure of cardinality:  128
Refactored ground metric calc
inside refactored
Processing the coordinates to form ground_metric
dont leave off the squaring of the ground metric
# of ground metric features is  51200
# of ground metric features in 0 is   51200
# of ground metric features in 1 is   51200
ground metric (m0) is  tensor([[2393.3420, 2339.4351, 2457.8713,  ..., 1960.4999, 2018.6637,
         2395.4651],
        [2043.3439, 1808.5969, 2539.0564,  ..., 1796.4200, 1508.9132,
         2061.4131],
        [2219.3010, 1602.4330, 2323.0691,  ..., 1250.9852, 1710.4950,
         1972.3044],
        ...,
        [2433.8921, 1519.2330, 2659.6189,  ..., 1691.2197, 1487.4569,
         2013.5161],
        [2335.2673, 2112.3679, 2709.1387,  ..., 1853.2631, 2032.7612,
         2386.2927],
        [2121.7554, 2219.2524, 2237.8699,  ..., 2083.0774, 2022.0084,
         2099.5752]], device='cuda:0')
shape of T_var is  torch.Size([128, 128])
T_var before correction  tensor([[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0078, 0.0000, 0.0000],
        ...,
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]],
       device='cuda:0')
marginals are  tensor([[127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        ...,
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984]],
       device='cuda:0')
T_var after correction  tensor([[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 1.0000, 0.0000, 0.0000],
        ...,
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]],
       device='cuda:0')
T_var stats: max 0.9999872446060181, min 0.0, mean 0.007812400348484516, std 0.08804396539926529 
Ratio of trace to the matrix sum:  tensor(0.0156, device='cuda:0')
Here, trace is 1.9999744892120361 and matrix sum is 127.99836730957031 
Shape of aligned wt is  torch.Size([128, 128, 9])
Shape of fc_layer0_weight_data is  torch.Size([128, 128, 9])

--------------- At layer index 9 ------------- 
 
Previous layer shape is  torch.Size([128, 128, 3, 3])
let's see the difference in layer names layer2.1.conv2 layer2.1.conv2
torch.Size([200, 1, 128, 16, 16]) shape of activations generally
reorder_dim is  [1, 2, 3, 0]
In layer layer2.1.conv2.weight: getting activation distance statistics
Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): 

Max : 42.81831359863281, Mean : 14.388520240783691, Min : 2.890493869781494, Std: 6.957895278930664
shape of layer: model 0 torch.Size([128, 128, 9])
shape of layer: model 1 torch.Size([128, 128, 9])
shape of activations: model 0 torch.Size([128, 16, 16, 200])
shape of activations: model 1 torch.Size([128, 16, 16, 200])
shape of previous transport map torch.Size([128, 128])
doing nothing for skips
returns a uniform measure of cardinality:  128
returns a uniform measure of cardinality:  128
Refactored ground metric calc
inside refactored
Processing the coordinates to form ground_metric
dont leave off the squaring of the ground metric
# of ground metric features is  51200
# of ground metric features in 0 is   51200
# of ground metric features in 1 is   51200
ground metric (m0) is  tensor([[1030.5049,  859.8372, 1068.2756,  ...,  941.8206,  729.0253,
         1048.6794],
        [1189.2439,  823.8041, 1157.5110,  ..., 1077.6328, 1068.6146,
          926.0228],
        [ 944.3149, 1003.1854,  929.2414,  ...,  873.8901,  823.6205,
          979.8873],
        ...,
        [1028.6630,  972.0046, 1090.9958,  ..., 1022.1996,  969.2075,
         1003.3057],
        [ 863.7755,  881.0314,  931.1511,  ...,  825.3051,  811.3245,
          817.3488],
        [1050.5590, 1019.2202, 1077.3275,  ...,  929.2889,  941.1250,
         1042.8337]], device='cuda:0')
shape of T_var is  torch.Size([128, 128])
T_var before correction  tensor([[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0078, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        ...,
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]],
       device='cuda:0')
marginals are  tensor([[127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        ...,
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984]],
       device='cuda:0')
T_var after correction  tensor([[0.0000, 0.0000, 0.0000,  ..., 0.0000, 1.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        ...,
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]],
       device='cuda:0')
T_var stats: max 0.9999872446060181, min 0.0, mean 0.007812400348484516, std 0.08804396539926529 
Ratio of trace to the matrix sum:  tensor(0.0156, device='cuda:0')
Here, trace is 1.9999744892120361 and matrix sum is 127.99836730957031 
Shape of aligned wt is  torch.Size([128, 128, 9])
Shape of fc_layer0_weight_data is  torch.Size([128, 128, 9])

--------------- At layer index 10 ------------- 
 
Previous layer shape is  torch.Size([128, 128, 3, 3])
let's see the difference in layer names layer3.0.conv1 layer3.0.conv1
torch.Size([200, 1, 256, 8, 8]) shape of activations generally
reorder_dim is  [1, 2, 3, 0]
In layer layer3.0.conv1.weight: getting activation distance statistics
Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): 

Max : 62.699073791503906, Mean : 24.35259246826172, Min : 6.271411418914795, Std: 9.86257553100586
shape of layer: model 0 torch.Size([256, 128, 9])
shape of layer: model 1 torch.Size([256, 128, 9])
shape of activations: model 0 torch.Size([256, 8, 8, 200])
shape of activations: model 1 torch.Size([256, 8, 8, 200])
shape of previous transport map torch.Size([128, 128])
saved skip T_var at layer 10 with shape torch.Size([256, 128, 3, 3])
shape of previous transport map now is torch.Size([128, 128])
returns a uniform measure of cardinality:  256
returns a uniform measure of cardinality:  256
Refactored ground metric calc
inside refactored
Processing the coordinates to form ground_metric
dont leave off the squaring of the ground metric
# of ground metric features is  12800
# of ground metric features in 0 is   12800
# of ground metric features in 1 is   12800
ground metric (m0) is  tensor([[1089.4249, 1116.8363, 1001.0598,  ..., 1123.2737, 1093.0769,
         1062.7329],
        [1000.3904, 1118.4390,  884.3713,  ..., 1144.6670, 1159.9415,
         1050.1415],
        [1109.3545,  918.7732, 1032.7317,  ...,  979.7417, 1171.3710,
         1159.5629],
        ...,
        [ 847.4427, 1163.8160, 1111.2125,  ..., 1161.7301,  973.1254,
         1010.9772],
        [1205.1925, 1052.0314, 1237.2286,  ..., 1241.8296, 1166.3413,
         1198.3497],
        [1234.8510,  942.8049,  931.8572,  ..., 1000.3014, 1279.8623,
         1199.3691]], device='cuda:0')
shape of T_var is  torch.Size([256, 256])
T_var before correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
marginals are  tensor([[255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        ...,
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934]],
       device='cuda:0')
T_var after correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
T_var stats: max 0.9999743700027466, min 0.0, mean 0.003906149882823229, std 0.06237669289112091 
Ratio of trace to the matrix sum:  tensor(0.0078, device='cuda:0')
Here, trace is 1.9999487400054932 and matrix sum is 255.99343872070312 
Shape of aligned wt is  torch.Size([256, 128, 9])
Shape of fc_layer0_weight_data is  torch.Size([256, 128, 9])

--------------- At layer index 11 ------------- 
 
Previous layer shape is  torch.Size([256, 128, 3, 3])
let's see the difference in layer names layer3.0.conv2 layer3.0.conv2
torch.Size([200, 1, 256, 8, 8]) shape of activations generally
reorder_dim is  [1, 2, 3, 0]
In layer layer3.0.conv2.weight: getting activation distance statistics
Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): 

Max : 90.88002014160156, Mean : 33.370059967041016, Min : 8.338285446166992, Std: 14.259284973144531
shape of layer: model 0 torch.Size([256, 256, 9])
shape of layer: model 1 torch.Size([256, 256, 9])
shape of activations: model 0 torch.Size([256, 8, 8, 200])
shape of activations: model 1 torch.Size([256, 8, 8, 200])
shape of previous transport map torch.Size([256, 256])
doing nothing for skips
returns a uniform measure of cardinality:  256
returns a uniform measure of cardinality:  256
Refactored ground metric calc
inside refactored
Processing the coordinates to form ground_metric
dont leave off the squaring of the ground metric
# of ground metric features is  12800
# of ground metric features in 0 is   12800
# of ground metric features in 1 is   12800
ground metric (m0) is  tensor([[1523.1963, 1305.8638,  988.7835,  ..., 1086.8168, 1273.1815,
         1448.1826],
        [1577.7963, 1340.4236, 1264.9495,  ..., 1242.2354, 1276.6346,
         1433.6006],
        [1567.9017, 1405.3711, 1704.5493,  ..., 1648.3910, 1588.8683,
         2027.2841],
        ...,
        [1590.2295, 1139.1068,  909.2220,  ...,  716.8305, 1063.6779,
         1197.3578],
        [1839.6106, 1443.8594, 1237.5155,  ..., 1155.2388, 1313.6910,
         1363.3657],
        [1958.2789, 1550.3025, 1689.2948,  ..., 1640.1735, 1797.3912,
         1877.3821]], device='cuda:0')
shape of T_var is  torch.Size([256, 256])
T_var before correction  tensor([[0.0000, 0.0000, 0.0039,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        ...,
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]],
       device='cuda:0')
marginals are  tensor([[255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        ...,
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934]],
       device='cuda:0')
T_var after correction  tensor([[0.0000, 0.0000, 1.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        ...,
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]],
       device='cuda:0')
T_var stats: max 0.9999743700027466, min 0.0, mean 0.003906149882823229, std 0.06237669289112091 
Ratio of trace to the matrix sum:  tensor(0.0117, device='cuda:0')
Here, trace is 2.9999232292175293 and matrix sum is 255.99343872070312 
Shape of aligned wt is  torch.Size([256, 256, 9])
Shape of fc_layer0_weight_data is  torch.Size([256, 256, 9])

--------------- At layer index 12 ------------- 
 
Previous layer shape is  torch.Size([256, 256, 3, 3])
let's see the difference in layer names layer3.0.shortcut.0 layer3.0.shortcut.0
torch.Size([200, 1, 256, 8, 8]) shape of activations generally
reorder_dim is  [1, 2, 3, 0]
In layer layer3.0.shortcut.0.weight: getting activation distance statistics
Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): 

Max : 20.998401641845703, Mean : 8.619168281555176, Min : 2.1942806243896484, Std: 3.3403635025024414
shape of layer: model 0 torch.Size([256, 128, 1])
shape of layer: model 1 torch.Size([256, 128, 1])
shape of activations: model 0 torch.Size([256, 8, 8, 200])
shape of activations: model 1 torch.Size([256, 8, 8, 200])
shape of previous transport map torch.Size([256, 256])
utilizing skip T_var saved from layer layer 10 with shape torch.Size([128, 128])
shape of previous transport map now is torch.Size([128, 128])
returns a uniform measure of cardinality:  256
returns a uniform measure of cardinality:  256
Refactored ground metric calc
inside refactored
Processing the coordinates to form ground_metric
dont leave off the squaring of the ground metric
# of ground metric features is  12800
# of ground metric features in 0 is   12800
# of ground metric features in 1 is   12800
ground metric (m0) is  tensor([[295.7840, 336.1635, 208.2681,  ..., 244.0217, 238.4201, 401.1261],
        [427.4305, 313.2294, 298.0300,  ..., 219.1040, 307.3913, 306.9711],
        [329.2032, 263.3267, 356.9057,  ..., 329.4839, 393.7039, 594.4293],
        ...,
        [366.0233, 189.5853, 177.2553,  ..., 112.5057, 246.6809, 324.3281],
        [481.0345, 328.9906, 323.1125,  ..., 236.2732, 367.2152, 297.2437],
        [527.6714, 288.1887, 387.8282,  ..., 291.5142, 468.4514, 457.8251]],
       device='cuda:0')
shape of T_var is  torch.Size([256, 256])
T_var before correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
marginals are  tensor([[255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        ...,
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934]],
       device='cuda:0')
T_var after correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
T_var stats: max 0.9999743700027466, min 0.0, mean 0.003906149882823229, std 0.06237669289112091 
Ratio of trace to the matrix sum:  tensor(0.0039, device='cuda:0')
Here, trace is 0.9999743700027466 and matrix sum is 255.99343872070312 
Shape of aligned wt is  torch.Size([256, 128, 1])
Shape of fc_layer0_weight_data is  torch.Size([256, 128, 1])

--------------- At layer index 13 ------------- 
 
Previous layer shape is  torch.Size([256, 128, 1, 1])
let's see the difference in layer names layer3.1.conv1 layer3.1.conv1
torch.Size([200, 1, 256, 8, 8]) shape of activations generally
reorder_dim is  [1, 2, 3, 0]
In layer layer3.1.conv1.weight: getting activation distance statistics
Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): 

Max : 103.23678588867188, Mean : 37.83562469482422, Min : 9.801466941833496, Std: 16.142868041992188
shape of layer: model 0 torch.Size([256, 256, 9])
shape of layer: model 1 torch.Size([256, 256, 9])
shape of activations: model 0 torch.Size([256, 8, 8, 200])
shape of activations: model 1 torch.Size([256, 8, 8, 200])
shape of previous transport map torch.Size([256, 256])
averaging multiple T_var's
returns a uniform measure of cardinality:  256
returns a uniform measure of cardinality:  256
Refactored ground metric calc
inside refactored
Processing the coordinates to form ground_metric
dont leave off the squaring of the ground metric
# of ground metric features is  12800
# of ground metric features in 0 is   12800
# of ground metric features in 1 is   12800
ground metric (m0) is  tensor([[1445.6587, 1272.7823, 1801.8510,  ..., 1689.6985, 1960.9016,
         1636.1177],
        [1561.9845, 1453.1442, 1668.1658,  ..., 1705.9939, 1892.4243,
         1537.3920],
        [1408.5453, 1400.2186, 1615.9298,  ..., 1622.5316, 1829.8680,
         1594.4055],
        ...,
        [1611.9706, 1700.1982, 1881.3171,  ..., 1629.5249, 2052.1472,
         1774.1014],
        [1768.7198, 1776.9851, 1760.1969,  ..., 1505.0123, 1907.5753,
         1637.7708],
        [1348.8735, 1300.9940, 1564.7274,  ..., 1645.1351, 1856.0662,
         1544.2015]], device='cuda:0')
shape of T_var is  torch.Size([256, 256])
T_var before correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
marginals are  tensor([[255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        ...,
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934]],
       device='cuda:0')
T_var after correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
T_var stats: max 0.9999743700027466, min 0.0, mean 0.003906149882823229, std 0.06237669289112091 
Ratio of trace to the matrix sum:  tensor(0., device='cuda:0')
Here, trace is 0.0 and matrix sum is 255.99343872070312 
Shape of aligned wt is  torch.Size([256, 256, 9])
Shape of fc_layer0_weight_data is  torch.Size([256, 256, 9])

--------------- At layer index 14 ------------- 
 
Previous layer shape is  torch.Size([256, 256, 3, 3])
let's see the difference in layer names layer3.1.conv2 layer3.1.conv2
torch.Size([200, 1, 256, 8, 8]) shape of activations generally
reorder_dim is  [1, 2, 3, 0]
In layer layer3.1.conv2.weight: getting activation distance statistics
Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): 

Max : 68.38267517089844, Mean : 18.928720474243164, Min : 3.608940601348877, Std: 10.591992378234863
shape of layer: model 0 torch.Size([256, 256, 9])
shape of layer: model 1 torch.Size([256, 256, 9])
shape of activations: model 0 torch.Size([256, 8, 8, 200])
shape of activations: model 1 torch.Size([256, 8, 8, 200])
shape of previous transport map torch.Size([256, 256])
doing nothing for skips
returns a uniform measure of cardinality:  256
returns a uniform measure of cardinality:  256
Refactored ground metric calc
inside refactored
Processing the coordinates to form ground_metric
dont leave off the squaring of the ground metric
# of ground metric features is  12800
# of ground metric features in 0 is   12800
# of ground metric features in 1 is   12800
ground metric (m0) is  tensor([[ 899.5897,  874.3084,  723.0856,  ...,  838.4041,  855.7330,
          985.9069],
        [ 921.7767,  898.8387,  775.5112,  ...,  757.9343,  808.6713,
          949.8573],
        [ 979.7479,  825.7909,  808.2913,  ...,  775.0859,  867.3527,
         1058.7622],
        ...,
        [ 882.7837,  734.6718,  623.9103,  ...,  478.0472,  648.6466,
          795.4233],
        [1045.4680,  940.4466,  822.9678,  ...,  862.2435,  863.9327,
          963.0995],
        [ 929.8281,  831.1002,  760.2719,  ...,  736.5961,  832.6003,
          956.3923]], device='cuda:0')
shape of T_var is  torch.Size([256, 256])
T_var before correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
marginals are  tensor([[255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        ...,
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934]],
       device='cuda:0')
T_var after correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
T_var stats: max 0.9999743700027466, min 0.0, mean 0.003906149882823229, std 0.06237669289112091 
Ratio of trace to the matrix sum:  tensor(0.0039, device='cuda:0')
Here, trace is 0.9999743700027466 and matrix sum is 255.99343872070312 
Shape of aligned wt is  torch.Size([256, 256, 9])
Shape of fc_layer0_weight_data is  torch.Size([256, 256, 9])

--------------- At layer index 15 ------------- 
 
Previous layer shape is  torch.Size([256, 256, 3, 3])
let's see the difference in layer names layer4.0.conv1 layer4.0.conv1
torch.Size([200, 1, 512, 4, 4]) shape of activations generally
reorder_dim is  [1, 2, 3, 0]
In layer layer4.0.conv1.weight: getting activation distance statistics
Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): 

Max : 51.278831481933594, Mean : 15.841732025146484, Min : 2.789296865463257, Std: 8.039236068725586
shape of layer: model 0 torch.Size([512, 256, 9])
shape of layer: model 1 torch.Size([512, 256, 9])
shape of activations: model 0 torch.Size([512, 4, 4, 200])
shape of activations: model 1 torch.Size([512, 4, 4, 200])
shape of previous transport map torch.Size([256, 256])
saved skip T_var at layer 15 with shape torch.Size([512, 256, 3, 3])
shape of previous transport map now is torch.Size([256, 256])
returns a uniform measure of cardinality:  512
returns a uniform measure of cardinality:  512
Refactored ground metric calc
inside refactored
Processing the coordinates to form ground_metric
dont leave off the squaring of the ground metric
# of ground metric features is  3200
# of ground metric features in 0 is   3200
# of ground metric features in 1 is   3200
ground metric (m0) is  tensor([[436.2802, 461.4727, 448.2261,  ..., 335.2505, 444.6825, 447.9962],
        [412.4250, 403.2547, 502.5441,  ..., 434.4863, 395.2978, 439.3887],
        [492.2277, 544.6407, 520.2657,  ..., 473.6613, 457.7046, 507.4921],
        ...,
        [453.4857, 422.9109, 555.2374,  ..., 490.5763, 480.0669, 486.8556],
        [512.6339, 530.0984, 518.2145,  ..., 421.7766, 482.4497, 484.6895],
        [458.5227, 456.8262, 476.3915,  ..., 375.8524, 437.7508, 474.6742]],
       device='cuda:0')
shape of T_var is  torch.Size([512, 512])
T_var before correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
marginals are  tensor([[511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        ...,
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738]],
       device='cuda:0')
T_var after correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
T_var stats: max 0.9999488592147827, min 0.0, mean 0.0019530251156538725, std 0.044148821383714676 
Ratio of trace to the matrix sum:  tensor(0., device='cuda:0')
Here, trace is 0.0 and matrix sum is 511.97381591796875 
Shape of aligned wt is  torch.Size([512, 256, 9])
Shape of fc_layer0_weight_data is  torch.Size([512, 256, 9])

--------------- At layer index 16 ------------- 
 
Previous layer shape is  torch.Size([512, 256, 3, 3])
let's see the difference in layer names layer4.0.conv2 layer4.0.conv2
torch.Size([200, 1, 512, 4, 4]) shape of activations generally
reorder_dim is  [1, 2, 3, 0]
In layer layer4.0.conv2.weight: getting activation distance statistics
Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): 

Max : 57.48903274536133, Mean : 16.287378311157227, Min : 2.7535784244537354, Std: 8.953266143798828
shape of layer: model 0 torch.Size([512, 512, 9])
shape of layer: model 1 torch.Size([512, 512, 9])
shape of activations: model 0 torch.Size([512, 4, 4, 200])
shape of activations: model 1 torch.Size([512, 4, 4, 200])
shape of previous transport map torch.Size([512, 512])
doing nothing for skips
returns a uniform measure of cardinality:  512
returns a uniform measure of cardinality:  512
Refactored ground metric calc
inside refactored
Processing the coordinates to form ground_metric
dont leave off the squaring of the ground metric
# of ground metric features is  3200
# of ground metric features in 0 is   3200
# of ground metric features in 1 is   3200
ground metric (m0) is  tensor([[366.8935, 684.1141, 323.5089,  ..., 670.5653, 502.9743, 521.1367],
        [423.6590, 533.2035, 455.1229,  ..., 634.1848, 514.0815, 517.2202],
        [465.3289, 644.5158, 487.9952,  ..., 708.9133, 707.2968, 544.0772],
        ...,
        [570.6368, 687.8805, 539.7552,  ..., 693.4181, 585.0284, 622.3163],
        [553.2112, 674.4823, 535.6618,  ..., 666.2001, 595.9015, 614.8975],
        [569.9016, 650.3735, 575.1194,  ..., 680.2916, 685.8315, 634.6999]],
       device='cuda:0')
shape of T_var is  torch.Size([512, 512])
T_var before correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
marginals are  tensor([[511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        ...,
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738]],
       device='cuda:0')
T_var after correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
T_var stats: max 0.9999488592147827, min 0.0, mean 0.0019530251156538725, std 0.044148821383714676 
Ratio of trace to the matrix sum:  tensor(0.0020, device='cuda:0')
Here, trace is 0.9999488592147827 and matrix sum is 511.97381591796875 
Shape of aligned wt is  torch.Size([512, 512, 9])
Shape of fc_layer0_weight_data is  torch.Size([512, 512, 9])

--------------- At layer index 17 ------------- 
 
Previous layer shape is  torch.Size([512, 512, 3, 3])
let's see the difference in layer names layer4.0.shortcut.0 layer4.0.shortcut.0
torch.Size([200, 1, 512, 4, 4]) shape of activations generally
reorder_dim is  [1, 2, 3, 0]
In layer layer4.0.shortcut.0.weight: getting activation distance statistics
Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): 

Max : 15.207345962524414, Mean : 5.242092132568359, Min : 1.0344781875610352, Std: 2.405226707458496
shape of layer: model 0 torch.Size([512, 256, 1])
shape of layer: model 1 torch.Size([512, 256, 1])
shape of activations: model 0 torch.Size([512, 4, 4, 200])
shape of activations: model 1 torch.Size([512, 4, 4, 200])
shape of previous transport map torch.Size([512, 512])
utilizing skip T_var saved from layer layer 15 with shape torch.Size([256, 256])
shape of previous transport map now is torch.Size([256, 256])
returns a uniform measure of cardinality:  512
returns a uniform measure of cardinality:  512
Refactored ground metric calc
inside refactored
Processing the coordinates to form ground_metric
dont leave off the squaring of the ground metric
# of ground metric features is  3200
# of ground metric features in 0 is   3200
# of ground metric features in 1 is   3200
ground metric (m0) is  tensor([[101.4272, 232.4829, 102.1475,  ..., 243.1305, 155.1114, 128.3907],
        [153.9030, 143.4162, 160.4450,  ..., 160.6892, 146.4980, 181.0804],
        [139.3866, 210.7440, 150.8157,  ..., 210.4406, 158.4955, 158.3124],
        ...,
        [128.2488, 183.5619, 128.6164,  ..., 194.0142, 139.5167, 161.1959],
        [140.9910, 185.3752, 136.4744,  ..., 201.4491, 145.1943, 179.4586],
        [149.3200, 182.0870, 153.4989,  ..., 179.8047, 161.6698, 182.7895]],
       device='cuda:0')
shape of T_var is  torch.Size([512, 512])
T_var before correction  tensor([[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0020, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        ...,
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]],
       device='cuda:0')
marginals are  tensor([[511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        ...,
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738]],
       device='cuda:0')
T_var after correction  tensor([[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.9999, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        ...,
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]],
       device='cuda:0')
T_var stats: max 0.9999488592147827, min 0.0, mean 0.0019530251156538725, std 0.044148821383714676 
Ratio of trace to the matrix sum:  tensor(0.0020, device='cuda:0')
Here, trace is 0.9999488592147827 and matrix sum is 511.97381591796875 
Shape of aligned wt is  torch.Size([512, 256, 1])
Shape of fc_layer0_weight_data is  torch.Size([512, 256, 1])

--------------- At layer index 18 ------------- 
 
Previous layer shape is  torch.Size([512, 256, 1, 1])
let's see the difference in layer names layer4.1.conv1 layer4.1.conv1
torch.Size([200, 1, 512, 4, 4]) shape of activations generally
reorder_dim is  [1, 2, 3, 0]
In layer layer4.1.conv1.weight: getting activation distance statistics
Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): 

Max : 34.39806365966797, Mean : 8.38942813873291, Min : 1.1878249645233154, Std: 5.558620929718018
shape of layer: model 0 torch.Size([512, 512, 9])
shape of layer: model 1 torch.Size([512, 512, 9])
shape of activations: model 0 torch.Size([512, 4, 4, 200])
shape of activations: model 1 torch.Size([512, 4, 4, 200])
shape of previous transport map torch.Size([512, 512])
averaging multiple T_var's
returns a uniform measure of cardinality:  512
returns a uniform measure of cardinality:  512
Refactored ground metric calc
inside refactored
Processing the coordinates to form ground_metric
dont leave off the squaring of the ground metric
# of ground metric features is  3200
# of ground metric features in 0 is   3200
# of ground metric features in 1 is   3200
ground metric (m0) is  tensor([[233.4168,  62.1164, 242.0226,  ..., 172.6768, 275.5335, 420.0675],
        [259.3475, 336.8040, 281.3008,  ..., 322.6999, 298.8415, 406.5676],
        [237.1355, 211.4354, 256.7732,  ..., 210.5771, 295.8542, 396.1907],
        ...,
        [341.4561, 349.7238, 309.1071,  ..., 378.2013, 398.3746, 441.9299],
        [235.0634, 271.0391, 237.1897,  ..., 253.3696, 288.2667, 318.2957],
        [204.7249, 218.3684, 235.2802,  ..., 211.2723, 266.4840, 374.2095]],
       device='cuda:0')
shape of T_var is  torch.Size([512, 512])
T_var before correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
marginals are  tensor([[511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        ...,
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738]],
       device='cuda:0')
T_var after correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
T_var stats: max 0.9999488592147827, min 0.0, mean 0.0019530251156538725, std 0.044148821383714676 
Ratio of trace to the matrix sum:  tensor(0., device='cuda:0')
Here, trace is 0.0 and matrix sum is 511.97381591796875 
Shape of aligned wt is  torch.Size([512, 512, 9])
Shape of fc_layer0_weight_data is  torch.Size([512, 512, 9])

--------------- At layer index 19 ------------- 
 
Previous layer shape is  torch.Size([512, 512, 3, 3])
let's see the difference in layer names layer4.1.conv2 layer4.1.conv2
torch.Size([200, 1, 512, 4, 4]) shape of activations generally
reorder_dim is  [1, 2, 3, 0]
In layer layer4.1.conv2.weight: getting activation distance statistics
Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): 

Max : 40.926025390625, Mean : 6.947565078735352, Min : 0.6500935554504395, Std: 6.221210479736328
shape of layer: model 0 torch.Size([512, 512, 9])
shape of layer: model 1 torch.Size([512, 512, 9])
shape of activations: model 0 torch.Size([512, 4, 4, 200])
shape of activations: model 1 torch.Size([512, 4, 4, 200])
shape of previous transport map torch.Size([512, 512])
doing nothing for skips
returns a uniform measure of cardinality:  512
returns a uniform measure of cardinality:  512
Refactored ground metric calc
inside refactored
Processing the coordinates to form ground_metric
dont leave off the squaring of the ground metric
# of ground metric features is  3200
# of ground metric features in 0 is   3200
# of ground metric features in 1 is   3200
ground metric (m0) is  tensor([[195.7195, 303.0112, 197.0600,  ..., 380.1457, 246.4326, 217.4427],
        [200.0920, 220.4587, 231.5139,  ..., 358.1718, 290.9417, 261.8131],
        [229.0283, 310.5458, 219.0708,  ..., 392.5336, 328.0876, 251.9958],
        ...,
        [303.6192, 375.0484, 287.9611,  ..., 430.6933, 360.3048, 356.5548],
        [216.3108, 298.1866, 238.4744,  ..., 366.4368, 306.4145, 299.1176],
        [259.4200, 302.0613, 277.0482,  ..., 377.2660, 343.1861, 313.6227]],
       device='cuda:0')
shape of T_var is  torch.Size([512, 512])
T_var before correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
marginals are  tensor([[511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        ...,
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738]],
       device='cuda:0')
T_var after correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
T_var stats: max 0.9999488592147827, min 0.0, mean 0.0019530251156538725, std 0.044148821383714676 
Ratio of trace to the matrix sum:  tensor(0.0039, device='cuda:0')
Here, trace is 1.9998977184295654 and matrix sum is 511.97381591796875 
Shape of aligned wt is  torch.Size([512, 512, 9])
Shape of fc_layer0_weight_data is  torch.Size([512, 512, 9])

--------------- At layer index 20 ------------- 
 
Previous layer shape is  torch.Size([512, 512, 3, 3])
let's see the difference in layer names linear linear
torch.Size([200, 1, 10]) shape of activations generally
In layer linear.weight: getting activation distance statistics
Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): 

Max : 334.87506103515625, Mean : 239.8698272705078, Min : 50.77275466918945, Std: 80.19795989990234
shape of layer: model 0 torch.Size([10, 512])
shape of layer: model 1 torch.Size([10, 512])
shape of activations: model 0 torch.Size([10, 200])
shape of activations: model 1 torch.Size([10, 200])
shape of previous transport map torch.Size([512, 512])
returns a uniform measure of cardinality:  10
returns a uniform measure of cardinality:  10
Refactored ground metric calc
inside refactored
Processing the coordinates to form ground_metric
dont leave off the squaring of the ground metric
# of ground metric features in 0 is   200
# of ground metric features in 1 is   200
ground metric (m0) is  tensor([[ 44.7412, 270.2287, 205.7586, 239.9820, 234.4909, 245.5093, 259.0582,
         291.8726, 194.3663, 234.9170],
        [264.9576,  51.5318, 325.5444, 330.4255, 342.7109, 339.8253, 328.3515,
         372.9397, 270.4140, 208.7886],
        [190.4484, 310.8545,  55.4170, 179.5406, 176.8312, 166.3598, 202.2616,
         247.6797, 240.2948, 263.0652],
        [243.8821, 336.2282, 193.8533,  54.8301, 210.8648, 184.3307, 244.8097,
         286.2570, 279.9398, 299.4861],
        [238.2701, 353.1209, 177.2182, 215.7006,  51.5823, 181.6271, 251.9007,
         234.9669, 281.4619, 316.3665],
        [239.4055, 331.0694, 168.9993, 176.7595, 175.5250,  52.8654, 241.2131,
         219.0865, 274.0026, 297.7917],
        [250.8611, 314.6119, 201.4756, 230.2604, 243.4358, 230.5280,  52.1272,
         318.3608, 275.9469, 303.1887],
        [293.4083, 385.2508, 250.9311, 282.4350, 237.8429, 215.9881, 329.0041,
          48.3235, 314.7722, 333.0782],
        [191.0526, 292.2703, 253.9457, 267.9931, 273.6195, 276.4311, 283.7717,
         318.9871,  45.3662, 243.9047],
        [223.7191, 225.4458, 277.9825, 279.5001, 298.7098, 295.9467, 310.6354,
         330.0662, 232.2789,  50.9427]], device='cuda:0')
shape of T_var is  torch.Size([10, 10])
T_var before correction  tensor([[0.1000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
         0.0000],
        [0.0000, 0.1000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
         0.0000],
        [0.0000, 0.0000, 0.1000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
         0.0000],
        [0.0000, 0.0000, 0.0000, 0.1000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
         0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.1000, 0.0000, 0.0000, 0.0000, 0.0000,
         0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.1000, 0.0000, 0.0000, 0.0000,
         0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.1000, 0.0000, 0.0000,
         0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.1000, 0.0000,
         0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.1000,
         0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
         0.1000]], device='cuda:0')
marginals are  tensor([[10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000,
         10.0000, 10.0000],
        [10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000,
         10.0000, 10.0000],
        [10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000,
         10.0000, 10.0000],
        [10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000,
         10.0000, 10.0000],
        [10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000,
         10.0000, 10.0000],
        [10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000,
         10.0000, 10.0000],
        [10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000,
         10.0000, 10.0000],
        [10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000,
         10.0000, 10.0000],
        [10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000,
         10.0000, 10.0000],
        [10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000,
         10.0000, 10.0000]], device='cuda:0')
T_var after correction  tensor([[1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
         0.0000],
        [0.0000, 1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
         0.0000],
        [0.0000, 0.0000, 1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
         0.0000],
        [0.0000, 0.0000, 0.0000, 1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
         0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 1.0000, 0.0000, 0.0000, 0.0000, 0.0000,
         0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 1.0000, 0.0000, 0.0000, 0.0000,
         0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 1.0000, 0.0000, 0.0000,
         0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 1.0000, 0.0000,
         0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 1.0000,
         0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
         1.0000]], device='cuda:0')
T_var stats: max 0.9999990463256836, min 0.0, mean 0.09999990463256836, std 0.3015110492706299 
Ratio of trace to the matrix sum:  tensor(1., device='cuda:0')
Here, trace is 9.999990463256836 and matrix sum is 9.999990463256836 
Shape of aligned wt is  torch.Size([10, 512])
Shape of fc_layer0_weight_data is  torch.Size([10, 512])
using independent method
model parameters are 
 [torch.Size([64, 3, 3, 3]), torch.Size([64, 64, 3, 3]), torch.Size([64, 64, 3, 3]), torch.Size([64, 64, 3, 3]), torch.Size([64, 64, 3, 3]), torch.Size([128, 64, 3, 3]), torch.Size([128, 128, 3, 3]), torch.Size([128, 64, 1, 1]), torch.Size([128, 128, 3, 3]), torch.Size([128, 128, 3, 3]), torch.Size([256, 128, 3, 3]), torch.Size([256, 256, 3, 3]), torch.Size([256, 128, 1, 1]), torch.Size([256, 256, 3, 3]), torch.Size([256, 256, 3, 3]), torch.Size([512, 256, 3, 3]), torch.Size([512, 512, 3, 3]), torch.Size([512, 256, 1, 1]), torch.Size([512, 512, 3, 3]), torch.Size([512, 512, 3, 3]), torch.Size([10, 512])]

--------- Testing in global mode ---------
size of test_loader dataset:  10000

Test set: Avg. loss: 0.0230, Accuracy: 1162/10000 (12%)

len of model parameters and avg aligned layers is  21 21
len of model_state_dict is  21
len of param_list is  21

--------- Testing in global mode ---------
size of test_loader dataset:  10000

Test set: Avg. loss: 0.0113, Accuracy: 6888/10000 (69%)

Timer ends
Time taken for geometric ensembling is 11.78515576897189 seconds
------- Prediction based ensembling -------

Test set: Avg. loss: 0.0037, Accuracy: 9387/10000 (94%)

------- Naive ensembling of weights -------
[torch.Size([64, 3, 3, 3]), torch.Size([64, 3, 3, 3])]
torch.Size([64, 3, 3, 3])
[torch.Size([64, 64, 3, 3]), torch.Size([64, 64, 3, 3])]
torch.Size([64, 64, 3, 3])
[torch.Size([64, 64, 3, 3]), torch.Size([64, 64, 3, 3])]
torch.Size([64, 64, 3, 3])
[torch.Size([64, 64, 3, 3]), torch.Size([64, 64, 3, 3])]
torch.Size([64, 64, 3, 3])
[torch.Size([64, 64, 3, 3]), torch.Size([64, 64, 3, 3])]
torch.Size([64, 64, 3, 3])
[torch.Size([128, 64, 3, 3]), torch.Size([128, 64, 3, 3])]
torch.Size([128, 64, 3, 3])
[torch.Size([128, 128, 3, 3]), torch.Size([128, 128, 3, 3])]
torch.Size([128, 128, 3, 3])
[torch.Size([128, 64, 1, 1]), torch.Size([128, 64, 1, 1])]
torch.Size([128, 64, 1, 1])
[torch.Size([128, 128, 3, 3]), torch.Size([128, 128, 3, 3])]
torch.Size([128, 128, 3, 3])
[torch.Size([128, 128, 3, 3]), torch.Size([128, 128, 3, 3])]
torch.Size([128, 128, 3, 3])
[torch.Size([256, 128, 3, 3]), torch.Size([256, 128, 3, 3])]
torch.Size([256, 128, 3, 3])
[torch.Size([256, 256, 3, 3]), torch.Size([256, 256, 3, 3])]
torch.Size([256, 256, 3, 3])
[torch.Size([256, 128, 1, 1]), torch.Size([256, 128, 1, 1])]
torch.Size([256, 128, 1, 1])
[torch.Size([256, 256, 3, 3]), torch.Size([256, 256, 3, 3])]
torch.Size([256, 256, 3, 3])
[torch.Size([256, 256, 3, 3]), torch.Size([256, 256, 3, 3])]
torch.Size([256, 256, 3, 3])
[torch.Size([512, 256, 3, 3]), torch.Size([512, 256, 3, 3])]
torch.Size([512, 256, 3, 3])
[torch.Size([512, 512, 3, 3]), torch.Size([512, 512, 3, 3])]
torch.Size([512, 512, 3, 3])
[torch.Size([512, 256, 1, 1]), torch.Size([512, 256, 1, 1])]
torch.Size([512, 256, 1, 1])
[torch.Size([512, 512, 3, 3]), torch.Size([512, 512, 3, 3])]
torch.Size([512, 512, 3, 3])
[torch.Size([512, 512, 3, 3]), torch.Size([512, 512, 3, 3])]
torch.Size([512, 512, 3, 3])
[torch.Size([10, 512]), torch.Size([10, 512])]
torch.Size([10, 512])
model parameters are 
 [torch.Size([64, 3, 3, 3]), torch.Size([64, 64, 3, 3]), torch.Size([64, 64, 3, 3]), torch.Size([64, 64, 3, 3]), torch.Size([64, 64, 3, 3]), torch.Size([128, 64, 3, 3]), torch.Size([128, 128, 3, 3]), torch.Size([128, 64, 1, 1]), torch.Size([128, 128, 3, 3]), torch.Size([128, 128, 3, 3]), torch.Size([256, 128, 3, 3]), torch.Size([256, 256, 3, 3]), torch.Size([256, 128, 1, 1]), torch.Size([256, 256, 3, 3]), torch.Size([256, 256, 3, 3]), torch.Size([512, 256, 3, 3]), torch.Size([512, 512, 3, 3]), torch.Size([512, 256, 1, 1]), torch.Size([512, 512, 3, 3]), torch.Size([512, 512, 3, 3]), torch.Size([10, 512])]

--------- Testing in global mode ---------
size of test_loader dataset:  10000

Test set: Avg. loss: 0.0230, Accuracy: 1000/10000 (10%)


--------- Testing in global mode ---------
/home/gvignen/.local/lib/python3.10/site-packages/torch/optim/lr_scheduler.py:136: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  warnings.warn("Detected call of `lr_scheduler.step()` before `optimizer.step()`. "
/home/gvignen/.local/lib/python3.10/site-packages/torch/optim/lr_scheduler.py:149: UserWarning: The epoch parameter in `scheduler.step()` was not necessary and is being deprecated where possible. Please use `scheduler.step()` to step the scheduler. During the deprecation, if epoch is different from None, the closed form is used instead of the new chainable form, where available. Please open an issue if you are unable to replicate your use case: https://github.com/pytorch/pytorch/issues/new/choose.
  warnings.warn(EPOCH_DEPRECATION_WARNING, UserWarning)
size of test_loader dataset:  10000

Test set: Avg. loss: 0.0230, Accuracy: 1917/10000 (19%)

-------- Retraining the models ---------
Retraining model :  geometric
lr is  0.1
number of epochs would be  300
Epoch 000
accuracy: {'epoch': 0, 'value': 0.8866400000381469} ({'split': 'train'})
cross_entropy: {'epoch': 0, 'value': 0.33600387696266165} ({'split': 'train'})
accuracy: {'epoch': 0, 'value': 0.8793999803066254} ({'split': 'test'})
cross_entropy: {'epoch': 0, 'value': 0.36880038201808935} ({'split': 'test'})
We have a new best! with accuracy::0.8793999803066254 and at epoch::0, let's save it!
Epoch 001
accuracy: {'epoch': 1, 'value': 0.9191000000572201} ({'split': 'train'})
cross_entropy: {'epoch': 1, 'value': 0.2336086087322235} ({'split': 'train'})
accuracy: {'epoch': 1, 'value': 0.8838999783992766} ({'split': 'test'})
cross_entropy: {'epoch': 1, 'value': 0.37101415783166897} ({'split': 'test'})
We have a new best! with accuracy::0.8838999783992766 and at epoch::1, let's save it!
Epoch 002
accuracy: {'epoch': 2, 'value': 0.9269200000000002} ({'split': 'train'})
cross_entropy: {'epoch': 2, 'value': 0.21123562539100635} ({'split': 'train'})
accuracy: {'epoch': 2, 'value': 0.8872999799251556} ({'split': 'test'})
cross_entropy: {'epoch': 2, 'value': 0.37308551549911495} ({'split': 'test'})
We have a new best! with accuracy::0.8872999799251556 and at epoch::2, let's save it!
Epoch 003
accuracy: {'epoch': 3, 'value': 0.9360000000572207} ({'split': 'train'})
cross_entropy: {'epoch': 3, 'value': 0.18207987158060085} ({'split': 'train'})
accuracy: {'epoch': 3, 'value': 0.890399980545044} ({'split': 'test'})
cross_entropy: {'epoch': 3, 'value': 0.38658337980508806} ({'split': 'test'})
We have a new best! with accuracy::0.890399980545044 and at epoch::3, let's save it!
Epoch 004
accuracy: {'epoch': 4, 'value': 0.9430400000381471} ({'split': 'train'})
cross_entropy: {'epoch': 4, 'value': 0.16526782469749465} ({'split': 'train'})
accuracy: {'epoch': 4, 'value': 0.8837999784946441} ({'split': 'test'})
cross_entropy: {'epoch': 4, 'value': 0.3815695898234844} ({'split': 'test'})
Epoch 005
accuracy: {'epoch': 5, 'value': 0.9500200000381468} ({'split': 'train'})
cross_entropy: {'epoch': 5, 'value': 0.14686520786285392} ({'split': 'train'})
accuracy: {'epoch': 5, 'value': 0.8976999801397322} ({'split': 'test'})
cross_entropy: {'epoch': 5, 'value': 0.363276187852025} ({'split': 'test'})
We have a new best! with accuracy::0.8976999801397322 and at epoch::5, let's save it!
Epoch 006
accuracy: {'epoch': 6, 'value': 0.9516800000190738} ({'split': 'train'})
cross_entropy: {'epoch': 6, 'value': 0.13537494540214548} ({'split': 'train'})
accuracy: {'epoch': 6, 'value': 0.898399983048439} ({'split': 'test'})
cross_entropy: {'epoch': 6, 'value': 0.3362267361581327} ({'split': 'test'})
We have a new best! with accuracy::0.898399983048439 and at epoch::6, let's save it!
Epoch 007
accuracy: {'epoch': 7, 'value': 0.9530399999809264} ({'split': 'train'})
cross_entropy: {'epoch': 7, 'value': 0.13491659136772144} ({'split': 'train'})
accuracy: {'epoch': 7, 'value': 0.8895999825000762} ({'split': 'test'})
cross_entropy: {'epoch': 7, 'value': 0.3907699196785687} ({'split': 'test'})
Epoch 008
accuracy: {'epoch': 8, 'value': 0.9526000000381475} ({'split': 'train'})
cross_entropy: {'epoch': 8, 'value': 0.13817560212850574} ({'split': 'train'})
accuracy: {'epoch': 8, 'value': 0.8894999814033508} ({'split': 'test'})
cross_entropy: {'epoch': 8, 'value': 0.3788055475056171} ({'split': 'test'})
Epoch 009
accuracy: {'epoch': 9, 'value': 0.9552200000190735} ({'split': 'train'})
cross_entropy: {'epoch': 9, 'value': 0.12637030340194705} ({'split': 'train'})
accuracy: {'epoch': 9, 'value': 0.9011999809741973} ({'split': 'test'})
cross_entropy: {'epoch': 9, 'value': 0.34334445312619216} ({'split': 'test'})
We have a new best! with accuracy::0.9011999809741973 and at epoch::9, let's save it!
Epoch 010
accuracy: {'epoch': 10, 'value': 0.9581000000190737} ({'split': 'train'})
cross_entropy: {'epoch': 10, 'value': 0.12278105173110958} ({'split': 'train'})
accuracy: {'epoch': 10, 'value': 0.8985999816656114} ({'split': 'test'})
cross_entropy: {'epoch': 10, 'value': 0.3215561324357986} ({'split': 'test'})
Epoch 011
accuracy: {'epoch': 11, 'value': 0.9610200000572203} ({'split': 'train'})
cross_entropy: {'epoch': 11, 'value': 0.11357303501844408} ({'split': 'train'})
accuracy: {'epoch': 11, 'value': 0.8973999834060669} ({'split': 'test'})
cross_entropy: {'epoch': 11, 'value': 0.3467952528595925} ({'split': 'test'})
Epoch 012
accuracy: {'epoch': 12, 'value': 0.9593600000381468} ({'split': 'train'})
cross_entropy: {'epoch': 12, 'value': 0.12034343891143798} ({'split': 'train'})
accuracy: {'epoch': 12, 'value': 0.8982999837398528} ({'split': 'test'})
cross_entropy: {'epoch': 12, 'value': 0.3477562904357909} ({'split': 'test'})
Epoch 013
accuracy: {'epoch': 13, 'value': 0.9643400000190742} ({'split': 'train'})
cross_entropy: {'epoch': 13, 'value': 0.10460793418884273} ({'split': 'train'})
accuracy: {'epoch': 13, 'value': 0.8969999819993978} ({'split': 'test'})
cross_entropy: {'epoch': 13, 'value': 0.3905392518639564} ({'split': 'test'})
Epoch 014
accuracy: {'epoch': 14, 'value': 0.9649800000381463} ({'split': 'train'})
cross_entropy: {'epoch': 14, 'value': 0.10659007407903667} ({'split': 'train'})
accuracy: {'epoch': 14, 'value': 0.9008999800682074} ({'split': 'test'})
cross_entropy: {'epoch': 14, 'value': 0.3642992341518402} ({'split': 'test'})
Epoch 015
accuracy: {'epoch': 15, 'value': 0.968340000038147} ({'split': 'train'})
cross_entropy: {'epoch': 15, 'value': 0.09298407976627347} ({'split': 'train'})
accuracy: {'epoch': 15, 'value': 0.899899981021881} ({'split': 'test'})
cross_entropy: {'epoch': 15, 'value': 0.3358106660842897} ({'split': 'test'})
Epoch 016
accuracy: {'epoch': 16, 'value': 0.9673200000190731} ({'split': 'train'})
cross_entropy: {'epoch': 16, 'value': 0.09511680664896963} ({'split': 'train'})
accuracy: {'epoch': 16, 'value': 0.9031999820470813} ({'split': 'test'})
cross_entropy: {'epoch': 16, 'value': 0.3577770821005105} ({'split': 'test'})
We have a new best! with accuracy::0.9031999820470813 and at epoch::16, let's save it!
Epoch 017
accuracy: {'epoch': 17, 'value': 0.9702000000190736} ({'split': 'train'})
cross_entropy: {'epoch': 17, 'value': 0.08776407484292983} ({'split': 'train'})
accuracy: {'epoch': 17, 'value': 0.9006999790668488} ({'split': 'test'})
cross_entropy: {'epoch': 17, 'value': 0.3930835011601448} ({'split': 'test'})
Epoch 018
accuracy: {'epoch': 18, 'value': 0.9690999999809264} ({'split': 'train'})
cross_entropy: {'epoch': 18, 'value': 0.09032787534475326} ({'split': 'train'})
accuracy: {'epoch': 18, 'value': 0.9007999789714816} ({'split': 'test'})
cross_entropy: {'epoch': 18, 'value': 0.39841520860791196} ({'split': 'test'})
Epoch 019
accuracy: {'epoch': 19, 'value': 0.9690999999999997} ({'split': 'train'})
cross_entropy: {'epoch': 19, 'value': 0.09129853714227676} ({'split': 'train'})
accuracy: {'epoch': 19, 'value': 0.9021999812126162} ({'split': 'test'})
cross_entropy: {'epoch': 19, 'value': 0.34001557298004637} ({'split': 'test'})
Epoch 020
accuracy: {'epoch': 20, 'value': 0.970000000038147} ({'split': 'train'})
cross_entropy: {'epoch': 20, 'value': 0.08958737392306326} ({'split': 'train'})
accuracy: {'epoch': 20, 'value': 0.9038999819755555} ({'split': 'test'})
cross_entropy: {'epoch': 20, 'value': 0.35563234306871894} ({'split': 'test'})
We have a new best! with accuracy::0.9038999819755555 and at epoch::20, let's save it!
Epoch 021
accuracy: {'epoch': 21, 'value': 0.9714200000190731} ({'split': 'train'})
cross_entropy: {'epoch': 21, 'value': 0.08490872574806212} ({'split': 'train'})
accuracy: {'epoch': 21, 'value': 0.9064999777078628} ({'split': 'test'})
cross_entropy: {'epoch': 21, 'value': 0.37664128609001646} ({'split': 'test'})
We have a new best! with accuracy::0.9064999777078628 and at epoch::21, let's save it!
Epoch 022
accuracy: {'epoch': 22, 'value': 0.9696800000381468} ({'split': 'train'})
cross_entropy: {'epoch': 22, 'value': 0.09011277814149861} ({'split': 'train'})
accuracy: {'epoch': 22, 'value': 0.9093999809026716} ({'split': 'test'})
cross_entropy: {'epoch': 22, 'value': 0.32512020394206054} ({'split': 'test'})
We have a new best! with accuracy::0.9093999809026716 and at epoch::22, let's save it!
Epoch 023
accuracy: {'epoch': 23, 'value': 0.9744400000190737} ({'split': 'train'})
cross_entropy: {'epoch': 23, 'value': 0.07618326235532756} ({'split': 'train'})
accuracy: {'epoch': 23, 'value': 0.9099999785423276} ({'split': 'test'})
cross_entropy: {'epoch': 23, 'value': 0.35673043936491} ({'split': 'test'})
We have a new best! with accuracy::0.9099999785423276 and at epoch::23, let's save it!
Epoch 024
accuracy: {'epoch': 24, 'value': 0.9732000000381468} ({'split': 'train'})
cross_entropy: {'epoch': 24, 'value': 0.07720942671060556} ({'split': 'train'})
accuracy: {'epoch': 24, 'value': 0.9080999821424484} ({'split': 'test'})
cross_entropy: {'epoch': 24, 'value': 0.33975528910756114} ({'split': 'test'})
Epoch 025
accuracy: {'epoch': 25, 'value': 0.9735400000000002} ({'split': 'train'})
cross_entropy: {'epoch': 25, 'value': 0.07874610410928724} ({'split': 'train'})
accuracy: {'epoch': 25, 'value': 0.8979999810457228} ({'split': 'test'})
cross_entropy: {'epoch': 25, 'value': 0.3891873144358397} ({'split': 'test'})
Epoch 026
accuracy: {'epoch': 26, 'value': 0.97538000005722} ({'split': 'train'})
cross_entropy: {'epoch': 26, 'value': 0.0727453293979168} ({'split': 'train'})
accuracy: {'epoch': 26, 'value': 0.9086999845504763} ({'split': 'test'})
cross_entropy: {'epoch': 26, 'value': 0.37165051214396955} ({'split': 'test'})
Epoch 027
accuracy: {'epoch': 27, 'value': 0.9746200000190742} ({'split': 'train'})
cross_entropy: {'epoch': 27, 'value': 0.07391330171465871} ({'split': 'train'})
accuracy: {'epoch': 27, 'value': 0.9080999815464019} ({'split': 'test'})
cross_entropy: {'epoch': 27, 'value': 0.31751332208514194} ({'split': 'test'})
Epoch 028
accuracy: {'epoch': 28, 'value': 0.9750599999999998} ({'split': 'train'})
cross_entropy: {'epoch': 28, 'value': 0.07408509146928792} ({'split': 'train'})
accuracy: {'epoch': 28, 'value': 0.9025999826192858} ({'split': 'test'})
cross_entropy: {'epoch': 28, 'value': 0.3349653474241494} ({'split': 'test'})
Epoch 029
accuracy: {'epoch': 29, 'value': 0.9738400000381466} ({'split': 'train'})
cross_entropy: {'epoch': 29, 'value': 0.07619493711709972} ({'split': 'train'})
accuracy: {'epoch': 29, 'value': 0.8962999826669693} ({'split': 'test'})
cross_entropy: {'epoch': 29, 'value': 0.3692236939817668} ({'split': 'test'})
Epoch 030
accuracy: {'epoch': 30, 'value': 0.973940000038147} ({'split': 'train'})
cross_entropy: {'epoch': 30, 'value': 0.07605706796407696} ({'split': 'train'})
accuracy: {'epoch': 30, 'value': 0.9011999791860583} ({'split': 'test'})
cross_entropy: {'epoch': 30, 'value': 0.3563363070786} ({'split': 'test'})
Epoch 031
accuracy: {'epoch': 31, 'value': 0.9747999999999999} ({'split': 'train'})
cross_entropy: {'epoch': 31, 'value': 0.07353134937494991} ({'split': 'train'})
accuracy: {'epoch': 31, 'value': 0.9102999836206438} ({'split': 'test'})
cross_entropy: {'epoch': 31, 'value': 0.33573847904801374} ({'split': 'test'})
We have a new best! with accuracy::0.9102999836206438 and at epoch::31, let's save it!
Epoch 032
accuracy: {'epoch': 32, 'value': 0.9759800000381472} ({'split': 'train'})
cross_entropy: {'epoch': 32, 'value': 0.07168162090063093} ({'split': 'train'})
accuracy: {'epoch': 32, 'value': 0.9031999814510344} ({'split': 'test'})
cross_entropy: {'epoch': 32, 'value': 0.39504594832658774} ({'split': 'test'})
Epoch 033
accuracy: {'epoch': 33, 'value': 0.9776400000381468} ({'split': 'train'})
cross_entropy: {'epoch': 33, 'value': 0.06565917397141456} ({'split': 'train'})
accuracy: {'epoch': 33, 'value': 0.9118999791145328} ({'split': 'test'})
cross_entropy: {'epoch': 33, 'value': 0.32921936675906166} ({'split': 'test'})
We have a new best! with accuracy::0.9118999791145328 and at epoch::33, let's save it!
Epoch 034
accuracy: {'epoch': 34, 'value': 0.9773800000572208} ({'split': 'train'})
cross_entropy: {'epoch': 34, 'value': 0.06462823579311372} ({'split': 'train'})
accuracy: {'epoch': 34, 'value': 0.9068999832868574} ({'split': 'test'})
cross_entropy: {'epoch': 34, 'value': 0.3825191839039326} ({'split': 'test'})
Epoch 035
accuracy: {'epoch': 35, 'value': 0.9755400000000003} ({'split': 'train'})
cross_entropy: {'epoch': 35, 'value': 0.07082521682918078} ({'split': 'train'})
accuracy: {'epoch': 35, 'value': 0.9051999795436861} ({'split': 'test'})
cross_entropy: {'epoch': 35, 'value': 0.39865859031677253} ({'split': 'test'})
Epoch 036
accuracy: {'epoch': 36, 'value': 0.9772800000381467} ({'split': 'train'})
cross_entropy: {'epoch': 36, 'value': 0.06742842077493667} ({'split': 'train'})
accuracy: {'epoch': 36, 'value': 0.8979999780654906} ({'split': 'test'})
cross_entropy: {'epoch': 36, 'value': 0.4004078341275453} ({'split': 'test'})
Epoch 037
accuracy: {'epoch': 37, 'value': 0.973920000019074} ({'split': 'train'})
cross_entropy: {'epoch': 37, 'value': 0.07530342444658274} ({'split': 'train'})
accuracy: {'epoch': 37, 'value': 0.9051999819278717} ({'split': 'test'})
cross_entropy: {'epoch': 37, 'value': 0.36916782945394533} ({'split': 'test'})
Epoch 038
accuracy: {'epoch': 38, 'value': 0.9751600000190731} ({'split': 'train'})
cross_entropy: {'epoch': 38, 'value': 0.07078206489682196} ({'split': 'train'})
accuracy: {'epoch': 38, 'value': 0.8972999781370159} ({'split': 'test'})
cross_entropy: {'epoch': 38, 'value': 0.39256670489907264} ({'split': 'test'})
Epoch 039
accuracy: {'epoch': 39, 'value': 0.9766400000190734} ({'split': 'train'})
cross_entropy: {'epoch': 39, 'value': 0.06883049274086951} ({'split': 'train'})
accuracy: {'epoch': 39, 'value': 0.9066999816894528} ({'split': 'test'})
cross_entropy: {'epoch': 39, 'value': 0.3369732794910669} ({'split': 'test'})
Epoch 040
accuracy: {'epoch': 40, 'value': 0.9795200000190739} ({'split': 'train'})
cross_entropy: {'epoch': 40, 'value': 0.05981964124679567} ({'split': 'train'})
accuracy: {'epoch': 40, 'value': 0.9062999784946442} ({'split': 'test'})
cross_entropy: {'epoch': 40, 'value': 0.39095195278525363} ({'split': 'test'})
Epoch 041
accuracy: {'epoch': 41, 'value': 0.9768200000000002} ({'split': 'train'})
cross_entropy: {'epoch': 41, 'value': 0.06942128339290625} ({'split': 'train'})
accuracy: {'epoch': 41, 'value': 0.8966999787092209} ({'split': 'test'})
cross_entropy: {'epoch': 41, 'value': 0.42658538565039633} ({'split': 'test'})
Epoch 042
accuracy: {'epoch': 42, 'value': 0.9770600000190732} ({'split': 'train'})
cross_entropy: {'epoch': 42, 'value': 0.06662311970114713} ({'split': 'train'})
accuracy: {'epoch': 42, 'value': 0.9083999800682071} ({'split': 'test'})
cross_entropy: {'epoch': 42, 'value': 0.3299676901847123} ({'split': 'test'})
Epoch 043
accuracy: {'epoch': 43, 'value': 0.9754200000000001} ({'split': 'train'})
cross_entropy: {'epoch': 43, 'value': 0.07448094605207449} ({'split': 'train'})
accuracy: {'epoch': 43, 'value': 0.898499982357025} ({'split': 'test'})
cross_entropy: {'epoch': 43, 'value': 0.4123339709639551} ({'split': 'test'})
Epoch 044
accuracy: {'epoch': 44, 'value': 0.9775600000190738} ({'split': 'train'})
cross_entropy: {'epoch': 44, 'value': 0.06700331789731978} ({'split': 'train'})
accuracy: {'epoch': 44, 'value': 0.9009999823570248} ({'split': 'test'})
cross_entropy: {'epoch': 44, 'value': 0.40131099611520743} ({'split': 'test'})
Epoch 045
accuracy: {'epoch': 45, 'value': 0.9788400000190735} ({'split': 'train'})
cross_entropy: {'epoch': 45, 'value': 0.061625114045143106} ({'split': 'train'})
accuracy: {'epoch': 45, 'value': 0.9010999780893327} ({'split': 'test'})
cross_entropy: {'epoch': 45, 'value': 0.39525172278285003} ({'split': 'test'})
Epoch 046
accuracy: {'epoch': 46, 'value': 0.9769000000381467} ({'split': 'train'})
cross_entropy: {'epoch': 46, 'value': 0.06900577475786204} ({'split': 'train'})
accuracy: {'epoch': 46, 'value': 0.9033999812602996} ({'split': 'test'})
cross_entropy: {'epoch': 46, 'value': 0.33842475742101663} ({'split': 'test'})
Epoch 047
accuracy: {'epoch': 47, 'value': 0.9782400000381472} ({'split': 'train'})
cross_entropy: {'epoch': 47, 'value': 0.06366444493770601} ({'split': 'train'})
accuracy: {'epoch': 47, 'value': 0.8874999833106993} ({'split': 'test'})
cross_entropy: {'epoch': 47, 'value': 0.4196871070563795} ({'split': 'test'})
Epoch 048
accuracy: {'epoch': 48, 'value': 0.9767400000190735} ({'split': 'train'})
cross_entropy: {'epoch': 48, 'value': 0.06960324732303615} ({'split': 'train'})
accuracy: {'epoch': 48, 'value': 0.8864999783039094} ({'split': 'test'})
cross_entropy: {'epoch': 48, 'value': 0.4594043909013271} ({'split': 'test'})
Epoch 049
accuracy: {'epoch': 49, 'value': 0.97908000005722} ({'split': 'train'})
cross_entropy: {'epoch': 49, 'value': 0.06303478289127343} ({'split': 'train'})
accuracy: {'epoch': 49, 'value': 0.9000999796390532} ({'split': 'test'})
cross_entropy: {'epoch': 49, 'value': 0.37824599124491215} ({'split': 'test'})
Epoch 050
accuracy: {'epoch': 50, 'value': 0.9819800000000004} ({'split': 'train'})
cross_entropy: {'epoch': 50, 'value': 0.054883289569616314} ({'split': 'train'})
accuracy: {'epoch': 50, 'value': 0.912199981212616} ({'split': 'test'})
cross_entropy: {'epoch': 50, 'value': 0.36318305537104617} ({'split': 'test'})
We have a new best! with accuracy::0.912199981212616 and at epoch::50, let's save it!
Epoch 051
accuracy: {'epoch': 51, 'value': 0.9794000000000002} ({'split': 'train'})
cross_entropy: {'epoch': 51, 'value': 0.061665135689377766} ({'split': 'train'})
accuracy: {'epoch': 51, 'value': 0.8991999822854996} ({'split': 'test'})
cross_entropy: {'epoch': 51, 'value': 0.39384319536387913} ({'split': 'test'})
Epoch 052
accuracy: {'epoch': 52, 'value': 0.980220000019073} ({'split': 'train'})
cross_entropy: {'epoch': 52, 'value': 0.058731357594132456} ({'split': 'train'})
accuracy: {'epoch': 52, 'value': 0.9065999805927276} ({'split': 'test'})
cross_entropy: {'epoch': 52, 'value': 0.3644715483486654} ({'split': 'test'})
Epoch 053
accuracy: {'epoch': 53, 'value': 0.9805400000000002} ({'split': 'train'})
cross_entropy: {'epoch': 53, 'value': 0.05900099279344083} ({'split': 'train'})
accuracy: {'epoch': 53, 'value': 0.9037999802827833} ({'split': 'test'})
cross_entropy: {'epoch': 53, 'value': 0.3648087868094444} ({'split': 'test'})
Epoch 054
accuracy: {'epoch': 54, 'value': 0.9813800000190732} ({'split': 'train'})
cross_entropy: {'epoch': 54, 'value': 0.05533178144931793} ({'split': 'train'})
accuracy: {'epoch': 54, 'value': 0.9112999802827837} ({'split': 'test'})
cross_entropy: {'epoch': 54, 'value': 0.3807713949680328} ({'split': 'test'})
Epoch 055
accuracy: {'epoch': 55, 'value': 0.9805400000190736} ({'split': 'train'})
cross_entropy: {'epoch': 55, 'value': 0.05699122371196748} ({'split': 'train'})
accuracy: {'epoch': 55, 'value': 0.9096999800205231} ({'split': 'test'})
cross_entropy: {'epoch': 55, 'value': 0.3852315077185631} ({'split': 'test'})
Epoch 056
accuracy: {'epoch': 56, 'value': 0.9785999999809266} ({'split': 'train'})
cross_entropy: {'epoch': 56, 'value': 0.06464862531185145} ({'split': 'train'})
accuracy: {'epoch': 56, 'value': 0.9022999811172485} ({'split': 'test'})
cross_entropy: {'epoch': 56, 'value': 0.3490032220631839} ({'split': 'test'})
Epoch 057
accuracy: {'epoch': 57, 'value': 0.9807000000190739} ({'split': 'train'})
cross_entropy: {'epoch': 57, 'value': 0.05811681730389594} ({'split': 'train'})
accuracy: {'epoch': 57, 'value': 0.8975999820232393} ({'split': 'test'})
cross_entropy: {'epoch': 57, 'value': 0.3750399178266526} ({'split': 'test'})
Epoch 058
accuracy: {'epoch': 58, 'value': 0.9783600000190735} ({'split': 'train'})
cross_entropy: {'epoch': 58, 'value': 0.06621652369976044} ({'split': 'train'})
accuracy: {'epoch': 58, 'value': 0.9047999811172484} ({'split': 'test'})
cross_entropy: {'epoch': 58, 'value': 0.370756873190403} ({'split': 'test'})
Epoch 059
accuracy: {'epoch': 59, 'value': 0.9809800000381471} ({'split': 'train'})
cross_entropy: {'epoch': 59, 'value': 0.05754513464450839} ({'split': 'train'})
accuracy: {'epoch': 59, 'value': 0.9020999848842621} ({'split': 'test'})
cross_entropy: {'epoch': 59, 'value': 0.4182416473329067} ({'split': 'test'})
Epoch 060
accuracy: {'epoch': 60, 'value': 0.9815000000572207} ({'split': 'train'})
cross_entropy: {'epoch': 60, 'value': 0.05676857164859772} ({'split': 'train'})
accuracy: {'epoch': 60, 'value': 0.9066999828815463} ({'split': 'test'})
cross_entropy: {'epoch': 60, 'value': 0.36386124409735193} ({'split': 'test'})
Epoch 061
accuracy: {'epoch': 61, 'value': 0.9799200000572204} ({'split': 'train'})
cross_entropy: {'epoch': 61, 'value': 0.059612254805564875} ({'split': 'train'})
accuracy: {'epoch': 61, 'value': 0.9001999813318251} ({'split': 'test'})
cross_entropy: {'epoch': 61, 'value': 0.3541971760243178} ({'split': 'test'})
Epoch 062
accuracy: {'epoch': 62, 'value': 0.9803} ({'split': 'train'})
cross_entropy: {'epoch': 62, 'value': 0.05828837377369402} ({'split': 'train'})
accuracy: {'epoch': 62, 'value': 0.899399978518486} ({'split': 'test'})
cross_entropy: {'epoch': 62, 'value': 0.43884980484843267} ({'split': 'test'})
Epoch 063
accuracy: {'epoch': 63, 'value': 0.9808800000190734} ({'split': 'train'})
cross_entropy: {'epoch': 63, 'value': 0.056914666125774394} ({'split': 'train'})
accuracy: {'epoch': 63, 'value': 0.9148999810218812} ({'split': 'test'})
cross_entropy: {'epoch': 63, 'value': 0.4081262098252773} ({'split': 'test'})
We have a new best! with accuracy::0.9148999810218812 and at epoch::63, let's save it!
Epoch 064
accuracy: {'epoch': 64, 'value': 0.9818399999809264} ({'split': 'train'})
cross_entropy: {'epoch': 64, 'value': 0.055433610887527456} ({'split': 'train'})
accuracy: {'epoch': 64, 'value': 0.9019999802112579} ({'split': 'test'})
cross_entropy: {'epoch': 64, 'value': 0.38066548988223087} ({'split': 'test'})
Epoch 065
accuracy: {'epoch': 65, 'value': 0.9798399999999997} ({'split': 'train'})
cross_entropy: {'epoch': 65, 'value': 0.05874276257276535} ({'split': 'train'})
accuracy: {'epoch': 65, 'value': 0.9106999784708023} ({'split': 'test'})
cross_entropy: {'epoch': 65, 'value': 0.3943284851312639} ({'split': 'test'})
Epoch 066
accuracy: {'epoch': 66, 'value': 0.9788800000190736} ({'split': 'train'})
cross_entropy: {'epoch': 66, 'value': 0.06327609627127648} ({'split': 'train'})
accuracy: {'epoch': 66, 'value': 0.9085999828577042} ({'split': 'test'})
cross_entropy: {'epoch': 66, 'value': 0.35737761914730076} ({'split': 'test'})
Epoch 067
accuracy: {'epoch': 67, 'value': 0.9782600000572207} ({'split': 'train'})
cross_entropy: {'epoch': 67, 'value': 0.06673135873794557} ({'split': 'train'})
accuracy: {'epoch': 67, 'value': 0.9103999823331834} ({'split': 'test'})
cross_entropy: {'epoch': 67, 'value': 0.37748856812715514} ({'split': 'test'})
Epoch 068
accuracy: {'epoch': 68, 'value': 0.9820600000381471} ({'split': 'train'})
cross_entropy: {'epoch': 68, 'value': 0.05576810125708579} ({'split': 'train'})
accuracy: {'epoch': 68, 'value': 0.9070999813079837} ({'split': 'test'})
cross_entropy: {'epoch': 68, 'value': 0.3444184633344412} ({'split': 'test'})
Epoch 069
accuracy: {'epoch': 69, 'value': 0.9822000000190734} ({'split': 'train'})
cross_entropy: {'epoch': 69, 'value': 0.05400323583602908} ({'split': 'train'})
accuracy: {'epoch': 69, 'value': 0.9061999803781513} ({'split': 'test'})
cross_entropy: {'epoch': 69, 'value': 0.3897125108540059} ({'split': 'test'})
Epoch 070
accuracy: {'epoch': 70, 'value': 0.980840000038147} ({'split': 'train'})
cross_entropy: {'epoch': 70, 'value': 0.056722653117179875} ({'split': 'train'})
accuracy: {'epoch': 70, 'value': 0.9141999822854997} ({'split': 'test'})
cross_entropy: {'epoch': 70, 'value': 0.34059678014367845} ({'split': 'test'})
Epoch 071
accuracy: {'epoch': 71, 'value': 0.9814600000190736} ({'split': 'train'})
cross_entropy: {'epoch': 71, 'value': 0.05709794140338896} ({'split': 'train'})
accuracy: {'epoch': 71, 'value': 0.9117999839782717} ({'split': 'test'})
cross_entropy: {'epoch': 71, 'value': 0.36472544401884055} ({'split': 'test'})
Epoch 072
accuracy: {'epoch': 72, 'value': 0.98186} ({'split': 'train'})
cross_entropy: {'epoch': 72, 'value': 0.054245735936760915} ({'split': 'train'})
accuracy: {'epoch': 72, 'value': 0.9082999819517137} ({'split': 'test'})
cross_entropy: {'epoch': 72, 'value': 0.3574972473084924} ({'split': 'test'})
Epoch 073
accuracy: {'epoch': 73, 'value': 0.9822600000190735} ({'split': 'train'})
cross_entropy: {'epoch': 73, 'value': 0.05294002255439761} ({'split': 'train'})
accuracy: {'epoch': 73, 'value': 0.9099999797344205} ({'split': 'test'})
cross_entropy: {'epoch': 73, 'value': 0.3705029696226121} ({'split': 'test'})
Epoch 074
accuracy: {'epoch': 74, 'value': 0.9780400000190735} ({'split': 'train'})
cross_entropy: {'epoch': 74, 'value': 0.06568172086358068} ({'split': 'train'})
accuracy: {'epoch': 74, 'value': 0.8986999815702437} ({'split': 'test'})
cross_entropy: {'epoch': 74, 'value': 0.4065175367891789} ({'split': 'test'})
Epoch 075
accuracy: {'epoch': 75, 'value': 0.9812000000190738} ({'split': 'train'})
cross_entropy: {'epoch': 75, 'value': 0.054423919197320945} ({'split': 'train'})
accuracy: {'epoch': 75, 'value': 0.8977999824285509} ({'split': 'test'})
cross_entropy: {'epoch': 75, 'value': 0.42866057924926276} ({'split': 'test'})
Epoch 076
accuracy: {'epoch': 76, 'value': 0.9798200000190733} ({'split': 'train'})
cross_entropy: {'epoch': 76, 'value': 0.06063487109184264} ({'split': 'train'})
accuracy: {'epoch': 76, 'value': 0.9092999804019926} ({'split': 'test'})
cross_entropy: {'epoch': 76, 'value': 0.3443320650607347} ({'split': 'test'})
Epoch 077
accuracy: {'epoch': 77, 'value': 0.9806599999999995} ({'split': 'train'})
cross_entropy: {'epoch': 77, 'value': 0.05878887915253638} ({'split': 'train'})
accuracy: {'epoch': 77, 'value': 0.911099979281425} ({'split': 'test'})
cross_entropy: {'epoch': 77, 'value': 0.35130117475986467} ({'split': 'test'})
Epoch 078
accuracy: {'epoch': 78, 'value': 0.9802400000381465} ({'split': 'train'})
cross_entropy: {'epoch': 78, 'value': 0.0581766934633255} ({'split': 'train'})
accuracy: {'epoch': 78, 'value': 0.905999980568886} ({'split': 'test'})
cross_entropy: {'epoch': 78, 'value': 0.37509629219770435} ({'split': 'test'})
Epoch 079
accuracy: {'epoch': 79, 'value': 0.9802000000190735} ({'split': 'train'})
cross_entropy: {'epoch': 79, 'value': 0.059176058876514455} ({'split': 'train'})
accuracy: {'epoch': 79, 'value': 0.9100999826192855} ({'split': 'test'})
cross_entropy: {'epoch': 79, 'value': 0.36491858273744604} ({'split': 'test'})
Epoch 080
accuracy: {'epoch': 80, 'value': 0.9797000000000001} ({'split': 'train'})
cross_entropy: {'epoch': 80, 'value': 0.058553699417710325} ({'split': 'train'})
accuracy: {'epoch': 80, 'value': 0.9050999790430069} ({'split': 'test'})
cross_entropy: {'epoch': 80, 'value': 0.34434473589062675} ({'split': 'test'})
Epoch 081
accuracy: {'epoch': 81, 'value': 0.9813800000572206} ({'split': 'train'})
cross_entropy: {'epoch': 81, 'value': 0.056228462390899625} ({'split': 'train'})
accuracy: {'epoch': 81, 'value': 0.9081999790668488} ({'split': 'test'})
cross_entropy: {'epoch': 81, 'value': 0.32328480616211897} ({'split': 'test'})
Epoch 082
accuracy: {'epoch': 82, 'value': 0.9808399999999998} ({'split': 'train'})
cross_entropy: {'epoch': 82, 'value': 0.05907974131643773} ({'split': 'train'})
accuracy: {'epoch': 82, 'value': 0.9123999828100202} ({'split': 'test'})
cross_entropy: {'epoch': 82, 'value': 0.3536893440037964} ({'split': 'test'})
Epoch 083
accuracy: {'epoch': 83, 'value': 0.9816600000381468} ({'split': 'train'})
cross_entropy: {'epoch': 83, 'value': 0.053198743674755064} ({'split': 'train'})
accuracy: {'epoch': 83, 'value': 0.907999985218048} ({'split': 'test'})
cross_entropy: {'epoch': 83, 'value': 0.39174512252211563} ({'split': 'test'})
Epoch 084
accuracy: {'epoch': 84, 'value': 0.9781200000381469} ({'split': 'train'})
cross_entropy: {'epoch': 84, 'value': 0.06432690650701524} ({'split': 'train'})
accuracy: {'epoch': 84, 'value': 0.9113999807834628} ({'split': 'test'})
cross_entropy: {'epoch': 84, 'value': 0.33869111873209473} ({'split': 'test'})
Epoch 085
accuracy: {'epoch': 85, 'value': 0.9803800000381471} ({'split': 'train'})
cross_entropy: {'epoch': 85, 'value': 0.058838846354484574} ({'split': 'train'})
accuracy: {'epoch': 85, 'value': 0.9058999812603} ({'split': 'test'})
cross_entropy: {'epoch': 85, 'value': 0.3798027759790421} ({'split': 'test'})
Epoch 086
accuracy: {'epoch': 86, 'value': 0.9794600000572203} ({'split': 'train'})
cross_entropy: {'epoch': 86, 'value': 0.059786079659461956} ({'split': 'train'})
accuracy: {'epoch': 86, 'value': 0.899199978709221} ({'split': 'test'})
cross_entropy: {'epoch': 86, 'value': 0.35881680369377117} ({'split': 'test'})
Epoch 087
accuracy: {'epoch': 87, 'value': 0.9813600000572202} ({'split': 'train'})
cross_entropy: {'epoch': 87, 'value': 0.05560400519371031} ({'split': 'train'})
accuracy: {'epoch': 87, 'value': 0.8941999793052672} ({'split': 'test'})
cross_entropy: {'epoch': 87, 'value': 0.4359872210025788} ({'split': 'test'})
Epoch 088
accuracy: {'epoch': 88, 'value': 0.981000000038147} ({'split': 'train'})
cross_entropy: {'epoch': 88, 'value': 0.057086508779525764} ({'split': 'train'})
accuracy: {'epoch': 88, 'value': 0.9102999836206439} ({'split': 'test'})
cross_entropy: {'epoch': 88, 'value': 0.3719303729385139} ({'split': 'test'})
Epoch 089
accuracy: {'epoch': 89, 'value': 0.9825599999999998} ({'split': 'train'})
cross_entropy: {'epoch': 89, 'value': 0.05378437925815583} ({'split': 'train'})
accuracy: {'epoch': 89, 'value': 0.9146999818086624} ({'split': 'test'})
cross_entropy: {'epoch': 89, 'value': 0.3214197482168674} ({'split': 'test'})
Epoch 090
accuracy: {'epoch': 90, 'value': 0.9828600000381471} ({'split': 'train'})
cross_entropy: {'epoch': 90, 'value': 0.051303375995159155} ({'split': 'train'})
accuracy: {'epoch': 90, 'value': 0.9132999837398528} ({'split': 'test'})
cross_entropy: {'epoch': 90, 'value': 0.351598697975278} ({'split': 'test'})
Epoch 091
accuracy: {'epoch': 91, 'value': 0.9818799999999998} ({'split': 'train'})
cross_entropy: {'epoch': 91, 'value': 0.05499807060733438} ({'split': 'train'})
accuracy: {'epoch': 91, 'value': 0.9006999784708025} ({'split': 'test'})
cross_entropy: {'epoch': 91, 'value': 0.3884430046379566} ({'split': 'test'})
Epoch 092
accuracy: {'epoch': 92, 'value': 0.9825599999999999} ({'split': 'train'})
cross_entropy: {'epoch': 92, 'value': 0.05136723371982574} ({'split': 'train'})
accuracy: {'epoch': 92, 'value': 0.8989999800920487} ({'split': 'test'})
cross_entropy: {'epoch': 92, 'value': 0.3912111291289332} ({'split': 'test'})
Epoch 093
accuracy: {'epoch': 93, 'value': 0.9820400000190731} ({'split': 'train'})
cross_entropy: {'epoch': 93, 'value': 0.054372302354574166} ({'split': 'train'})
accuracy: {'epoch': 93, 'value': 0.9053999805450441} ({'split': 'test'})
cross_entropy: {'epoch': 93, 'value': 0.3765304066240786} ({'split': 'test'})
Epoch 094
accuracy: {'epoch': 94, 'value': 0.9825200000190735} ({'split': 'train'})
cross_entropy: {'epoch': 94, 'value': 0.052933788289427776} ({'split': 'train'})
accuracy: {'epoch': 94, 'value': 0.9121999835968018} ({'split': 'test'})
cross_entropy: {'epoch': 94, 'value': 0.3530492815375328} ({'split': 'test'})
Epoch 095
accuracy: {'epoch': 95, 'value': 0.9809200000381465} ({'split': 'train'})
cross_entropy: {'epoch': 95, 'value': 0.05777490920782089} ({'split': 'train'})
accuracy: {'epoch': 95, 'value': 0.9082999789714814} ({'split': 'test'})
cross_entropy: {'epoch': 95, 'value': 0.3771401368826628} ({'split': 'test'})
Epoch 096
accuracy: {'epoch': 96, 'value': 0.9809600000190735} ({'split': 'train'})
cross_entropy: {'epoch': 96, 'value': 0.05747308527469636} ({'split': 'train'})
accuracy: {'epoch': 96, 'value': 0.9105999803543091} ({'split': 'test'})
cross_entropy: {'epoch': 96, 'value': 0.33010688126087195} ({'split': 'test'})
Epoch 097
accuracy: {'epoch': 97, 'value': 0.9811800000381465} ({'split': 'train'})
cross_entropy: {'epoch': 97, 'value': 0.0553789611029625} ({'split': 'train'})
accuracy: {'epoch': 97, 'value': 0.8968999791145322} ({'split': 'test'})
cross_entropy: {'epoch': 97, 'value': 0.47577592372894306} ({'split': 'test'})
Epoch 098
accuracy: {'epoch': 98, 'value': 0.9828000000572205} ({'split': 'train'})
cross_entropy: {'epoch': 98, 'value': 0.05244317309617996} ({'split': 'train'})
accuracy: {'epoch': 98, 'value': 0.9093999797105786} ({'split': 'test'})
cross_entropy: {'epoch': 98, 'value': 0.3542617389559746} ({'split': 'test'})
Epoch 099
accuracy: {'epoch': 99, 'value': 0.9818800000190737} ({'split': 'train'})
cross_entropy: {'epoch': 99, 'value': 0.05541953000783918} ({'split': 'train'})
accuracy: {'epoch': 99, 'value': 0.9057999789714812} ({'split': 'test'})
cross_entropy: {'epoch': 99, 'value': 0.3551146516203881} ({'split': 'test'})
Epoch 100
accuracy: {'epoch': 100, 'value': 0.98298} ({'split': 'train'})
cross_entropy: {'epoch': 100, 'value': 0.0503320942336321} ({'split': 'train'})
accuracy: {'epoch': 100, 'value': 0.8994999802112578} ({'split': 'test'})
cross_entropy: {'epoch': 100, 'value': 0.4237654297798871} ({'split': 'test'})
Epoch 101
accuracy: {'epoch': 101, 'value': 0.9827800000190737} ({'split': 'train'})
cross_entropy: {'epoch': 101, 'value': 0.052644637901782976} ({'split': 'train'})
accuracy: {'epoch': 101, 'value': 0.9083999794721603} ({'split': 'test'})
cross_entropy: {'epoch': 101, 'value': 0.35882469654083254} ({'split': 'test'})
Epoch 102
accuracy: {'epoch': 102, 'value': 0.9815199999809265} ({'split': 'train'})
cross_entropy: {'epoch': 102, 'value': 0.05504521724700926} ({'split': 'train'})
accuracy: {'epoch': 102, 'value': 0.9047999817132949} ({'split': 'test'})
cross_entropy: {'epoch': 102, 'value': 0.362644034102559} ({'split': 'test'})
Epoch 103
accuracy: {'epoch': 103, 'value': 0.9797599999809268} ({'split': 'train'})
cross_entropy: {'epoch': 103, 'value': 0.05906180579185487} ({'split': 'train'})
accuracy: {'epoch': 103, 'value': 0.9029999798536299} ({'split': 'test'})
cross_entropy: {'epoch': 103, 'value': 0.4093145968019961} ({'split': 'test'})
Epoch 104
accuracy: {'epoch': 104, 'value': 0.9817200000190737} ({'split': 'train'})
cross_entropy: {'epoch': 104, 'value': 0.05724124030828477} ({'split': 'train'})
accuracy: {'epoch': 104, 'value': 0.911799982190132} ({'split': 'test'})
cross_entropy: {'epoch': 104, 'value': 0.378461299315095} ({'split': 'test'})
Epoch 105
accuracy: {'epoch': 105, 'value': 0.979860000019074} ({'split': 'train'})
cross_entropy: {'epoch': 105, 'value': 0.05807581970214845} ({'split': 'train'})
accuracy: {'epoch': 105, 'value': 0.9123999810218815} ({'split': 'test'})
cross_entropy: {'epoch': 105, 'value': 0.3629362981021405} ({'split': 'test'})
Epoch 106
accuracy: {'epoch': 106, 'value': 0.9802000000381468} ({'split': 'train'})
cross_entropy: {'epoch': 106, 'value': 0.05852353949666024} ({'split': 'train'})
accuracy: {'epoch': 106, 'value': 0.9057999807596209} ({'split': 'test'})
cross_entropy: {'epoch': 106, 'value': 0.3708962699770929} ({'split': 'test'})
Epoch 107
accuracy: {'epoch': 107, 'value': 0.9823600000572206} ({'split': 'train'})
cross_entropy: {'epoch': 107, 'value': 0.05041046360969545} ({'split': 'train'})
accuracy: {'epoch': 107, 'value': 0.9155999779701233} ({'split': 'test'})
cross_entropy: {'epoch': 107, 'value': 0.33402297124266617} ({'split': 'test'})
We have a new best! with accuracy::0.9155999779701233 and at epoch::107, let's save it!
Epoch 108
accuracy: {'epoch': 108, 'value': 0.9801000000190735} ({'split': 'train'})
cross_entropy: {'epoch': 108, 'value': 0.05950845832109449} ({'split': 'train'})
accuracy: {'epoch': 108, 'value': 0.9106999802589415} ({'split': 'test'})
cross_entropy: {'epoch': 108, 'value': 0.3408987613022329} ({'split': 'test'})
Epoch 109
accuracy: {'epoch': 109, 'value': 0.9818999999999999} ({'split': 'train'})
cross_entropy: {'epoch': 109, 'value': 0.05337702553093433} ({'split': 'train'})
accuracy: {'epoch': 109, 'value': 0.9143999820947649} ({'split': 'test'})
cross_entropy: {'epoch': 109, 'value': 0.3659136739373207} ({'split': 'test'})
Epoch 110
accuracy: {'epoch': 110, 'value': 0.9839600000190735} ({'split': 'train'})
cross_entropy: {'epoch': 110, 'value': 0.04853265964031215} ({'split': 'train'})
accuracy: {'epoch': 110, 'value': 0.9100999820232393} ({'split': 'test'})
cross_entropy: {'epoch': 110, 'value': 0.3539209320396185} ({'split': 'test'})
Epoch 111
accuracy: {'epoch': 111, 'value': 0.97988} ({'split': 'train'})
cross_entropy: {'epoch': 111, 'value': 0.05975135563850402} ({'split': 'train'})
accuracy: {'epoch': 111, 'value': 0.904799980521202} ({'split': 'test'})
cross_entropy: {'epoch': 111, 'value': 0.37446167815476655} ({'split': 'test'})
Epoch 112
accuracy: {'epoch': 112, 'value': 0.9798600000572205} ({'split': 'train'})
cross_entropy: {'epoch': 112, 'value': 0.05873611567735671} ({'split': 'train'})
accuracy: {'epoch': 112, 'value': 0.9073999816179277} ({'split': 'test'})
cross_entropy: {'epoch': 112, 'value': 0.3611034063249826} ({'split': 'test'})
Epoch 113
accuracy: {'epoch': 113, 'value': 0.9836000000381468} ({'split': 'train'})
cross_entropy: {'epoch': 113, 'value': 0.05073722292542457} ({'split': 'train'})
accuracy: {'epoch': 113, 'value': 0.9112999814748762} ({'split': 'test'})
cross_entropy: {'epoch': 113, 'value': 0.3941077264398335} ({'split': 'test'})
Epoch 114
accuracy: {'epoch': 114, 'value': 0.9820000000381469} ({'split': 'train'})
cross_entropy: {'epoch': 114, 'value': 0.05257641681671144} ({'split': 'train'})
accuracy: {'epoch': 114, 'value': 0.9025999820232391} ({'split': 'test'})
cross_entropy: {'epoch': 114, 'value': 0.3918053613603115} ({'split': 'test'})
Epoch 115
accuracy: {'epoch': 115, 'value': 0.9791400000381475} ({'split': 'train'})
cross_entropy: {'epoch': 115, 'value': 0.06165697279691696} ({'split': 'train'})
accuracy: {'epoch': 115, 'value': 0.9070999813079835} ({'split': 'test'})
cross_entropy: {'epoch': 115, 'value': 0.4089348523318767} ({'split': 'test'})
Epoch 116
accuracy: {'epoch': 116, 'value': 0.9806400000572201} ({'split': 'train'})
cross_entropy: {'epoch': 116, 'value': 0.05717362716197968} ({'split': 'train'})
accuracy: {'epoch': 116, 'value': 0.9079999798536299} ({'split': 'test'})
cross_entropy: {'epoch': 116, 'value': 0.3551427905261517} ({'split': 'test'})
Epoch 117
accuracy: {'epoch': 117, 'value': 0.9814599999999997} ({'split': 'train'})
cross_entropy: {'epoch': 117, 'value': 0.05504039192378519} ({'split': 'train'})
accuracy: {'epoch': 117, 'value': 0.915099983811379} ({'split': 'test'})
cross_entropy: {'epoch': 117, 'value': 0.36558849096298207} ({'split': 'test'})
Epoch 118
accuracy: {'epoch': 118, 'value': 0.9838600000190739} ({'split': 'train'})
cross_entropy: {'epoch': 118, 'value': 0.04830413996160029} ({'split': 'train'})
accuracy: {'epoch': 118, 'value': 0.9059999835491181} ({'split': 'test'})
cross_entropy: {'epoch': 118, 'value': 0.40578370556235316} ({'split': 'test'})
Epoch 119
accuracy: {'epoch': 119, 'value': 0.9833200000572204} ({'split': 'train'})
cross_entropy: {'epoch': 119, 'value': 0.05005398724794387} ({'split': 'train'})
accuracy: {'epoch': 119, 'value': 0.9095999825000765} ({'split': 'test'})
cross_entropy: {'epoch': 119, 'value': 0.3582358081638814} ({'split': 'test'})
Epoch 120
accuracy: {'epoch': 120, 'value': 0.9812800000190733} ({'split': 'train'})
cross_entropy: {'epoch': 120, 'value': 0.05524380143404006} ({'split': 'train'})
accuracy: {'epoch': 120, 'value': 0.9071999853849413} ({'split': 'test'})
cross_entropy: {'epoch': 120, 'value': 0.38698100805282587} ({'split': 'test'})
Epoch 121
accuracy: {'epoch': 121, 'value': 0.9831200000190737} ({'split': 'train'})
cross_entropy: {'epoch': 121, 'value': 0.05077288326382635} ({'split': 'train'})
accuracy: {'epoch': 121, 'value': 0.906899978518486} ({'split': 'test'})
cross_entropy: {'epoch': 121, 'value': 0.37755092456936823} ({'split': 'test'})
Epoch 122
accuracy: {'epoch': 122, 'value': 0.9825200000190736} ({'split': 'train'})
cross_entropy: {'epoch': 122, 'value': 0.05308362368583678} ({'split': 'train'})
accuracy: {'epoch': 122, 'value': 0.9015999817848208} ({'split': 'test'})
cross_entropy: {'epoch': 122, 'value': 0.36417212024331086} ({'split': 'test'})
Epoch 123
accuracy: {'epoch': 123, 'value': 0.9824999999999996} ({'split': 'train'})
cross_entropy: {'epoch': 123, 'value': 0.050241153382062906} ({'split': 'train'})
accuracy: {'epoch': 123, 'value': 0.8985999810695647} ({'split': 'test'})
cross_entropy: {'epoch': 123, 'value': 0.4084547163546084} ({'split': 'test'})
Epoch 124
accuracy: {'epoch': 124, 'value': 0.9831000000381468} ({'split': 'train'})
cross_entropy: {'epoch': 124, 'value': 0.05010717650413514} ({'split': 'train'})
accuracy: {'epoch': 124, 'value': 0.908599982261658} ({'split': 'test'})
cross_entropy: {'epoch': 124, 'value': 0.360937587916851} ({'split': 'test'})
Epoch 125
accuracy: {'epoch': 125, 'value': 0.9813800000190739} ({'split': 'train'})
cross_entropy: {'epoch': 125, 'value': 0.05525383333086969} ({'split': 'train'})
accuracy: {'epoch': 125, 'value': 0.9100999784469602} ({'split': 'test'})
cross_entropy: {'epoch': 125, 'value': 0.35655701428651815} ({'split': 'test'})
Epoch 126
accuracy: {'epoch': 126, 'value': 0.9822200000381469} ({'split': 'train'})
cross_entropy: {'epoch': 126, 'value': 0.05113940586566923} ({'split': 'train'})
accuracy: {'epoch': 126, 'value': 0.9007999789714815} ({'split': 'test'})
cross_entropy: {'epoch': 126, 'value': 0.3852628436684609} ({'split': 'test'})
Epoch 127
accuracy: {'epoch': 127, 'value': 0.9835400000381473} ({'split': 'train'})
cross_entropy: {'epoch': 127, 'value': 0.049636762645244574} ({'split': 'train'})
accuracy: {'epoch': 127, 'value': 0.9035999816656116} ({'split': 'test'})
cross_entropy: {'epoch': 127, 'value': 0.36410128317773344} ({'split': 'test'})
Epoch 128
accuracy: {'epoch': 128, 'value': 0.982400000038147} ({'split': 'train'})
cross_entropy: {'epoch': 128, 'value': 0.05274355012655259} ({'split': 'train'})
accuracy: {'epoch': 128, 'value': 0.9104999792575835} ({'split': 'test'})
cross_entropy: {'epoch': 128, 'value': 0.34612593919038764} ({'split': 'test'})
Epoch 129
accuracy: {'epoch': 129, 'value': 0.9823000000381471} ({'split': 'train'})
cross_entropy: {'epoch': 129, 'value': 0.05316569803714751} ({'split': 'train'})
accuracy: {'epoch': 129, 'value': 0.9108999806642534} ({'split': 'test'})
cross_entropy: {'epoch': 129, 'value': 0.37039103671908374} ({'split': 'test'})
Epoch 130
accuracy: {'epoch': 130, 'value': 0.9804399999999998} ({'split': 'train'})
cross_entropy: {'epoch': 130, 'value': 0.05876344303488731} ({'split': 'train'})
accuracy: {'epoch': 130, 'value': 0.910599982738495} ({'split': 'test'})
cross_entropy: {'epoch': 130, 'value': 0.32121548034250735} ({'split': 'test'})
Epoch 131
accuracy: {'epoch': 131, 'value': 0.9834800000381472} ({'split': 'train'})
cross_entropy: {'epoch': 131, 'value': 0.05051992973566055} ({'split': 'train'})
accuracy: {'epoch': 131, 'value': 0.9118999820947647} ({'split': 'test'})
cross_entropy: {'epoch': 131, 'value': 0.35990004941821085} ({'split': 'test'})
Epoch 132
accuracy: {'epoch': 132, 'value': 0.9821800000572202} ({'split': 'train'})
cross_entropy: {'epoch': 132, 'value': 0.053078929865360266} ({'split': 'train'})
accuracy: {'epoch': 132, 'value': 0.9104999840259557} ({'split': 'test'})
cross_entropy: {'epoch': 132, 'value': 0.35504546493291855} ({'split': 'test'})
Epoch 133
accuracy: {'epoch': 133, 'value': 0.9812000000000003} ({'split': 'train'})
cross_entropy: {'epoch': 133, 'value': 0.05635653022706511} ({'split': 'train'})
accuracy: {'epoch': 133, 'value': 0.9092999804019928} ({'split': 'test'})
cross_entropy: {'epoch': 133, 'value': 0.3930545653402806} ({'split': 'test'})
Epoch 134
accuracy: {'epoch': 134, 'value': 0.9815800000381472} ({'split': 'train'})
cross_entropy: {'epoch': 134, 'value': 0.05507775826454161} ({'split': 'train'})
accuracy: {'epoch': 134, 'value': 0.9111999827623367} ({'split': 'test'})
cross_entropy: {'epoch': 134, 'value': 0.33983862712979296} ({'split': 'test'})
Epoch 135
accuracy: {'epoch': 135, 'value': 0.983800000038147} ({'split': 'train'})
cross_entropy: {'epoch': 135, 'value': 0.04822758435606959} ({'split': 'train'})
accuracy: {'epoch': 135, 'value': 0.904499979019165} ({'split': 'test'})
cross_entropy: {'epoch': 135, 'value': 0.40199795961379997} ({'split': 'test'})
Epoch 136
accuracy: {'epoch': 136, 'value': 0.9816000000190733} ({'split': 'train'})
cross_entropy: {'epoch': 136, 'value': 0.05587025316953658} ({'split': 'train'})
accuracy: {'epoch': 136, 'value': 0.9185999822616577} ({'split': 'test'})
cross_entropy: {'epoch': 136, 'value': 0.33208307847380647} ({'split': 'test'})
We have a new best! with accuracy::0.9185999822616577 and at epoch::136, let's save it!
Epoch 137
accuracy: {'epoch': 137, 'value': 0.9836000000572208} ({'split': 'train'})
cross_entropy: {'epoch': 137, 'value': 0.05044213044643402} ({'split': 'train'})
accuracy: {'epoch': 137, 'value': 0.9061999827623372} ({'split': 'test'})
cross_entropy: {'epoch': 137, 'value': 0.38665393307805046} ({'split': 'test'})
Epoch 138
accuracy: {'epoch': 138, 'value': 0.9827600000190737} ({'split': 'train'})
cross_entropy: {'epoch': 138, 'value': 0.0526927855014801} ({'split': 'train'})
accuracy: {'epoch': 138, 'value': 0.9070999795198442} ({'split': 'test'})
cross_entropy: {'epoch': 138, 'value': 0.3535136052966118} ({'split': 'test'})
Epoch 139
accuracy: {'epoch': 139, 'value': 0.9823199999999996} ({'split': 'train'})
cross_entropy: {'epoch': 139, 'value': 0.054265077438354486} ({'split': 'train'})
accuracy: {'epoch': 139, 'value': 0.9139999794960021} ({'split': 'test'})
cross_entropy: {'epoch': 139, 'value': 0.3296481801569461} ({'split': 'test'})
Epoch 140
accuracy: {'epoch': 140, 'value': 0.9814200000000001} ({'split': 'train'})
cross_entropy: {'epoch': 140, 'value': 0.055152089711427696} ({'split': 'train'})
accuracy: {'epoch': 140, 'value': 0.9025999796390533} ({'split': 'test'})
cross_entropy: {'epoch': 140, 'value': 0.4285359098017215} ({'split': 'test'})
Epoch 141
accuracy: {'epoch': 141, 'value': 0.9824999999809269} ({'split': 'train'})
cross_entropy: {'epoch': 141, 'value': 0.053233670499324794} ({'split': 'train'})
accuracy: {'epoch': 141, 'value': 0.9092999804019929} ({'split': 'test'})
cross_entropy: {'epoch': 141, 'value': 0.33075574807822705} ({'split': 'test'})
Epoch 142
accuracy: {'epoch': 142, 'value': 0.9832600000190737} ({'split': 'train'})
cross_entropy: {'epoch': 142, 'value': 0.05061095842599868} ({'split': 'train'})
accuracy: {'epoch': 142, 'value': 0.907799986004829} ({'split': 'test'})
cross_entropy: {'epoch': 142, 'value': 0.3545390000939369} ({'split': 'test'})
Epoch 143
accuracy: {'epoch': 143, 'value': 0.9825000000190738} ({'split': 'train'})
cross_entropy: {'epoch': 143, 'value': 0.05378069288194177} ({'split': 'train'})
accuracy: {'epoch': 143, 'value': 0.9073999804258349} ({'split': 'test'})
cross_entropy: {'epoch': 143, 'value': 0.36246816366910933} ({'split': 'test'})
Epoch 144
accuracy: {'epoch': 144, 'value': 0.9833800000190731} ({'split': 'train'})
cross_entropy: {'epoch': 144, 'value': 0.050131312884092345} ({'split': 'train'})
accuracy: {'epoch': 144, 'value': 0.9006999820470811} ({'split': 'test'})
cross_entropy: {'epoch': 144, 'value': 0.4413460379838943} ({'split': 'test'})
Epoch 145
accuracy: {'epoch': 145, 'value': 0.9816199999999999} ({'split': 'train'})
cross_entropy: {'epoch': 145, 'value': 0.05405945661157366} ({'split': 'train'})
accuracy: {'epoch': 145, 'value': 0.9139999818801883} ({'split': 'test'})
cross_entropy: {'epoch': 145, 'value': 0.3387187141925099} ({'split': 'test'})
Epoch 146
accuracy: {'epoch': 146, 'value': 0.98332} ({'split': 'train'})
cross_entropy: {'epoch': 146, 'value': 0.04864408292382956} ({'split': 'train'})
accuracy: {'epoch': 146, 'value': 0.9166999834775924} ({'split': 'test'})
cross_entropy: {'epoch': 146, 'value': 0.3080061916261909} ({'split': 'test'})
Epoch 147
accuracy: {'epoch': 147, 'value': 0.9825200000572204} ({'split': 'train'})
cross_entropy: {'epoch': 147, 'value': 0.05220822319507598} ({'split': 'train'})
accuracy: {'epoch': 147, 'value': 0.9156999790668485} ({'split': 'test'})
cross_entropy: {'epoch': 147, 'value': 0.351253307685256} ({'split': 'test'})
Epoch 148
accuracy: {'epoch': 148, 'value': 0.9797400000190734} ({'split': 'train'})
cross_entropy: {'epoch': 148, 'value': 0.05877239262580872} ({'split': 'train'})
accuracy: {'epoch': 148, 'value': 0.9123999804258345} ({'split': 'test'})
cross_entropy: {'epoch': 148, 'value': 0.3245502669364213} ({'split': 'test'})
Epoch 149
accuracy: {'epoch': 149, 'value': 0.9825200000190734} ({'split': 'train'})
cross_entropy: {'epoch': 149, 'value': 0.05405185319781305} ({'split': 'train'})
accuracy: {'epoch': 149, 'value': 0.9025999784469603} ({'split': 'test'})
cross_entropy: {'epoch': 149, 'value': 0.41782414555549624} ({'split': 'test'})
Epoch 150
accuracy: {'epoch': 150, 'value': 0.9938400000000001} ({'split': 'train'})
cross_entropy: {'epoch': 150, 'value': 0.019635816709622753} ({'split': 'train'})
accuracy: {'epoch': 150, 'value': 0.9282999843358992} ({'split': 'test'})
cross_entropy: {'epoch': 150, 'value': 0.3073082525283097} ({'split': 'test'})
We have a new best! with accuracy::0.9282999843358992 and at epoch::150, let's save it!
Epoch 151
accuracy: {'epoch': 151, 'value': 0.9974200000190739} ({'split': 'train'})
cross_entropy: {'epoch': 151, 'value': 0.008064808185994626} ({'split': 'train'})
accuracy: {'epoch': 151, 'value': 0.928899982571602} ({'split': 'test'})
cross_entropy: {'epoch': 151, 'value': 0.3187837271392345} ({'split': 'test'})
We have a new best! with accuracy::0.928899982571602 and at epoch::151, let's save it!
Epoch 152
accuracy: {'epoch': 152, 'value': 0.99824} ({'split': 'train'})
cross_entropy: {'epoch': 152, 'value': 0.0059635846012830755} ({'split': 'train'})
accuracy: {'epoch': 152, 'value': 0.9312999832630156} ({'split': 'test'})
cross_entropy: {'epoch': 152, 'value': 0.32584290195256477} ({'split': 'test'})
We have a new best! with accuracy::0.9312999832630156 and at epoch::152, let's save it!
Epoch 153
accuracy: {'epoch': 153, 'value': 0.9983799999999999} ({'split': 'train'})
cross_entropy: {'epoch': 153, 'value': 0.005031598853319882} ({'split': 'train'})
accuracy: {'epoch': 153, 'value': 0.9305999863147738} ({'split': 'test'})
cross_entropy: {'epoch': 153, 'value': 0.33183681979775437} ({'split': 'test'})
Epoch 154
accuracy: {'epoch': 154, 'value': 0.9986200000000001} ({'split': 'train'})
cross_entropy: {'epoch': 154, 'value': 0.0048169246403500406} ({'split': 'train'})
accuracy: {'epoch': 154, 'value': 0.9308999836444855} ({'split': 'test'})
cross_entropy: {'epoch': 154, 'value': 0.3345951377600432} ({'split': 'test'})
Epoch 155
accuracy: {'epoch': 155, 'value': 0.9991000000000001} ({'split': 'train'})
cross_entropy: {'epoch': 155, 'value': 0.003213714367635548} ({'split': 'train'})
accuracy: {'epoch': 155, 'value': 0.9312999844551085} ({'split': 'test'})
cross_entropy: {'epoch': 155, 'value': 0.3446076662093401} ({'split': 'test'})
We have a new best! with accuracy::0.9312999844551085 and at epoch::155, let's save it!
Epoch 156
accuracy: {'epoch': 156, 'value': 0.9992} ({'split': 'train'})
cross_entropy: {'epoch': 156, 'value': 0.002809634041590616} ({'split': 'train'})
accuracy: {'epoch': 156, 'value': 0.9317999857664105} ({'split': 'test'})
cross_entropy: {'epoch': 156, 'value': 0.3468861068040134} ({'split': 'test'})
We have a new best! with accuracy::0.9317999857664105 and at epoch::156, let's save it!
Epoch 157
accuracy: {'epoch': 157, 'value': 0.9991200000000002} ({'split': 'train'})
cross_entropy: {'epoch': 157, 'value': 0.002791615261174739} ({'split': 'train'})
accuracy: {'epoch': 157, 'value': 0.9315999871492386} ({'split': 'test'})
cross_entropy: {'epoch': 157, 'value': 0.3466183024644853} ({'split': 'test'})
Epoch 158
accuracy: {'epoch': 158, 'value': 0.99894} ({'split': 'train'})
cross_entropy: {'epoch': 158, 'value': 0.003112603755444289} ({'split': 'train'})
accuracy: {'epoch': 158, 'value': 0.9311999827623366} ({'split': 'test'})
cross_entropy: {'epoch': 158, 'value': 0.3501978881284595} ({'split': 'test'})
Epoch 159
accuracy: {'epoch': 159, 'value': 0.9992999999999997} ({'split': 'train'})
cross_entropy: {'epoch': 159, 'value': 0.0022413355372846145} ({'split': 'train'})
accuracy: {'epoch': 159, 'value': 0.9326999837160108} ({'split': 'test'})
cross_entropy: {'epoch': 159, 'value': 0.35023448921740064} ({'split': 'test'})
We have a new best! with accuracy::0.9326999837160108 and at epoch::159, let's save it!
Epoch 160
accuracy: {'epoch': 160, 'value': 0.9994799999999999} ({'split': 'train'})
cross_entropy: {'epoch': 160, 'value': 0.002075114857795999} ({'split': 'train'})
accuracy: {'epoch': 160, 'value': 0.9339999836683274} ({'split': 'test'})
cross_entropy: {'epoch': 160, 'value': 0.3532866001129149} ({'split': 'test'})
We have a new best! with accuracy::0.9339999836683274 and at epoch::160, let's save it!
Epoch 161
accuracy: {'epoch': 161, 'value': 0.9993799999999997} ({'split': 'train'})
cross_entropy: {'epoch': 161, 'value': 0.0019841135792247958} ({'split': 'train'})
accuracy: {'epoch': 161, 'value': 0.9335999834537506} ({'split': 'test'})
cross_entropy: {'epoch': 161, 'value': 0.3614037252962589} ({'split': 'test'})
Epoch 162
accuracy: {'epoch': 162, 'value': 0.9993600000000002} ({'split': 'train'})
cross_entropy: {'epoch': 162, 'value': 0.0021347297598794117} ({'split': 'train'})
accuracy: {'epoch': 162, 'value': 0.9334999841451644} ({'split': 'test'})
cross_entropy: {'epoch': 162, 'value': 0.35752787642180917} ({'split': 'test'})
Epoch 163
accuracy: {'epoch': 163, 'value': 0.9995600000000002} ({'split': 'train'})
cross_entropy: {'epoch': 163, 'value': 0.0018219181151688094} ({'split': 'train'})
accuracy: {'epoch': 163, 'value': 0.9350999844074248} ({'split': 'test'})
cross_entropy: {'epoch': 163, 'value': 0.36002361938357347} ({'split': 'test'})
We have a new best! with accuracy::0.9350999844074248 and at epoch::163, let's save it!
Epoch 164
accuracy: {'epoch': 164, 'value': 0.9995600000000002} ({'split': 'train'})
cross_entropy: {'epoch': 164, 'value': 0.0014117709200084207} ({'split': 'train'})
accuracy: {'epoch': 164, 'value': 0.9340999859571457} ({'split': 'test'})
cross_entropy: {'epoch': 164, 'value': 0.3660535722225906} ({'split': 'test'})
Epoch 165
accuracy: {'epoch': 165, 'value': 0.99952} ({'split': 'train'})
cross_entropy: {'epoch': 165, 'value': 0.0014720976410736335} ({'split': 'train'})
accuracy: {'epoch': 165, 'value': 0.9348999851942064} ({'split': 'test'})
cross_entropy: {'epoch': 165, 'value': 0.3634839848428964} ({'split': 'test'})
Epoch 166
accuracy: {'epoch': 166, 'value': 0.99964} ({'split': 'train'})
cross_entropy: {'epoch': 166, 'value': 0.0018062481288798156} ({'split': 'train'})
accuracy: {'epoch': 166, 'value': 0.9346999847888946} ({'split': 'test'})
cross_entropy: {'epoch': 166, 'value': 0.35668244473636146} ({'split': 'test'})
Epoch 167
accuracy: {'epoch': 167, 'value': 0.9994999999999998} ({'split': 'train'})
cross_entropy: {'epoch': 167, 'value': 0.0014694122838228945} ({'split': 'train'})
accuracy: {'epoch': 167, 'value': 0.9347999846935271} ({'split': 'test'})
cross_entropy: {'epoch': 167, 'value': 0.36533625453710555} ({'split': 'test'})
Epoch 168
accuracy: {'epoch': 168, 'value': 0.9994999999999998} ({'split': 'train'})
cross_entropy: {'epoch': 168, 'value': 0.0016996744370274238} ({'split': 'train'})
accuracy: {'epoch': 168, 'value': 0.9345999854803085} ({'split': 'test'})
cross_entropy: {'epoch': 168, 'value': 0.36751713443547485} ({'split': 'test'})
Epoch 169
accuracy: {'epoch': 169, 'value': 0.9997199999999995} ({'split': 'train'})
cross_entropy: {'epoch': 169, 'value': 0.0011831403252854946} ({'split': 'train'})
accuracy: {'epoch': 169, 'value': 0.9334999847412113} ({'split': 'test'})
cross_entropy: {'epoch': 169, 'value': 0.3755018382519484} ({'split': 'test'})
Epoch 170
accuracy: {'epoch': 170, 'value': 0.9996999999999995} ({'split': 'train'})
cross_entropy: {'epoch': 170, 'value': 0.001238073909580707} ({'split': 'train'})
accuracy: {'epoch': 170, 'value': 0.9352999866008762} ({'split': 'test'})
cross_entropy: {'epoch': 170, 'value': 0.3743971756845714} ({'split': 'test'})
We have a new best! with accuracy::0.9352999866008762 and at epoch::170, let's save it!
Epoch 171
accuracy: {'epoch': 171, 'value': 0.9998999999999998} ({'split': 'train'})
cross_entropy: {'epoch': 171, 'value': 0.0008092521637864412} ({'split': 'train'})
accuracy: {'epoch': 171, 'value': 0.9351999849081042} ({'split': 'test'})
cross_entropy: {'epoch': 171, 'value': 0.3745217624306679} ({'split': 'test'})
Epoch 172
accuracy: {'epoch': 172, 'value': 0.9996600000000001} ({'split': 'train'})
cross_entropy: {'epoch': 172, 'value': 0.001273846804527566} ({'split': 'train'})
accuracy: {'epoch': 172, 'value': 0.9359999865293505} ({'split': 'test'})
cross_entropy: {'epoch': 172, 'value': 0.37257238104939455} ({'split': 'test'})
We have a new best! with accuracy::0.9359999865293505 and at epoch::172, let's save it!
Epoch 173
accuracy: {'epoch': 173, 'value': 0.9997399999999999} ({'split': 'train'})
cross_entropy: {'epoch': 173, 'value': 0.0009955074545135716} ({'split': 'train'})
accuracy: {'epoch': 173, 'value': 0.9355999863147735} ({'split': 'test'})
cross_entropy: {'epoch': 173, 'value': 0.3756409596651792} ({'split': 'test'})
Epoch 174
accuracy: {'epoch': 174, 'value': 0.9997199999999997} ({'split': 'train'})
cross_entropy: {'epoch': 174, 'value': 0.001023569680753863} ({'split': 'train'})
accuracy: {'epoch': 174, 'value': 0.9358999878168105} ({'split': 'test'})
cross_entropy: {'epoch': 174, 'value': 0.37818785801529897} ({'split': 'test'})
Epoch 175
accuracy: {'epoch': 175, 'value': 0.9995999999999997} ({'split': 'train'})
cross_entropy: {'epoch': 175, 'value': 0.0012017155633948277} ({'split': 'train'})
accuracy: {'epoch': 175, 'value': 0.935299989581108} ({'split': 'test'})
cross_entropy: {'epoch': 175, 'value': 0.37933219626545905} ({'split': 'test'})
Epoch 176
accuracy: {'epoch': 176, 'value': 0.9996200000000002} ({'split': 'train'})
cross_entropy: {'epoch': 176, 'value': 0.0012251095756422733} ({'split': 'train'})
accuracy: {'epoch': 176, 'value': 0.934599984884262} ({'split': 'test'})
cross_entropy: {'epoch': 176, 'value': 0.3761162910610438} ({'split': 'test'})
Epoch 177
accuracy: {'epoch': 177, 'value': 0.9997199999999998} ({'split': 'train'})
cross_entropy: {'epoch': 177, 'value': 0.0011011544111615514} ({'split': 'train'})
accuracy: {'epoch': 177, 'value': 0.934299984574318} ({'split': 'test'})
cross_entropy: {'epoch': 177, 'value': 0.3804110591113569} ({'split': 'test'})
Epoch 178
accuracy: {'epoch': 178, 'value': 0.9998199999999999} ({'split': 'train'})
cross_entropy: {'epoch': 178, 'value': 0.0008488543012738226} ({'split': 'train'})
accuracy: {'epoch': 178, 'value': 0.9351999855041504} ({'split': 'test'})
cross_entropy: {'epoch': 178, 'value': 0.37892989180982123} ({'split': 'test'})
Epoch 179
accuracy: {'epoch': 179, 'value': 0.9997799999999999} ({'split': 'train'})
cross_entropy: {'epoch': 179, 'value': 0.0009555119518016005} ({'split': 'train'})
accuracy: {'epoch': 179, 'value': 0.9341999876499177} ({'split': 'test'})
cross_entropy: {'epoch': 179, 'value': 0.3812693788856267} ({'split': 'test'})
Epoch 180
accuracy: {'epoch': 180, 'value': 0.9997199999999998} ({'split': 'train'})
cross_entropy: {'epoch': 180, 'value': 0.0010461303296498965} ({'split': 'train'})
accuracy: {'epoch': 180, 'value': 0.9355999851226808} ({'split': 'test'})
cross_entropy: {'epoch': 180, 'value': 0.3785667796432972} ({'split': 'test'})
Epoch 181
accuracy: {'epoch': 181, 'value': 0.9998799999999999} ({'split': 'train'})
cross_entropy: {'epoch': 181, 'value': 0.0007614782020868731} ({'split': 'train'})
accuracy: {'epoch': 181, 'value': 0.9354999864101409} ({'split': 'test'})
cross_entropy: {'epoch': 181, 'value': 0.3820545297861098} ({'split': 'test'})
Epoch 182
accuracy: {'epoch': 182, 'value': 0.9997800000000002} ({'split': 'train'})
cross_entropy: {'epoch': 182, 'value': 0.0009248207554221148} ({'split': 'train'})
accuracy: {'epoch': 182, 'value': 0.9360999846458437} ({'split': 'test'})
cross_entropy: {'epoch': 182, 'value': 0.3788509095832704} ({'split': 'test'})
We have a new best! with accuracy::0.9360999846458437 and at epoch::182, let's save it!
Epoch 183
accuracy: {'epoch': 183, 'value': 0.9997999999999998} ({'split': 'train'})
cross_entropy: {'epoch': 183, 'value': 0.000964562606923282} ({'split': 'train'})
accuracy: {'epoch': 183, 'value': 0.9338999831676481} ({'split': 'test'})
cross_entropy: {'epoch': 183, 'value': 0.37696095153689385} ({'split': 'test'})
Epoch 184
accuracy: {'epoch': 184, 'value': 0.9998599999999996} ({'split': 'train'})
cross_entropy: {'epoch': 184, 'value': 0.0007565281905978919} ({'split': 'train'})
accuracy: {'epoch': 184, 'value': 0.9342999827861787} ({'split': 'test'})
cross_entropy: {'epoch': 184, 'value': 0.3796029993146658} ({'split': 'test'})
Epoch 185
accuracy: {'epoch': 185, 'value': 0.9998} ({'split': 'train'})
cross_entropy: {'epoch': 185, 'value': 0.0009214014344988391} ({'split': 'train'})
accuracy: {'epoch': 185, 'value': 0.932699983716011} ({'split': 'test'})
cross_entropy: {'epoch': 185, 'value': 0.3904267806559801} ({'split': 'test'})
Epoch 186
accuracy: {'epoch': 186, 'value': 0.9999399999999998} ({'split': 'train'})
cross_entropy: {'epoch': 186, 'value': 0.0006630019990191797} ({'split': 'train'})
accuracy: {'epoch': 186, 'value': 0.9349999839067458} ({'split': 'test'})
cross_entropy: {'epoch': 186, 'value': 0.38322922170162194} ({'split': 'test'})
Epoch 187
accuracy: {'epoch': 187, 'value': 0.9999000000000001} ({'split': 'train'})
cross_entropy: {'epoch': 187, 'value': 0.0007911548269842751} ({'split': 'train'})
accuracy: {'epoch': 187, 'value': 0.9348999840021132} ({'split': 'test'})
cross_entropy: {'epoch': 187, 'value': 0.3853109809011222} ({'split': 'test'})
Epoch 188
accuracy: {'epoch': 188, 'value': 0.9998799999999995} ({'split': 'train'})
cross_entropy: {'epoch': 188, 'value': 0.0006440400391351432} ({'split': 'train'})
accuracy: {'epoch': 188, 'value': 0.9351999861001972} ({'split': 'test'})
cross_entropy: {'epoch': 188, 'value': 0.3823896147310734} ({'split': 'test'})
Epoch 189
accuracy: {'epoch': 189, 'value': 0.9998000000000002} ({'split': 'train'})
cross_entropy: {'epoch': 189, 'value': 0.0008533942263573414} ({'split': 'train'})
accuracy: {'epoch': 189, 'value': 0.9348999828100205} ({'split': 'test'})
cross_entropy: {'epoch': 189, 'value': 0.3835359010100365} ({'split': 'test'})
Epoch 190
accuracy: {'epoch': 190, 'value': 0.9998800000000002} ({'split': 'train'})
cross_entropy: {'epoch': 190, 'value': 0.000760254261554219} ({'split': 'train'})
accuracy: {'epoch': 190, 'value': 0.9347999829053879} ({'split': 'test'})
cross_entropy: {'epoch': 190, 'value': 0.385958041921258} ({'split': 'test'})
Epoch 191
accuracy: {'epoch': 191, 'value': 0.9998599999999995} ({'split': 'train'})
cross_entropy: {'epoch': 191, 'value': 0.0007950560664013028} ({'split': 'train'})
accuracy: {'epoch': 191, 'value': 0.9342999833822251} ({'split': 'test'})
cross_entropy: {'epoch': 191, 'value': 0.3845677018165589} ({'split': 'test'})
Epoch 192
accuracy: {'epoch': 192, 'value': 0.99984} ({'split': 'train'})
cross_entropy: {'epoch': 192, 'value': 0.000760976661385503} ({'split': 'train'})
accuracy: {'epoch': 192, 'value': 0.9351999855041504} ({'split': 'test'})
cross_entropy: {'epoch': 192, 'value': 0.38545693077147025} ({'split': 'test'})
Epoch 193
accuracy: {'epoch': 193, 'value': 0.9999399999999999} ({'split': 'train'})
cross_entropy: {'epoch': 193, 'value': 0.0004931745520839469} ({'split': 'train'})
accuracy: {'epoch': 193, 'value': 0.9351999825239182} ({'split': 'test'})
cross_entropy: {'epoch': 193, 'value': 0.38777376450598233} ({'split': 'test'})
Epoch 194
accuracy: {'epoch': 194, 'value': 0.99984} ({'split': 'train'})
cross_entropy: {'epoch': 194, 'value': 0.0007925825250148773} ({'split': 'train'})
accuracy: {'epoch': 194, 'value': 0.9345999860763547} ({'split': 'test'})
cross_entropy: {'epoch': 194, 'value': 0.39133529454469695} ({'split': 'test'})
Epoch 195
accuracy: {'epoch': 195, 'value': 0.99988} ({'split': 'train'})
cross_entropy: {'epoch': 195, 'value': 0.0005945654632430527} ({'split': 'train'})
accuracy: {'epoch': 195, 'value': 0.9332999843358993} ({'split': 'test'})
cross_entropy: {'epoch': 195, 'value': 0.38889197904616596} ({'split': 'test'})
Epoch 196
accuracy: {'epoch': 196, 'value': 0.9998599999999996} ({'split': 'train'})
cross_entropy: {'epoch': 196, 'value': 0.0007419069592468438} ({'split': 'train'})
accuracy: {'epoch': 196, 'value': 0.934099985361099} ({'split': 'test'})
cross_entropy: {'epoch': 196, 'value': 0.3933401756733655} ({'split': 'test'})
Epoch 197
accuracy: {'epoch': 197, 'value': 0.9998200000000002} ({'split': 'train'})
cross_entropy: {'epoch': 197, 'value': 0.0006849130616616458} ({'split': 'train'})
accuracy: {'epoch': 197, 'value': 0.9341999858617783} ({'split': 'test'})
cross_entropy: {'epoch': 197, 'value': 0.3884801276028156} ({'split': 'test'})
Epoch 198
accuracy: {'epoch': 198, 'value': 0.9998399999999997} ({'split': 'train'})
cross_entropy: {'epoch': 198, 'value': 0.000643225106447935} ({'split': 'train'})
accuracy: {'epoch': 198, 'value': 0.9346999841928485} ({'split': 'test'})
cross_entropy: {'epoch': 198, 'value': 0.39253018729388706} ({'split': 'test'})
Epoch 199
accuracy: {'epoch': 199, 'value': 0.9999600000000002} ({'split': 'train'})
cross_entropy: {'epoch': 199, 'value': 0.00046400657707825296} ({'split': 'train'})
accuracy: {'epoch': 199, 'value': 0.935499985218048} ({'split': 'test'})
cross_entropy: {'epoch': 199, 'value': 0.39518663085997097} ({'split': 'test'})
Epoch 200
accuracy: {'epoch': 200, 'value': 0.99988} ({'split': 'train'})
cross_entropy: {'epoch': 200, 'value': 0.000602431571194902} ({'split': 'train'})
accuracy: {'epoch': 200, 'value': 0.936199984550476} ({'split': 'test'})
cross_entropy: {'epoch': 200, 'value': 0.3923693835735321} ({'split': 'test'})
We have a new best! with accuracy::0.936199984550476 and at epoch::200, let's save it!
Epoch 201
accuracy: {'epoch': 201, 'value': 0.9998999999999999} ({'split': 'train'})
cross_entropy: {'epoch': 201, 'value': 0.0005914384687924759} ({'split': 'train'})
accuracy: {'epoch': 201, 'value': 0.9350999850034714} ({'split': 'test'})
cross_entropy: {'epoch': 201, 'value': 0.3979139977693559} ({'split': 'test'})
Epoch 202
accuracy: {'epoch': 202, 'value': 0.9999400000000003} ({'split': 'train'})
cross_entropy: {'epoch': 202, 'value': 0.0006698594998987391} ({'split': 'train'})
accuracy: {'epoch': 202, 'value': 0.9357999855279924} ({'split': 'test'})
cross_entropy: {'epoch': 202, 'value': 0.39330203361809246} ({'split': 'test'})
Epoch 203
accuracy: {'epoch': 203, 'value': 0.9999599999999998} ({'split': 'train'})
cross_entropy: {'epoch': 203, 'value': 0.0005582886150572448} ({'split': 'train'})
accuracy: {'epoch': 203, 'value': 0.9355999821424483} ({'split': 'test'})
cross_entropy: {'epoch': 203, 'value': 0.39374819107353687} ({'split': 'test'})
Epoch 204
accuracy: {'epoch': 204, 'value': 0.9998599999999995} ({'split': 'train'})
cross_entropy: {'epoch': 204, 'value': 0.0006171373195981142} ({'split': 'train'})
accuracy: {'epoch': 204, 'value': 0.9353999841213224} ({'split': 'test'})
cross_entropy: {'epoch': 204, 'value': 0.3894240143895149} ({'split': 'test'})
Epoch 205
accuracy: {'epoch': 205, 'value': 0.9998599999999996} ({'split': 'train'})
cross_entropy: {'epoch': 205, 'value': 0.0005796564394421879} ({'split': 'train'})
accuracy: {'epoch': 205, 'value': 0.9359999841451643} ({'split': 'test'})
cross_entropy: {'epoch': 205, 'value': 0.3854161939769985} ({'split': 'test'})
Epoch 206
accuracy: {'epoch': 206, 'value': 0.9999400000000002} ({'split': 'train'})
cross_entropy: {'epoch': 206, 'value': 0.00047056258453056197} ({'split': 'train'})
accuracy: {'epoch': 206, 'value': 0.9356999844312669} ({'split': 'test'})
cross_entropy: {'epoch': 206, 'value': 0.39522998511791224} ({'split': 'test'})
Epoch 207
accuracy: {'epoch': 207, 'value': 0.9998799999999999} ({'split': 'train'})
cross_entropy: {'epoch': 207, 'value': 0.0006932224278617649} ({'split': 'train'})
accuracy: {'epoch': 207, 'value': 0.934599983692169} ({'split': 'test'})
cross_entropy: {'epoch': 207, 'value': 0.39313868194818496} ({'split': 'test'})
Epoch 208
accuracy: {'epoch': 208, 'value': 0.9998800000000002} ({'split': 'train'})
cross_entropy: {'epoch': 208, 'value': 0.0007071223160950468} ({'split': 'train'})
accuracy: {'epoch': 208, 'value': 0.9359999835491178} ({'split': 'test'})
cross_entropy: {'epoch': 208, 'value': 0.39241747308522473} ({'split': 'test'})
Epoch 209
accuracy: {'epoch': 209, 'value': 0.9999199999999997} ({'split': 'train'})
cross_entropy: {'epoch': 209, 'value': 0.00054099733909592} ({'split': 'train'})
accuracy: {'epoch': 209, 'value': 0.9351999849081035} ({'split': 'test'})
cross_entropy: {'epoch': 209, 'value': 0.38869332939386364} ({'split': 'test'})
Epoch 210
accuracy: {'epoch': 210, 'value': 0.9998799999999997} ({'split': 'train'})
cross_entropy: {'epoch': 210, 'value': 0.000551914811197203} ({'split': 'train'})
accuracy: {'epoch': 210, 'value': 0.9345999848842622} ({'split': 'test'})
cross_entropy: {'epoch': 210, 'value': 0.39614770084619516} ({'split': 'test'})
Epoch 211
accuracy: {'epoch': 211, 'value': 0.9999000000000001} ({'split': 'train'})
cross_entropy: {'epoch': 211, 'value': 0.0005162116142874583} ({'split': 'train'})
accuracy: {'epoch': 211, 'value': 0.9350999850034712} ({'split': 'test'})
cross_entropy: {'epoch': 211, 'value': 0.39565281845629213} ({'split': 'test'})
Epoch 212
accuracy: {'epoch': 212, 'value': 0.9999800000000001} ({'split': 'train'})
cross_entropy: {'epoch': 212, 'value': 0.0004991232942231002} ({'split': 'train'})
accuracy: {'epoch': 212, 'value': 0.9350999832153322} ({'split': 'test'})
cross_entropy: {'epoch': 212, 'value': 0.3981058881431819} ({'split': 'test'})
Epoch 213
accuracy: {'epoch': 213, 'value': 0.9999800000000001} ({'split': 'train'})
cross_entropy: {'epoch': 213, 'value': 0.0003985349396336822} ({'split': 'train'})
accuracy: {'epoch': 213, 'value': 0.9356999856233599} ({'split': 'test'})
cross_entropy: {'epoch': 213, 'value': 0.40274294540286043} ({'split': 'test'})
Epoch 214
accuracy: {'epoch': 214, 'value': 0.9999800000000001} ({'split': 'train'})
cross_entropy: {'epoch': 214, 'value': 0.0005167815268831324} ({'split': 'train'})
accuracy: {'epoch': 214, 'value': 0.9367999857664109} ({'split': 'test'})
cross_entropy: {'epoch': 214, 'value': 0.3963034528493881} ({'split': 'test'})
We have a new best! with accuracy::0.9367999857664109 and at epoch::214, let's save it!
Epoch 215
accuracy: {'epoch': 215, 'value': 0.9998600000000001} ({'split': 'train'})
cross_entropy: {'epoch': 215, 'value': 0.0006318802028193024} ({'split': 'train'})
accuracy: {'epoch': 215, 'value': 0.9369999867677686} ({'split': 'test'})
cross_entropy: {'epoch': 215, 'value': 0.3966318488866091} ({'split': 'test'})
We have a new best! with accuracy::0.9369999867677686 and at epoch::215, let's save it!
Epoch 216
accuracy: {'epoch': 216, 'value': 0.9998199999999997} ({'split': 'train'})
cross_entropy: {'epoch': 216, 'value': 0.0008157548220292665} ({'split': 'train'})
accuracy: {'epoch': 216, 'value': 0.9365999847650528} ({'split': 'test'})
cross_entropy: {'epoch': 216, 'value': 0.3948969782143831} ({'split': 'test'})
Epoch 217
accuracy: {'epoch': 217, 'value': 0.9998799999999992} ({'split': 'train'})
cross_entropy: {'epoch': 217, 'value': 0.0006296555496007206} ({'split': 'train'})
accuracy: {'epoch': 217, 'value': 0.934999985098839} ({'split': 'test'})
cross_entropy: {'epoch': 217, 'value': 0.39067146450281126} ({'split': 'test'})
Epoch 218
accuracy: {'epoch': 218, 'value': 0.9998599999999993} ({'split': 'train'})
cross_entropy: {'epoch': 218, 'value': 0.0005541799949109556} ({'split': 'train'})
accuracy: {'epoch': 218, 'value': 0.935999984741211} ({'split': 'test'})
cross_entropy: {'epoch': 218, 'value': 0.3892959736660124} ({'split': 'test'})
Epoch 219
accuracy: {'epoch': 219, 'value': 0.9999800000000001} ({'split': 'train'})
cross_entropy: {'epoch': 219, 'value': 0.00047899259484373023} ({'split': 'train'})
accuracy: {'epoch': 219, 'value': 0.9356999856233598} ({'split': 'test'})
cross_entropy: {'epoch': 219, 'value': 0.39480039540678263} ({'split': 'test'})
Epoch 220
accuracy: {'epoch': 220, 'value': 0.9999600000000001} ({'split': 'train'})
cross_entropy: {'epoch': 220, 'value': 0.00042353681605367463} ({'split': 'train'})
accuracy: {'epoch': 220, 'value': 0.9363999861478807} ({'split': 'test'})
cross_entropy: {'epoch': 220, 'value': 0.39675890184938906} ({'split': 'test'})
Epoch 221
accuracy: {'epoch': 221, 'value': 0.9998799999999997} ({'split': 'train'})
cross_entropy: {'epoch': 221, 'value': 0.0006441165936889591} ({'split': 'train'})
accuracy: {'epoch': 221, 'value': 0.9369999843835831} ({'split': 'test'})
cross_entropy: {'epoch': 221, 'value': 0.3928749707713724} ({'split': 'test'})
Epoch 222
accuracy: {'epoch': 222, 'value': 0.9999} ({'split': 'train'})
cross_entropy: {'epoch': 222, 'value': 0.0005799017932545395} ({'split': 'train'})
accuracy: {'epoch': 222, 'value': 0.9359999841451644} ({'split': 'test'})
cross_entropy: {'epoch': 222, 'value': 0.39632854342460627} ({'split': 'test'})
Epoch 223
accuracy: {'epoch': 223, 'value': 0.9998999999999997} ({'split': 'train'})
cross_entropy: {'epoch': 223, 'value': 0.0005224295117240405} ({'split': 'train'})
accuracy: {'epoch': 223, 'value': 0.9355999827384949} ({'split': 'test'})
cross_entropy: {'epoch': 223, 'value': 0.3961947379261254} ({'split': 'test'})
Epoch 224
accuracy: {'epoch': 224, 'value': 0.9999399999999995} ({'split': 'train'})
cross_entropy: {'epoch': 224, 'value': 0.000570651497577783} ({'split': 'train'})
accuracy: {'epoch': 224, 'value': 0.9346999853849407} ({'split': 'test'})
cross_entropy: {'epoch': 224, 'value': 0.40406199485063565} ({'split': 'test'})
Epoch 225
accuracy: {'epoch': 225, 'value': 0.9998599999999995} ({'split': 'train'})
cross_entropy: {'epoch': 225, 'value': 0.0005840321287512779} ({'split': 'train'})
accuracy: {'epoch': 225, 'value': 0.9353999853134154} ({'split': 'test'})
cross_entropy: {'epoch': 225, 'value': 0.4011570688337087} ({'split': 'test'})
Epoch 226
accuracy: {'epoch': 226, 'value': 0.9999599999999997} ({'split': 'train'})
cross_entropy: {'epoch': 226, 'value': 0.0005788170975632967} ({'split': 'train'})
accuracy: {'epoch': 226, 'value': 0.9356999856233598} ({'split': 'test'})
cross_entropy: {'epoch': 226, 'value': 0.39518974367529147} ({'split': 'test'})
Epoch 227
accuracy: {'epoch': 227, 'value': 0.9999199999999995} ({'split': 'train'})
cross_entropy: {'epoch': 227, 'value': 0.000575668931324035} ({'split': 'train'})
accuracy: {'epoch': 227, 'value': 0.9361999857425691} ({'split': 'test'})
cross_entropy: {'epoch': 227, 'value': 0.3962665532529353} ({'split': 'test'})
Epoch 228
accuracy: {'epoch': 228, 'value': 0.9999199999999994} ({'split': 'train'})
cross_entropy: {'epoch': 228, 'value': 0.0005773882056865837} ({'split': 'train'})
accuracy: {'epoch': 228, 'value': 0.9361999845504758} ({'split': 'test'})
cross_entropy: {'epoch': 228, 'value': 0.3896880279853941} ({'split': 'test'})
Epoch 229
accuracy: {'epoch': 229, 'value': 0.9998999999999997} ({'split': 'train'})
cross_entropy: {'epoch': 229, 'value': 0.0005376073795615231} ({'split': 'train'})
accuracy: {'epoch': 229, 'value': 0.9363999861478804} ({'split': 'test'})
cross_entropy: {'epoch': 229, 'value': 0.3950253960862757} ({'split': 'test'})
Epoch 230
accuracy: {'epoch': 230, 'value': 0.9998799999999998} ({'split': 'train'})
cross_entropy: {'epoch': 230, 'value': 0.0006852580571547148} ({'split': 'train'})
accuracy: {'epoch': 230, 'value': 0.9364999848604204} ({'split': 'test'})
cross_entropy: {'epoch': 230, 'value': 0.38903543289750814} ({'split': 'test'})
Epoch 231
accuracy: {'epoch': 231, 'value': 0.9998999999999998} ({'split': 'train'})
cross_entropy: {'epoch': 231, 'value': 0.0005585690564988182} ({'split': 'train'})
accuracy: {'epoch': 231, 'value': 0.9364999830722808} ({'split': 'test'})
cross_entropy: {'epoch': 231, 'value': 0.38208191413432346} ({'split': 'test'})
Epoch 232
accuracy: {'epoch': 232, 'value': 0.9999400000000002} ({'split': 'train'})
cross_entropy: {'epoch': 232, 'value': 0.0005004319280246273} ({'split': 'train'})
accuracy: {'epoch': 232, 'value': 0.9361999833583831} ({'split': 'test'})
cross_entropy: {'epoch': 232, 'value': 0.38689573112875214} ({'split': 'test'})
Epoch 233
accuracy: {'epoch': 233, 'value': 0.9999199999999998} ({'split': 'train'})
cross_entropy: {'epoch': 233, 'value': 0.00046880388824269186} ({'split': 'train'})
accuracy: {'epoch': 233, 'value': 0.9346999818086624} ({'split': 'test'})
cross_entropy: {'epoch': 233, 'value': 0.38481987766921516} ({'split': 'test'})
Epoch 234
accuracy: {'epoch': 234, 'value': 0.9999199999999996} ({'split': 'train'})
cross_entropy: {'epoch': 234, 'value': 0.0005071770050562916} ({'split': 'train'})
accuracy: {'epoch': 234, 'value': 0.9360999846458437} ({'split': 'test'})
cross_entropy: {'epoch': 234, 'value': 0.39111694365739824} ({'split': 'test'})
Epoch 235
accuracy: {'epoch': 235, 'value': 1.0} ({'split': 'train'})
cross_entropy: {'epoch': 235, 'value': 0.0004435684226616286} ({'split': 'train'})
accuracy: {'epoch': 235, 'value': 0.9359999841451644} ({'split': 'test'})
cross_entropy: {'epoch': 235, 'value': 0.39196089930832373} ({'split': 'test'})
Epoch 236
accuracy: {'epoch': 236, 'value': 0.9998999999999993} ({'split': 'train'})
cross_entropy: {'epoch': 236, 'value': 0.0005301441286131742} ({'split': 'train'})
accuracy: {'epoch': 236, 'value': 0.9355999851226807} ({'split': 'test'})
cross_entropy: {'epoch': 236, 'value': 0.4057960627228022} ({'split': 'test'})
Epoch 237
accuracy: {'epoch': 237, 'value': 0.9998999999999998} ({'split': 'train'})
cross_entropy: {'epoch': 237, 'value': 0.0005597844141977842} ({'split': 'train'})
accuracy: {'epoch': 237, 'value': 0.9364999830722808} ({'split': 'test'})
cross_entropy: {'epoch': 237, 'value': 0.3992369740456342} ({'split': 'test'})
Epoch 238
accuracy: {'epoch': 238, 'value': 0.9999599999999992} ({'split': 'train'})
cross_entropy: {'epoch': 238, 'value': 0.0004972785556269809} ({'split': 'train'})
accuracy: {'epoch': 238, 'value': 0.9365999853610993} ({'split': 'test'})
cross_entropy: {'epoch': 238, 'value': 0.40540883690118784} ({'split': 'test'})
Epoch 239
accuracy: {'epoch': 239, 'value': 1.0} ({'split': 'train'})
cross_entropy: {'epoch': 239, 'value': 0.00041068471642967765} ({'split': 'train'})
accuracy: {'epoch': 239, 'value': 0.9357999843358994} ({'split': 'test'})
cross_entropy: {'epoch': 239, 'value': 0.40564131576567886} ({'split': 'test'})
Epoch 240
accuracy: {'epoch': 240, 'value': 0.9999199999999997} ({'split': 'train'})
cross_entropy: {'epoch': 240, 'value': 0.000544568383991718} ({'split': 'train'})
accuracy: {'epoch': 240, 'value': 0.9350999850034715} ({'split': 'test'})
cross_entropy: {'epoch': 240, 'value': 0.4020165711641311} ({'split': 'test'})
Epoch 241
accuracy: {'epoch': 241, 'value': 0.9999800000000002} ({'split': 'train'})
cross_entropy: {'epoch': 241, 'value': 0.0005128058951511049} ({'split': 'train'})
accuracy: {'epoch': 241, 'value': 0.9359999829530714} ({'split': 'test'})
cross_entropy: {'epoch': 241, 'value': 0.4010329645872116} ({'split': 'test'})
Epoch 242
accuracy: {'epoch': 242, 'value': 0.9999199999999998} ({'split': 'train'})
cross_entropy: {'epoch': 242, 'value': 0.0005145528321200987} ({'split': 'train'})
accuracy: {'epoch': 242, 'value': 0.9345999860763552} ({'split': 'test'})
cross_entropy: {'epoch': 242, 'value': 0.40061904534697534} ({'split': 'test'})
Epoch 243
accuracy: {'epoch': 243, 'value': 1.0} ({'split': 'train'})
cross_entropy: {'epoch': 243, 'value': 0.000455695036901161} ({'split': 'train'})
accuracy: {'epoch': 243, 'value': 0.9359999823570253} ({'split': 'test'})
cross_entropy: {'epoch': 243, 'value': 0.4084077924489974} ({'split': 'test'})
Epoch 244
accuracy: {'epoch': 244, 'value': 0.9999599999999992} ({'split': 'train'})
cross_entropy: {'epoch': 244, 'value': 0.0004961291754897683} ({'split': 'train'})
accuracy: {'epoch': 244, 'value': 0.9359999847412106} ({'split': 'test'})
cross_entropy: {'epoch': 244, 'value': 0.4071474936604501} ({'split': 'test'})
Epoch 245
accuracy: {'epoch': 245, 'value': 0.9999199999999997} ({'split': 'train'})
cross_entropy: {'epoch': 245, 'value': 0.0005518377840658648} ({'split': 'train'})
accuracy: {'epoch': 245, 'value': 0.9348999822139741} ({'split': 'test'})
cross_entropy: {'epoch': 245, 'value': 0.40471783846616743} ({'split': 'test'})
Epoch 246
accuracy: {'epoch': 246, 'value': 0.9999599999999998} ({'split': 'train'})
cross_entropy: {'epoch': 246, 'value': 0.0005831984781706705} ({'split': 'train'})
accuracy: {'epoch': 246, 'value': 0.9345999848842621} ({'split': 'test'})
cross_entropy: {'epoch': 246, 'value': 0.40265982158482083} ({'split': 'test'})
Epoch 247
accuracy: {'epoch': 247, 'value': 0.99996} ({'split': 'train'})
cross_entropy: {'epoch': 247, 'value': 0.0004709833679441363} ({'split': 'train'})
accuracy: {'epoch': 247, 'value': 0.9342999839782715} ({'split': 'test'})
cross_entropy: {'epoch': 247, 'value': 0.4061314060166478} ({'split': 'test'})
Epoch 248
accuracy: {'epoch': 248, 'value': 0.9999399999999999} ({'split': 'train'})
cross_entropy: {'epoch': 248, 'value': 0.0004515469291422051} ({'split': 'train'})
accuracy: {'epoch': 248, 'value': 0.9356999850273131} ({'split': 'test'})
cross_entropy: {'epoch': 248, 'value': 0.4032981092482807} ({'split': 'test'})
Epoch 249
accuracy: {'epoch': 249, 'value': 0.9999199999999996} ({'split': 'train'})
cross_entropy: {'epoch': 249, 'value': 0.0004535944243986159} ({'split': 'train'})
accuracy: {'epoch': 249, 'value': 0.935499983429909} ({'split': 'test'})
cross_entropy: {'epoch': 249, 'value': 0.4063102006167174} ({'split': 'test'})
Epoch 250
accuracy: {'epoch': 250, 'value': 0.9999199999999999} ({'split': 'train'})
cross_entropy: {'epoch': 250, 'value': 0.0004820482984464609} ({'split': 'train'})
accuracy: {'epoch': 250, 'value': 0.9357999837398531} ({'split': 'test'})
cross_entropy: {'epoch': 250, 'value': 0.40653064869344235} ({'split': 'test'})
Epoch 251
accuracy: {'epoch': 251, 'value': 0.99994} ({'split': 'train'})
cross_entropy: {'epoch': 251, 'value': 0.0004448210075916722} ({'split': 'train'})
accuracy: {'epoch': 251, 'value': 0.9352999836206435} ({'split': 'test'})
cross_entropy: {'epoch': 251, 'value': 0.4046991385519505} ({'split': 'test'})
Epoch 252
accuracy: {'epoch': 252, 'value': 0.9999599999999991} ({'split': 'train'})
cross_entropy: {'epoch': 252, 'value': 0.00041975514773512265} ({'split': 'train'})
accuracy: {'epoch': 252, 'value': 0.9361999839544295} ({'split': 'test'})
cross_entropy: {'epoch': 252, 'value': 0.4046984431147578} ({'split': 'test'})
Epoch 253
accuracy: {'epoch': 253, 'value': 0.9998800000000001} ({'split': 'train'})
cross_entropy: {'epoch': 253, 'value': 0.0005133528663963076} ({'split': 'train'})
accuracy: {'epoch': 253, 'value': 0.9360999852418903} ({'split': 'test'})
cross_entropy: {'epoch': 253, 'value': 0.4048143989592793} ({'split': 'test'})
Epoch 254
accuracy: {'epoch': 254, 'value': 0.99998} ({'split': 'train'})
cross_entropy: {'epoch': 254, 'value': 0.00039972036696039144} ({'split': 'train'})
accuracy: {'epoch': 254, 'value': 0.9361999857425687} ({'split': 'test'})
cross_entropy: {'epoch': 254, 'value': 0.4035809015482664} ({'split': 'test'})
Epoch 255
accuracy: {'epoch': 255, 'value': 0.9999199999999999} ({'split': 'train'})
cross_entropy: {'epoch': 255, 'value': 0.0004526856832439079} ({'split': 'train'})
accuracy: {'epoch': 255, 'value': 0.9353999835252763} ({'split': 'test'})
cross_entropy: {'epoch': 255, 'value': 0.40336350023746487} ({'split': 'test'})
Epoch 256
accuracy: {'epoch': 256, 'value': 0.9999399999999999} ({'split': 'train'})
cross_entropy: {'epoch': 256, 'value': 0.00043720138342119726} ({'split': 'train'})
accuracy: {'epoch': 256, 'value': 0.9357999843358994} ({'split': 'test'})
cross_entropy: {'epoch': 256, 'value': 0.4035500758886337} ({'split': 'test'})
Epoch 257
accuracy: {'epoch': 257, 'value': 0.9999000000000001} ({'split': 'train'})
cross_entropy: {'epoch': 257, 'value': 0.0005709547446807846} ({'split': 'train'})
accuracy: {'epoch': 257, 'value': 0.9356999838352204} ({'split': 'test'})
cross_entropy: {'epoch': 257, 'value': 0.4033437432348728} ({'split': 'test'})
Epoch 258
accuracy: {'epoch': 258, 'value': 0.9999199999999998} ({'split': 'train'})
cross_entropy: {'epoch': 258, 'value': 0.0005244683411438018} ({'split': 'train'})
accuracy: {'epoch': 258, 'value': 0.9357999837398527} ({'split': 'test'})
cross_entropy: {'epoch': 258, 'value': 0.4023618779331447} ({'split': 'test'})
Epoch 259
accuracy: {'epoch': 259, 'value': 0.9999599999999992} ({'split': 'train'})
cross_entropy: {'epoch': 259, 'value': 0.00047159211059100907} ({'split': 'train'})
accuracy: {'epoch': 259, 'value': 0.935899984240532} ({'split': 'test'})
cross_entropy: {'epoch': 259, 'value': 0.4018600241094828} ({'split': 'test'})
Epoch 260
accuracy: {'epoch': 260, 'value': 0.99996} ({'split': 'train'})
cross_entropy: {'epoch': 260, 'value': 0.0003904028058145196} ({'split': 'train'})
accuracy: {'epoch': 260, 'value': 0.9358999842405319} ({'split': 'test'})
cross_entropy: {'epoch': 260, 'value': 0.4019555534422399} ({'split': 'test'})
Epoch 261
accuracy: {'epoch': 261, 'value': 0.9999599999999993} ({'split': 'train'})
cross_entropy: {'epoch': 261, 'value': 0.0004714961790895905} ({'split': 'train'})
accuracy: {'epoch': 261, 'value': 0.935899984240532} ({'split': 'test'})
cross_entropy: {'epoch': 261, 'value': 0.4013344941288233} ({'split': 'test'})
Epoch 262
accuracy: {'epoch': 262, 'value': 0.9999600000000001} ({'split': 'train'})
cross_entropy: {'epoch': 262, 'value': 0.0004449682388640942} ({'split': 'train'})
accuracy: {'epoch': 262, 'value': 0.9361999839544294} ({'split': 'test'})
cross_entropy: {'epoch': 262, 'value': 0.4023782343417407} ({'split': 'test'})
Epoch 263
accuracy: {'epoch': 263, 'value': 0.9999599999999995} ({'split': 'train'})
cross_entropy: {'epoch': 263, 'value': 0.00040738438898231836} ({'split': 'train'})
accuracy: {'epoch': 263, 'value': 0.9361999857425692} ({'split': 'test'})
cross_entropy: {'epoch': 263, 'value': 0.4028411939367654} ({'split': 'test'})
Epoch 264
accuracy: {'epoch': 264, 'value': 0.9999800000000001} ({'split': 'train'})
cross_entropy: {'epoch': 264, 'value': 0.00043494764564558846} ({'split': 'train'})
accuracy: {'epoch': 264, 'value': 0.9358999848365787} ({'split': 'test'})
cross_entropy: {'epoch': 264, 'value': 0.4031241029128432} ({'split': 'test'})
Epoch 265
accuracy: {'epoch': 265, 'value': 0.9999800000000001} ({'split': 'train'})
cross_entropy: {'epoch': 265, 'value': 0.0003811115223914386} ({'split': 'train'})
accuracy: {'epoch': 265, 'value': 0.935899984240532} ({'split': 'test'})
cross_entropy: {'epoch': 265, 'value': 0.4044591961801053} ({'split': 'test'})
Epoch 266
accuracy: {'epoch': 266, 'value': 0.9999399999999997} ({'split': 'train'})
cross_entropy: {'epoch': 266, 'value': 0.0004327460784255526} ({'split': 'train'})
accuracy: {'epoch': 266, 'value': 0.9361999845504764} ({'split': 'test'})
cross_entropy: {'epoch': 266, 'value': 0.40401295721530933} ({'split': 'test'})
Epoch 267
accuracy: {'epoch': 267, 'value': 0.9999400000000003} ({'split': 'train'})
cross_entropy: {'epoch': 267, 'value': 0.00046288199521368376} ({'split': 'train'})
accuracy: {'epoch': 267, 'value': 0.9361999851465225} ({'split': 'test'})
cross_entropy: {'epoch': 267, 'value': 0.4039474016427993} ({'split': 'test'})
Epoch 268
accuracy: {'epoch': 268, 'value': 0.9998999999999999} ({'split': 'train'})
cross_entropy: {'epoch': 268, 'value': 0.0005449625291256237} ({'split': 'train'})
accuracy: {'epoch': 268, 'value': 0.9364999854564668} ({'split': 'test'})
cross_entropy: {'epoch': 268, 'value': 0.40451525188982485} ({'split': 'test'})
Epoch 269
accuracy: {'epoch': 269, 'value': 0.9999199999999997} ({'split': 'train'})
cross_entropy: {'epoch': 269, 'value': 0.0005146534956991673} ({'split': 'train'})
accuracy: {'epoch': 269, 'value': 0.9357999849319457} ({'split': 'test'})
cross_entropy: {'epoch': 269, 'value': 0.4039300972223283} ({'split': 'test'})
Epoch 270
accuracy: {'epoch': 270, 'value': 0.9999599999999996} ({'split': 'train'})
cross_entropy: {'epoch': 270, 'value': 0.0004490643913112579} ({'split': 'train'})
accuracy: {'epoch': 270, 'value': 0.9361999857425692} ({'split': 'test'})
cross_entropy: {'epoch': 270, 'value': 0.40261761076748376} ({'split': 'test'})
Epoch 271
accuracy: {'epoch': 271, 'value': 0.9999599999999998} ({'split': 'train'})
cross_entropy: {'epoch': 271, 'value': 0.00041530449859797955} ({'split': 'train'})
accuracy: {'epoch': 271, 'value': 0.9358999854326246} ({'split': 'test'})
cross_entropy: {'epoch': 271, 'value': 0.40373531021177766} ({'split': 'test'})
Epoch 272
accuracy: {'epoch': 272, 'value': 0.9999599999999998} ({'split': 'train'})
cross_entropy: {'epoch': 272, 'value': 0.000396405497714877} ({'split': 'train'})
accuracy: {'epoch': 272, 'value': 0.935999984741211} ({'split': 'test'})
cross_entropy: {'epoch': 272, 'value': 0.4043074446171522} ({'split': 'test'})
Epoch 273
accuracy: {'epoch': 273, 'value': 0.9999800000000001} ({'split': 'train'})
cross_entropy: {'epoch': 273, 'value': 0.0004244727809936739} ({'split': 'train'})
accuracy: {'epoch': 273, 'value': 0.9361999839544297} ({'split': 'test'})
cross_entropy: {'epoch': 273, 'value': 0.4042503713071347} ({'split': 'test'})
Epoch 274
accuracy: {'epoch': 274, 'value': 0.9999800000000001} ({'split': 'train'})
cross_entropy: {'epoch': 274, 'value': 0.0003925474179268348} ({'split': 'train'})
accuracy: {'epoch': 274, 'value': 0.9363999855518341} ({'split': 'test'})
cross_entropy: {'epoch': 274, 'value': 0.40387507036328313} ({'split': 'test'})
Epoch 275
accuracy: {'epoch': 275, 'value': 0.9999} ({'split': 'train'})
cross_entropy: {'epoch': 275, 'value': 0.000572238383293152} ({'split': 'train'})
accuracy: {'epoch': 275, 'value': 0.9356999844312666} ({'split': 'test'})
cross_entropy: {'epoch': 275, 'value': 0.4034881145879625} ({'split': 'test'})
Epoch 276
accuracy: {'epoch': 276, 'value': 0.9999400000000003} ({'split': 'train'})
cross_entropy: {'epoch': 276, 'value': 0.0004674772486183793} ({'split': 'train'})
accuracy: {'epoch': 276, 'value': 0.9361999857425689} ({'split': 'test'})
cross_entropy: {'epoch': 276, 'value': 0.4030108077451587} ({'split': 'test'})
Epoch 277
accuracy: {'epoch': 277, 'value': 0.9999800000000001} ({'split': 'train'})
cross_entropy: {'epoch': 277, 'value': 0.0004073370185121894} ({'split': 'train'})
accuracy: {'epoch': 277, 'value': 0.9362999856472016} ({'split': 'test'})
cross_entropy: {'epoch': 277, 'value': 0.40394271586090347} ({'split': 'test'})
Epoch 278
accuracy: {'epoch': 278, 'value': 0.9999800000000001} ({'split': 'train'})
cross_entropy: {'epoch': 278, 'value': 0.0003767167519126089} ({'split': 'train'})
accuracy: {'epoch': 278, 'value': 0.9356999850273132} ({'split': 'test'})
cross_entropy: {'epoch': 278, 'value': 0.40458724066615115} ({'split': 'test'})
Epoch 279
accuracy: {'epoch': 279, 'value': 0.99996} ({'split': 'train'})
cross_entropy: {'epoch': 279, 'value': 0.00043854251895681973} ({'split': 'train'})
accuracy: {'epoch': 279, 'value': 0.9358999842405318} ({'split': 'test'})
cross_entropy: {'epoch': 279, 'value': 0.40464380495250213} ({'split': 'test'})
Epoch 280
accuracy: {'epoch': 280, 'value': 1.0} ({'split': 'train'})
cross_entropy: {'epoch': 280, 'value': 0.00035502288101240976} ({'split': 'train'})
accuracy: {'epoch': 280, 'value': 0.9360999852418901} ({'split': 'test'})
cross_entropy: {'epoch': 280, 'value': 0.40420791514217863} ({'split': 'test'})
Epoch 281
accuracy: {'epoch': 281, 'value': 0.9999599999999998} ({'split': 'train'})
cross_entropy: {'epoch': 281, 'value': 0.0004332951701106504} ({'split': 'train'})
accuracy: {'epoch': 281, 'value': 0.9363999855518341} ({'split': 'test'})
cross_entropy: {'epoch': 281, 'value': 0.4037539515644312} ({'split': 'test'})
Epoch 282
accuracy: {'epoch': 282, 'value': 0.9999599999999996} ({'split': 'train'})
cross_entropy: {'epoch': 282, 'value': 0.00038705884527415034} ({'split': 'train'})
accuracy: {'epoch': 282, 'value': 0.9360999852418898} ({'split': 'test'})
cross_entropy: {'epoch': 282, 'value': 0.4033248273283245} ({'split': 'test'})
Epoch 283
accuracy: {'epoch': 283, 'value': 0.9999600000000002} ({'split': 'train'})
cross_entropy: {'epoch': 283, 'value': 0.0004830094797629864} ({'split': 'train'})
accuracy: {'epoch': 283, 'value': 0.9357999867200851} ({'split': 'test'})
cross_entropy: {'epoch': 283, 'value': 0.4025517997145652} ({'split': 'test'})
Epoch 284
accuracy: {'epoch': 284, 'value': 0.9999599999999992} ({'split': 'train'})
cross_entropy: {'epoch': 284, 'value': 0.0004296664379816503} ({'split': 'train'})
accuracy: {'epoch': 284, 'value': 0.9360999858379363} ({'split': 'test'})
cross_entropy: {'epoch': 284, 'value': 0.4030544473230838} ({'split': 'test'})
Epoch 285
accuracy: {'epoch': 285, 'value': 0.9999599999999996} ({'split': 'train'})
cross_entropy: {'epoch': 285, 'value': 0.00037241513784509153} ({'split': 'train'})
accuracy: {'epoch': 285, 'value': 0.9363999849557877} ({'split': 'test'})
cross_entropy: {'epoch': 285, 'value': 0.40418286032974726} ({'split': 'test'})
Epoch 286
accuracy: {'epoch': 286, 'value': 0.9999800000000002} ({'split': 'train'})
cross_entropy: {'epoch': 286, 'value': 0.00039394125529564934} ({'split': 'train'})
accuracy: {'epoch': 286, 'value': 0.9360999852418901} ({'split': 'test'})
cross_entropy: {'epoch': 286, 'value': 0.40422491062432536} ({'split': 'test'})
Epoch 287
accuracy: {'epoch': 287, 'value': 0.9999800000000002} ({'split': 'train'})
cross_entropy: {'epoch': 287, 'value': 0.00034527358650695514} ({'split': 'train'})
accuracy: {'epoch': 287, 'value': 0.9359999853372571} ({'split': 'test'})
cross_entropy: {'epoch': 287, 'value': 0.40429474301636226} ({'split': 'test'})
Epoch 288
accuracy: {'epoch': 288, 'value': 0.9999199999999999} ({'split': 'train'})
cross_entropy: {'epoch': 288, 'value': 0.0004546984380786308} ({'split': 'train'})
accuracy: {'epoch': 288, 'value': 0.9360999852418902} ({'split': 'test'})
cross_entropy: {'epoch': 288, 'value': 0.40497224949300287} ({'split': 'test'})
Epoch 289
accuracy: {'epoch': 289, 'value': 0.9998999999999999} ({'split': 'train'})
cross_entropy: {'epoch': 289, 'value': 0.00048071772563271274} ({'split': 'train'})
accuracy: {'epoch': 289, 'value': 0.936099984049797} ({'split': 'test'})
cross_entropy: {'epoch': 289, 'value': 0.4051847478747366} ({'split': 'test'})
Epoch 290
accuracy: {'epoch': 290, 'value': 0.9999800000000001} ({'split': 'train'})
cross_entropy: {'epoch': 290, 'value': 0.00038860733607085405} ({'split': 'train'})
accuracy: {'epoch': 290, 'value': 0.9358999848365785} ({'split': 'test'})
cross_entropy: {'epoch': 290, 'value': 0.4055845611542465} ({'split': 'test'})
Epoch 291
accuracy: {'epoch': 291, 'value': 0.9999399999999998} ({'split': 'train'})
cross_entropy: {'epoch': 291, 'value': 0.00044030190970050165} ({'split': 'train'})
accuracy: {'epoch': 291, 'value': 0.9363999843597415} ({'split': 'test'})
cross_entropy: {'epoch': 291, 'value': 0.4059474577009678} ({'split': 'test'})
Epoch 292
accuracy: {'epoch': 292, 'value': 0.9999800000000001} ({'split': 'train'})
cross_entropy: {'epoch': 292, 'value': 0.00038867220961488774} ({'split': 'train'})
accuracy: {'epoch': 292, 'value': 0.936499984264374} ({'split': 'test'})
cross_entropy: {'epoch': 292, 'value': 0.40557508945465093} ({'split': 'test'})
Epoch 293
accuracy: {'epoch': 293, 'value': 1.0} ({'split': 'train'})
cross_entropy: {'epoch': 293, 'value': 0.0003369829908770044} ({'split': 'train'})
accuracy: {'epoch': 293, 'value': 0.936799984574318} ({'split': 'test'})
cross_entropy: {'epoch': 293, 'value': 0.4055774848163128} ({'split': 'test'})
Epoch 294
accuracy: {'epoch': 294, 'value': 0.9999800000000002} ({'split': 'train'})
cross_entropy: {'epoch': 294, 'value': 0.00038927158751990643} ({'split': 'train'})
accuracy: {'epoch': 294, 'value': 0.9361999839544299} ({'split': 'test'})
cross_entropy: {'epoch': 294, 'value': 0.4058836165070533} ({'split': 'test'})
Epoch 295
accuracy: {'epoch': 295, 'value': 0.9999800000000001} ({'split': 'train'})
cross_entropy: {'epoch': 295, 'value': 0.0004067183742206542} ({'split': 'train'})
accuracy: {'epoch': 295, 'value': 0.936299983859062} ({'split': 'test'})
cross_entropy: {'epoch': 295, 'value': 0.40649093225598343} ({'split': 'test'})
Epoch 296
accuracy: {'epoch': 296, 'value': 0.9998799999999999} ({'split': 'train'})
cross_entropy: {'epoch': 296, 'value': 0.0004779543570673559} ({'split': 'train'})
accuracy: {'epoch': 296, 'value': 0.9358999848365785} ({'split': 'test'})
cross_entropy: {'epoch': 296, 'value': 0.4051983489096165} ({'split': 'test'})
Epoch 297
accuracy: {'epoch': 297, 'value': 1.0} ({'split': 'train'})
cross_entropy: {'epoch': 297, 'value': 0.0003776915712119081} ({'split': 'train'})
accuracy: {'epoch': 297, 'value': 0.9358999854326246} ({'split': 'test'})
cross_entropy: {'epoch': 297, 'value': 0.405412073135376} ({'split': 'test'})
Epoch 298
accuracy: {'epoch': 298, 'value': 0.9999599999999997} ({'split': 'train'})
cross_entropy: {'epoch': 298, 'value': 0.00040221657422371214} ({'split': 'train'})
accuracy: {'epoch': 298, 'value': 0.935899984240532} ({'split': 'test'})
cross_entropy: {'epoch': 298, 'value': 0.4056356637924909} ({'split': 'test'})
Epoch 299
accuracy: {'epoch': 299, 'value': 0.9999800000000001} ({'split': 'train'})
cross_entropy: {'epoch': 299, 'value': 0.00042306654044427} ({'split': 'train'})
accuracy: {'epoch': 299, 'value': 0.9361999845504759} ({'split': 'test'})
cross_entropy: {'epoch': 299, 'value': 0.40539700798690315} ({'split': 'test'})
----- Saved results at sample_cifar10_resnet18_nobias_nobn_unstructured_pruning_30.csv ------
{'exp_name': 'exp_cifar10_resnet18_nobias_nobn_unstructured_pruning_30', 'model0_acc': 93.10999816656113, 'model1_acc': 93.19999837875366, 'geometric_acc': 68.88, 'prediction_acc': 93.87, 'naive_acc': 19.17, 'geometric_gain': -24.319998378753667, 'geometric_gain_%': -26.094419315245155, 'prediction_gain': 0.6700016212463424, 'prediction_gain_%': 0.7188858722116452, 'relative_loss_wrt_prediction': 26.8133051874568, 'geometric_time': 11.78515576897189, 'retrain_geometric_best': 93.69999867677686, 'retrain_naive_best': -100, 'retrain_model0_best': -100, 'retrain_model1_best': -100, 'retrain_epochs': 300}
FYI: the parameters were: 
 Namespace(n_epochs=300, batch_size_train=64, batch_size_test=1000, learning_rate=0.01, momentum=0.5, log_interval=100, to_download=True, disable_bias=True, dataset='Cifar10', num_models=2, model_name='resnet18_nobias_nobn', config_file=None, config_dir='/home/gvignen/otfusion/exp_cifar10_resnet18_nobias_nobn_unstructured_pruning_30/configurations', num_hidden_nodes=400, num_hidden_nodes1=400, num_hidden_nodes2=200, num_hidden_nodes3=100, num_hidden_nodes4=50, sweep_id=90, gpu_id=0, skip_last_layer=False, skip_last_layer_type='average', debug=False, cifar_style_data=False, activation_histograms=True, act_num_samples=200, softmax_temperature=1, activation_mode='raw', options_type='generic', deprecated=None, save_result_file='sample_cifar10_resnet18_nobias_nobn_unstructured_pruning_30.csv', sweep_name='exp_cifar10_resnet18_nobias_nobn_unstructured_pruning_30', reg=0.01, reg_m=0.001, ground_metric='euclidean', ground_metric_normalize='none', not_squared=True, clip_gm=False, clip_min=0, clip_max=5, tmap_stats=False, ensemble_step=0.5, ground_metric_eff=True, retrain=300, retrain_lr_decay=-1, retrain_lr_decay_factor=None, retrain_lr_decay_epochs=None, retrain_avg_only=False, retrain_geometric_only=True, load_models='./resnet_models/', ckpt_type='best', recheck_cifar=True, recheck_acc=True, eval_aligned=False, enable_dropout=False, dump_model=False, dump_final_models=False, correction=True, activation_seed=21, weight_stats=True, sinkhorn_type='normal', geom_ensemble_type='acts', act_bug=False, standardize_acts=False, transform_acts=False, center_acts=False, prelu_acts=True, pool_acts=False, pool_relu=False, normalize_acts=False, normalize_wts=False, gromov=False, gromov_loss='square_loss', tensorboard_root='./tensorboard', tensorboard=False, same_model=-1, dist_normalize=False, update_acts=False, past_correction=True, partial_reshape=False, choice='0 2 4 6 8', diff_init=False, partition_type='labels', personal_class_idx=9, partition_dataloader=-1, personal_split_frac=0.1, exact=True, skip_personal_idx=False, prediction_wts=False, width_ratio=1, proper_marginals=False, retrain_seed=-1, no_random_trainloaders=False, reinit_trainloaders=False, second_model_name=None, print_distances=False, deterministic=False, skip_retrain=-1, importance=None, unbalanced=False, temperature=20, alpha=0.7, dist_epochs=60, handle_skips=True, prune=True, prune_frac=0.3, prune_type='unstructured', experiment_name='cifar10_resnet18_nobias_nobn_unstructured_pruning_30', timestamp='2024-01-06_19-44-44_583055', rootdir='/home/gvignen/otfusion/exp_cifar10_resnet18_nobias_nobn_unstructured_pruning_30', baseroot='/home/gvignen/otfusion', result_dir='/home/gvignen/otfusion/exp_cifar10_resnet18_nobias_nobn_unstructured_pruning_30/results', exp_name='exp_cifar10_resnet18_nobias_nobn_unstructured_pruning_30', csv_dir='/home/gvignen/otfusion/exp_cifar10_resnet18_nobias_nobn_unstructured_pruning_30/csv', config={'dataset': 'Cifar10', 'model': 'resnet18_nobias_nobn', 'optimizer': 'SGD', 'optimizer_decay_at_epochs': [150, 250], 'optimizer_decay_with_factor': 10.0, 'optimizer_learning_rate': 0.1, 'optimizer_momentum': 0.9, 'optimizer_weight_decay': 0.0001, 'batch_size': 256, 'num_epochs': 300, 'seed': 42, 'nick': 'geometric_21', 'start_acc': 68.88}, second_config={'dataset': 'Cifar10', 'model': 'resnet18_nobias_nobn', 'optimizer': 'SGD', 'optimizer_decay_at_epochs': [150, 250], 'optimizer_decay_with_factor': 10.0, 'optimizer_learning_rate': 0.1, 'optimizer_momentum': 0.9, 'optimizer_weight_decay': 0.0001, 'batch_size': 256, 'num_epochs': 300, 'seed': 42, 'nick': 'geometric_21', 'start_acc': 68.88}, cifar_init_lr=0.1, num_personal_idx=25, activation_time=4.427792550995946, params_model_0=11164352, params_model_1=11164352, geometric_time=11.78515576897189, params_geometric=11164352, retrain_geometric_best=0.9369999867677686, retrain_naive_best=-1, retrain_model0_best=-1, retrain_model1_best=-1, **{'trace_sum_ratio_conv1.weight': 0.0625, 'trace_sum_ratio_layer1.0.conv1.weight': 0.015625, 'trace_sum_ratio_layer1.0.conv2.weight': 0.03125, 'trace_sum_ratio_layer1.1.conv1.weight': 0.0, 'trace_sum_ratio_layer1.1.conv2.weight': 0.03125, 'trace_sum_ratio_layer2.0.conv1.weight': 0.0078125, 'trace_sum_ratio_layer2.0.conv2.weight': 0.02343750186264515, 'trace_sum_ratio_layer2.0.shortcut.0.weight': 0.015625, 'trace_sum_ratio_layer2.1.conv1.weight': 0.015625, 'trace_sum_ratio_layer2.1.conv2.weight': 0.015625, 'trace_sum_ratio_layer3.0.conv1.weight': 0.0078125, 'trace_sum_ratio_layer3.0.conv2.weight': 0.011718750931322575, 'trace_sum_ratio_layer3.0.shortcut.0.weight': 0.00390625, 'trace_sum_ratio_layer3.1.conv1.weight': 0.0, 'trace_sum_ratio_layer3.1.conv2.weight': 0.00390625, 'trace_sum_ratio_layer4.0.conv1.weight': 0.0, 'trace_sum_ratio_layer4.0.conv2.weight': 0.001953125, 'trace_sum_ratio_layer4.0.shortcut.0.weight': 0.001953125, 'trace_sum_ratio_layer4.1.conv1.weight': 0.0, 'trace_sum_ratio_layer4.1.conv2.weight': 0.00390625, 'trace_sum_ratio_linear.weight': 1.0})
