/home/gvignen/.local/lib/python3.10/site-packages/torch/utils/data/dataloader.py:557: UserWarning: This DataLoader will create 2 worker processes in total. Our suggested max number of worker in current system is 1, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.
  warnings.warn(_create_warning_msg(
------- Setting up parameters -------
dumping parameters at  /home/gvignen/otfusion/exp_cifar10_resnet18_nobias_nobn_no_pruning/configurations
The parameters are: 
 Namespace(n_epochs=300, batch_size_train=64, batch_size_test=1000, learning_rate=0.01, momentum=0.5, log_interval=100, to_download=True, disable_bias=True, dataset='Cifar10', num_models=2, model_name='resnet18_nobias_nobn', config_file=None, config_dir='/home/gvignen/otfusion/exp_cifar10_resnet18_nobias_nobn_no_pruning/configurations', num_hidden_nodes=400, num_hidden_nodes1=400, num_hidden_nodes2=200, num_hidden_nodes3=100, num_hidden_nodes4=50, sweep_id=90, gpu_id=0, skip_last_layer=False, skip_last_layer_type='average', debug=False, cifar_style_data=False, activation_histograms=True, act_num_samples=200, softmax_temperature=1, activation_mode='raw', options_type='generic', deprecated=None, save_result_file='sample_cifar10_resnet18_nobias_nobn_no_pruning.csv', sweep_name='exp_cifar10_resnet18_nobias_nobn_no_pruning', reg=0.01, reg_m=0.001, ground_metric='euclidean', ground_metric_normalize='none', not_squared=True, clip_gm=False, clip_min=0, clip_max=5, tmap_stats=False, ensemble_step=0.5, ground_metric_eff=True, retrain=300, retrain_lr_decay=-1, retrain_lr_decay_factor=None, retrain_lr_decay_epochs=None, retrain_avg_only=False, retrain_geometric_only=True, load_models='./resnet_models/', ckpt_type='best', recheck_cifar=True, recheck_acc=True, eval_aligned=False, enable_dropout=False, dump_model=False, dump_final_models=False, correction=True, activation_seed=21, weight_stats=True, sinkhorn_type='normal', geom_ensemble_type='acts', act_bug=False, standardize_acts=False, transform_acts=False, center_acts=False, prelu_acts=True, pool_acts=False, pool_relu=False, normalize_acts=False, normalize_wts=False, gromov=False, gromov_loss='square_loss', tensorboard_root='./tensorboard', tensorboard=False, same_model=-1, dist_normalize=False, update_acts=False, past_correction=True, partial_reshape=False, choice='0 2 4 6 8', diff_init=False, partition_type='labels', personal_class_idx=9, partition_dataloader=-1, personal_split_frac=0.1, exact=True, skip_personal_idx=False, prediction_wts=False, width_ratio=1, proper_marginals=False, retrain_seed=-1, no_random_trainloaders=False, reinit_trainloaders=False, second_model_name=None, print_distances=False, deterministic=False, skip_retrain=-1, importance=None, unbalanced=False, temperature=20, alpha=0.7, dist_epochs=60, handle_skips=True, prune=False, prune_frac=0.5, prune_type='unstructured', experiment_name='cifar10_resnet18_nobias_nobn_no_pruning', timestamp='2024-01-05_22-27-19_950770', rootdir='/home/gvignen/otfusion/exp_cifar10_resnet18_nobias_nobn_no_pruning', baseroot='/home/gvignen/otfusion', result_dir='/home/gvignen/otfusion/exp_cifar10_resnet18_nobias_nobn_no_pruning/results', exp_name='exp_cifar10_resnet18_nobias_nobn_no_pruning', csv_dir='/home/gvignen/otfusion/exp_cifar10_resnet18_nobias_nobn_no_pruning/csv')
refactored get_config
------- Loading pre-trained models -------
loading cifar10 dataloaders
Files already downloaded and verified
Files already downloaded and verified
Files already downloaded and verified
Files already downloaded and verified
loading model with idx 0 and checkpoint_type is best
model parameters are 
 [torch.Size([64, 3, 3, 3]), torch.Size([64, 64, 3, 3]), torch.Size([64, 64, 3, 3]), torch.Size([64, 64, 3, 3]), torch.Size([64, 64, 3, 3]), torch.Size([128, 64, 3, 3]), torch.Size([128, 128, 3, 3]), torch.Size([128, 64, 1, 1]), torch.Size([128, 128, 3, 3]), torch.Size([128, 128, 3, 3]), torch.Size([256, 128, 3, 3]), torch.Size([256, 256, 3, 3]), torch.Size([256, 128, 1, 1]), torch.Size([256, 256, 3, 3]), torch.Size([256, 256, 3, 3]), torch.Size([512, 256, 3, 3]), torch.Size([512, 512, 3, 3]), torch.Size([512, 256, 1, 1]), torch.Size([512, 512, 3, 3]), torch.Size([512, 512, 3, 3]), torch.Size([10, 512])]
Loading model at path ./resnet_models/model_0/best.checkpoint which had accuracy 0.9310999816656113 and at epoch 181
loading model with idx 1 and checkpoint_type is best
model parameters are 
 [torch.Size([64, 3, 3, 3]), torch.Size([64, 64, 3, 3]), torch.Size([64, 64, 3, 3]), torch.Size([64, 64, 3, 3]), torch.Size([64, 64, 3, 3]), torch.Size([128, 64, 3, 3]), torch.Size([128, 128, 3, 3]), torch.Size([128, 64, 1, 1]), torch.Size([128, 128, 3, 3]), torch.Size([128, 128, 3, 3]), torch.Size([256, 128, 3, 3]), torch.Size([256, 256, 3, 3]), torch.Size([256, 128, 1, 1]), torch.Size([256, 256, 3, 3]), torch.Size([256, 256, 3, 3]), torch.Size([512, 256, 3, 3]), torch.Size([512, 512, 3, 3]), torch.Size([512, 256, 1, 1]), torch.Size([512, 512, 3, 3]), torch.Size([512, 512, 3, 3]), torch.Size([10, 512])]
Loading model at path ./resnet_models/model_1/best.checkpoint which had accuracy 0.9319999837875367 and at epoch 205
Done loading all the models

--------- Testing in global mode ---------
size of test_loader dataset:  10000

Test set: Avg. loss: 0.0043, Accuracy: 9311/10000 (93%)


--------- Testing in global mode ---------
size of test_loader dataset:  10000

Test set: Avg. loss: 0.0044, Accuracy: 9320/10000 (93%)

Rechecked accuracies are  [93.11, 93.2]
layer conv1.weight has #params  1728
layer layer1.0.conv1.weight has #params  36864
layer layer1.0.conv2.weight has #params  36864
layer layer1.1.conv1.weight has #params  36864
layer layer1.1.conv2.weight has #params  36864
layer layer2.0.conv1.weight has #params  73728
layer layer2.0.conv2.weight has #params  147456
layer layer2.0.shortcut.0.weight has #params  8192
layer layer2.1.conv1.weight has #params  147456
layer layer2.1.conv2.weight has #params  147456
layer layer3.0.conv1.weight has #params  294912
layer layer3.0.conv2.weight has #params  589824
layer layer3.0.shortcut.0.weight has #params  32768
layer layer3.1.conv1.weight has #params  589824
layer layer3.1.conv2.weight has #params  589824
layer layer4.0.conv1.weight has #params  1179648
layer layer4.0.conv2.weight has #params  2359296
layer layer4.0.shortcut.0.weight has #params  131072
layer layer4.1.conv1.weight has #params  2359296
layer layer4.1.conv2.weight has #params  2359296
layer linear.weight has #params  5120
Activation Timer start
Files already downloaded and verified
Files already downloaded and verified
excluded
set forward hook for layer named:  conv1
this was continued,  bn1
this was continued,  layer1
this was continued,  layer1.0
set forward hook for layer named:  layer1.0.conv1
this was continued,  layer1.0.bn1
set forward hook for layer named:  layer1.0.conv2
this was continued,  layer1.0.shortcut
this was continued,  layer1.1
set forward hook for layer named:  layer1.1.conv1
this was continued,  layer1.1.bn1
set forward hook for layer named:  layer1.1.conv2
this was continued,  layer1.1.shortcut
this was continued,  layer2
this was continued,  layer2.0
set forward hook for layer named:  layer2.0.conv1
this was continued,  layer2.0.bn1
set forward hook for layer named:  layer2.0.conv2
this was continued,  layer2.0.shortcut
set forward hook for layer named:  layer2.0.shortcut.0
this was continued,  layer2.0.shortcut.1
this was continued,  layer2.1
set forward hook for layer named:  layer2.1.conv1
this was continued,  layer2.1.bn1
set forward hook for layer named:  layer2.1.conv2
this was continued,  layer2.1.shortcut
this was continued,  layer3
this was continued,  layer3.0
set forward hook for layer named:  layer3.0.conv1
this was continued,  layer3.0.bn1
set forward hook for layer named:  layer3.0.conv2
this was continued,  layer3.0.shortcut
set forward hook for layer named:  layer3.0.shortcut.0
this was continued,  layer3.0.shortcut.1
this was continued,  layer3.1
set forward hook for layer named:  layer3.1.conv1
this was continued,  layer3.1.bn1
set forward hook for layer named:  layer3.1.conv2
this was continued,  layer3.1.shortcut
this was continued,  layer4
this was continued,  layer4.0
set forward hook for layer named:  layer4.0.conv1
this was continued,  layer4.0.bn1
set forward hook for layer named:  layer4.0.conv2
this was continued,  layer4.0.shortcut
set forward hook for layer named:  layer4.0.shortcut.0
this was continued,  layer4.0.shortcut.1
this was continued,  layer4.1
set forward hook for layer named:  layer4.1.conv1
this was continued,  layer4.1.bn1
set forward hook for layer named:  layer4.1.conv2
this was continued,  layer4.1.shortcut
set forward hook for layer named:  linear
excluded
set forward hook for layer named:  conv1
this was continued,  bn1
this was continued,  layer1
this was continued,  layer1.0
set forward hook for layer named:  layer1.0.conv1
this was continued,  layer1.0.bn1
set forward hook for layer named:  layer1.0.conv2
this was continued,  layer1.0.shortcut
this was continued,  layer1.1
set forward hook for layer named:  layer1.1.conv1
this was continued,  layer1.1.bn1
set forward hook for layer named:  layer1.1.conv2
this was continued,  layer1.1.shortcut
this was continued,  layer2
this was continued,  layer2.0
set forward hook for layer named:  layer2.0.conv1
this was continued,  layer2.0.bn1
set forward hook for layer named:  layer2.0.conv2
this was continued,  layer2.0.shortcut
set forward hook for layer named:  layer2.0.shortcut.0
this was continued,  layer2.0.shortcut.1
this was continued,  layer2.1
set forward hook for layer named:  layer2.1.conv1
this was continued,  layer2.1.bn1
set forward hook for layer named:  layer2.1.conv2
this was continued,  layer2.1.shortcut
this was continued,  layer3
this was continued,  layer3.0
set forward hook for layer named:  layer3.0.conv1
this was continued,  layer3.0.bn1
set forward hook for layer named:  layer3.0.conv2
this was continued,  layer3.0.shortcut
set forward hook for layer named:  layer3.0.shortcut.0
this was continued,  layer3.0.shortcut.1
this was continued,  layer3.1
set forward hook for layer named:  layer3.1.conv1
this was continued,  layer3.1.bn1
set forward hook for layer named:  layer3.1.conv2
this was continued,  layer3.1.shortcut
this was continued,  layer4
this was continued,  layer4.0
set forward hook for layer named:  layer4.0.conv1
this was continued,  layer4.0.bn1
set forward hook for layer named:  layer4.0.conv2
this was continued,  layer4.0.shortcut
set forward hook for layer named:  layer4.0.shortcut.0
this was continued,  layer4.0.shortcut.1
this was continued,  layer4.1
set forward hook for layer named:  layer4.1.conv1
this was continued,  layer4.1.bn1
set forward hook for layer named:  layer4.1.conv2
this was continued,  layer4.1.shortcut
set forward hook for layer named:  linear
num_personal_idx  25
model_name is  resnet18_nobias_nobn
***********
min of act: -19.394960403442383, max: 19.856435775756836, mean: -0.01465704757720232
activations for idx 0 at layer conv1 have the following shape  torch.Size([200, 1, 64, 32, 32])
-----------
***********
min of act: -46.81527328491211, max: 16.600048065185547, mean: -2.2581915855407715
activations for idx 0 at layer layer1.0.conv1 have the following shape  torch.Size([200, 1, 64, 32, 32])
-----------
***********
min of act: -10.50484848022461, max: 21.04061508178711, mean: 0.1783735603094101
activations for idx 0 at layer layer1.0.conv2 have the following shape  torch.Size([200, 1, 64, 32, 32])
-----------
***********
min of act: -33.51021957397461, max: 18.02579116821289, mean: -2.751049757003784
activations for idx 0 at layer layer1.1.conv1 have the following shape  torch.Size([200, 1, 64, 32, 32])
-----------
***********
min of act: -10.171186447143555, max: 18.623046875, mean: 0.1576133370399475
activations for idx 0 at layer layer1.1.conv2 have the following shape  torch.Size([200, 1, 64, 32, 32])
-----------
***********
min of act: -43.117984771728516, max: 38.007469177246094, mean: -1.2746546268463135
activations for idx 0 at layer layer2.0.conv1 have the following shape  torch.Size([200, 1, 128, 16, 16])
-----------
***********
min of act: -51.80622863769531, max: 56.91227722167969, mean: -1.6330370903015137
activations for idx 0 at layer layer2.0.conv2 have the following shape  torch.Size([200, 1, 128, 16, 16])
-----------
***********
min of act: -8.53255558013916, max: 14.881875991821289, mean: 0.09656974673271179
activations for idx 0 at layer layer2.0.shortcut.0 have the following shape  torch.Size([200, 1, 128, 16, 16])
-----------
***********
min of act: -82.92718505859375, max: 65.70968627929688, mean: -9.60301685333252
activations for idx 0 at layer layer2.1.conv1 have the following shape  torch.Size([200, 1, 128, 16, 16])
-----------
***********
min of act: -29.377965927124023, max: 58.978797912597656, mean: 0.005241641774773598
activations for idx 0 at layer layer2.1.conv2 have the following shape  torch.Size([200, 1, 128, 16, 16])
-----------
***********
min of act: -68.36131286621094, max: 94.5248031616211, mean: -5.488699913024902
activations for idx 0 at layer layer3.0.conv1 have the following shape  torch.Size([200, 1, 256, 8, 8])
-----------
***********
min of act: -113.01793670654297, max: 130.73561096191406, mean: -6.709481239318848
activations for idx 0 at layer layer3.0.conv2 have the following shape  torch.Size([200, 1, 256, 8, 8])
-----------
***********
min of act: -23.323490142822266, max: 33.16809844970703, mean: -0.6007148623466492
activations for idx 0 at layer layer3.0.shortcut.0 have the following shape  torch.Size([200, 1, 256, 8, 8])
-----------
***********
min of act: -143.4493408203125, max: 163.54058837890625, mean: -13.70140552520752
activations for idx 0 at layer layer3.1.conv1 have the following shape  torch.Size([200, 1, 256, 8, 8])
-----------
***********
min of act: -69.45039367675781, max: 122.98125457763672, mean: -3.4753289222717285
activations for idx 0 at layer layer3.1.conv2 have the following shape  torch.Size([200, 1, 256, 8, 8])
-----------
***********
min of act: -67.29605865478516, max: 101.39864349365234, mean: -5.786664962768555
activations for idx 0 at layer layer4.0.conv1 have the following shape  torch.Size([200, 1, 512, 4, 4])
-----------
***********
min of act: -98.65239715576172, max: 129.72421264648438, mean: -5.914770603179932
activations for idx 0 at layer layer4.0.conv2 have the following shape  torch.Size([200, 1, 512, 4, 4])
-----------
***********
min of act: -21.894691467285156, max: 29.534542083740234, mean: -1.70014488697052
activations for idx 0 at layer layer4.0.shortcut.0 have the following shape  torch.Size([200, 1, 512, 4, 4])
-----------
***********
min of act: -95.82758331298828, max: 57.277530670166016, mean: -2.5788018703460693
activations for idx 0 at layer layer4.1.conv1 have the following shape  torch.Size([200, 1, 512, 4, 4])
-----------
***********
min of act: -45.273406982421875, max: 118.88858032226562, mean: -1.8047181367874146
activations for idx 0 at layer layer4.1.conv2 have the following shape  torch.Size([200, 1, 512, 4, 4])
-----------
***********
min of act: -32.8690185546875, max: 107.17804718017578, mean: 0.0026306326035410166
activations for idx 0 at layer linear have the following shape  torch.Size([200, 1, 10])
-----------
***********
min of act: -19.116561889648438, max: 18.00572967529297, mean: -0.01827942207455635
activations for idx 1 at layer conv1 have the following shape  torch.Size([200, 1, 64, 32, 32])
-----------
***********
min of act: -39.339317321777344, max: 16.761154174804688, mean: -2.3529930114746094
activations for idx 1 at layer layer1.0.conv1 have the following shape  torch.Size([200, 1, 64, 32, 32])
-----------
***********
min of act: -11.161051750183105, max: 22.1666316986084, mean: 0.1642465889453888
activations for idx 1 at layer layer1.0.conv2 have the following shape  torch.Size([200, 1, 64, 32, 32])
-----------
***********
min of act: -34.51709747314453, max: 20.063745498657227, mean: -2.648475170135498
activations for idx 1 at layer layer1.1.conv1 have the following shape  torch.Size([200, 1, 64, 32, 32])
-----------
***********
min of act: -8.578845977783203, max: 21.219310760498047, mean: 0.10957851260900497
activations for idx 1 at layer layer1.1.conv2 have the following shape  torch.Size([200, 1, 64, 32, 32])
-----------
***********
min of act: -39.33000564575195, max: 36.37345504760742, mean: -1.0462353229522705
activations for idx 1 at layer layer2.0.conv1 have the following shape  torch.Size([200, 1, 128, 16, 16])
-----------
***********
min of act: -56.63750076293945, max: 68.48543548583984, mean: -1.544688105583191
activations for idx 1 at layer layer2.0.conv2 have the following shape  torch.Size([200, 1, 128, 16, 16])
-----------
***********
min of act: -7.074402332305908, max: 18.836843490600586, mean: 0.11769940704107285
activations for idx 1 at layer layer2.0.shortcut.0 have the following shape  torch.Size([200, 1, 128, 16, 16])
-----------
***********
min of act: -85.33824157714844, max: 65.54788970947266, mean: -9.554935455322266
activations for idx 1 at layer layer2.1.conv1 have the following shape  torch.Size([200, 1, 128, 16, 16])
-----------
***********
min of act: -30.069725036621094, max: 80.55177307128906, mean: 0.07027926295995712
activations for idx 1 at layer layer2.1.conv2 have the following shape  torch.Size([200, 1, 128, 16, 16])
-----------
***********
min of act: -78.38081359863281, max: 103.59225463867188, mean: -5.075367450714111
activations for idx 1 at layer layer3.0.conv1 have the following shape  torch.Size([200, 1, 256, 8, 8])
-----------
***********
min of act: -97.44667053222656, max: 147.40635681152344, mean: -6.073375701904297
activations for idx 1 at layer layer3.0.conv2 have the following shape  torch.Size([200, 1, 256, 8, 8])
-----------
***********
min of act: -21.78856086730957, max: 43.79692459106445, mean: -0.5052369832992554
activations for idx 1 at layer layer3.0.shortcut.0 have the following shape  torch.Size([200, 1, 256, 8, 8])
-----------
***********
min of act: -135.53102111816406, max: 168.64181518554688, mean: -14.019136428833008
activations for idx 1 at layer layer3.1.conv1 have the following shape  torch.Size([200, 1, 256, 8, 8])
-----------
***********
min of act: -72.14907836914062, max: 147.73062133789062, mean: -3.0185160636901855
activations for idx 1 at layer layer3.1.conv2 have the following shape  torch.Size([200, 1, 256, 8, 8])
-----------
***********
min of act: -63.60818862915039, max: 114.22467041015625, mean: -6.006803512573242
activations for idx 1 at layer layer4.0.conv1 have the following shape  torch.Size([200, 1, 512, 4, 4])
-----------
***********
min of act: -109.81132507324219, max: 113.39813232421875, mean: -6.759781360626221
activations for idx 1 at layer layer4.0.conv2 have the following shape  torch.Size([200, 1, 512, 4, 4])
-----------
***********
min of act: -27.339012145996094, max: 28.48927116394043, mean: -2.043489456176758
activations for idx 1 at layer layer4.0.shortcut.0 have the following shape  torch.Size([200, 1, 512, 4, 4])
-----------
***********
min of act: -103.11064147949219, max: 93.5058822631836, mean: -2.6586015224456787
activations for idx 1 at layer layer4.1.conv1 have the following shape  torch.Size([200, 1, 512, 4, 4])
-----------
***********
min of act: -45.535560607910156, max: 117.62913513183594, mean: -1.8633103370666504
activations for idx 1 at layer layer4.1.conv2 have the following shape  torch.Size([200, 1, 512, 4, 4])
-----------
***********
min of act: -29.672405242919922, max: 105.02400207519531, mean: -0.012196602299809456
activations for idx 1 at layer linear have the following shape  torch.Size([200, 1, 10])
-----------
Activation Timer ends
------- Geometric Ensembling -------
Timer start

--------------- At layer index 0 ------------- 
 
Previous layer shape is  None
let's see the difference in layer names conv1 conv1
torch.Size([200, 1, 64, 32, 32]) shape of activations generally
reorder_dim is  [1, 2, 3, 0]
In layer conv1.weight: getting activation distance statistics
Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): 

Max : 26.305904388427734, Mean : 9.819664001464844, Min : 2.7041568756103516, Std: 3.796154499053955
returns a uniform measure of cardinality:  64
returns a uniform measure of cardinality:  64
Refactored ground metric calc
inside refactored
Processing the coordinates to form ground_metric
dont leave off the squaring of the ground metric
# of ground metric features is  204800
# of ground metric features in 0 is   204800
# of ground metric features in 1 is   204800
ground metric (m0) is  tensor([[ 823.8887,  815.2875,  705.7615,  ...,  573.7137,  694.9529,
          943.0483],
        [ 499.6594,  722.4330,  652.3332,  ...,  584.1769,  595.1254,
          778.1345],
        [ 896.4794, 1036.2487,  526.5516,  ...,  741.1161,  854.1968,
         1006.0294],
        ...,
        [ 502.5592,  755.5048,  794.0959,  ...,  657.5405,  584.4680,
          551.0128],
        [ 982.6627, 1181.5717,  992.3342,  ...,  916.5223, 1078.0051,
          863.4373],
        [ 870.4614,  838.9724,  565.2897,  ...,  563.7745,  831.3578,
         1006.1295]], device='cuda:0')
shape of T_var is  torch.Size([64, 64])
T_var before correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
marginals are  tensor([[63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        ...,
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996]],
       device='cuda:0')
T_var after correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
T_var stats: max 0.9999935626983643, min 0.0, mean 0.015624899417161942, std 0.12403393536806107 
Ratio of trace to the matrix sum:  tensor(0.0625, device='cuda:0')
Here, trace is 3.999974250793457 and matrix sum is 63.99958801269531 
Shape of aligned wt is  torch.Size([64, 3, 9])
Shape of fc_layer0_weight_data is  torch.Size([64, 3, 9])

--------------- At layer index 1 ------------- 
 
Previous layer shape is  torch.Size([64, 3, 3, 3])
let's see the difference in layer names layer1.0.conv1 layer1.0.conv1
torch.Size([200, 1, 64, 32, 32]) shape of activations generally
reorder_dim is  [1, 2, 3, 0]
In layer layer1.0.conv1.weight: getting activation distance statistics
Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): 

Max : 46.04827117919922, Mean : 17.71353530883789, Min : 5.110201358795166, Std: 6.815298557281494
shape of layer: model 0 torch.Size([64, 64, 9])
shape of layer: model 1 torch.Size([64, 64, 9])
shape of activations: model 0 torch.Size([64, 32, 32, 200])
shape of activations: model 1 torch.Size([64, 32, 32, 200])
shape of previous transport map torch.Size([64, 64])
doing nothing for skips
returns a uniform measure of cardinality:  64
returns a uniform measure of cardinality:  64
Refactored ground metric calc
inside refactored
Processing the coordinates to form ground_metric
dont leave off the squaring of the ground metric
# of ground metric features is  204800
# of ground metric features in 0 is   204800
# of ground metric features in 1 is   204800
ground metric (m0) is  tensor([[1230.4427, 1774.6293, 1579.2327,  ..., 1165.2883, 1800.3406,
         1811.1428],
        [1367.6805, 1915.9128, 1550.3070,  ..., 1484.3867, 1982.5767,
         2026.0186],
        [ 337.0462, 1871.4131, 1459.5239,  ..., 1700.6996, 2115.1494,
         1074.9742],
        ...,
        [1660.4724, 1525.4779, 1639.3041,  ..., 1728.8000, 1735.0817,
         1822.3925],
        [ 564.6736, 2262.6179, 1724.3320,  ..., 2067.4465, 2533.5896,
         1207.4980],
        [1894.9056, 1552.7258, 1436.1581,  ..., 1759.4148, 1904.3958,
         2071.3767]], device='cuda:0')
shape of T_var is  torch.Size([64, 64])
T_var before correction  tensor([[0.0000, 0.0000, 0.0000,  ..., 0.0156, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        ...,
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]],
       device='cuda:0')
marginals are  tensor([[63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        ...,
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996]],
       device='cuda:0')
T_var after correction  tensor([[0.0000, 0.0000, 0.0000,  ..., 1.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        ...,
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]],
       device='cuda:0')
T_var stats: max 0.9999935626983643, min 0.0, mean 0.015624898485839367, std 0.12403393536806107 
Ratio of trace to the matrix sum:  tensor(0.0156, device='cuda:0')
Here, trace is 0.9999935626983643 and matrix sum is 63.99958419799805 
Shape of aligned wt is  torch.Size([64, 64, 9])
Shape of fc_layer0_weight_data is  torch.Size([64, 64, 9])

--------------- At layer index 2 ------------- 
 
Previous layer shape is  torch.Size([64, 64, 3, 3])
let's see the difference in layer names layer1.0.conv2 layer1.0.conv2
torch.Size([200, 1, 64, 32, 32]) shape of activations generally
reorder_dim is  [1, 2, 3, 0]
In layer layer1.0.conv2.weight: getting activation distance statistics
Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): 

Max : 20.99070167541504, Mean : 7.68678617477417, Min : 1.9912254810333252, Std: 3.129244327545166
shape of layer: model 0 torch.Size([64, 64, 9])
shape of layer: model 1 torch.Size([64, 64, 9])
shape of activations: model 0 torch.Size([64, 32, 32, 200])
shape of activations: model 1 torch.Size([64, 32, 32, 200])
shape of previous transport map torch.Size([64, 64])
doing nothing for skips
returns a uniform measure of cardinality:  64
returns a uniform measure of cardinality:  64
Refactored ground metric calc
inside refactored
Processing the coordinates to form ground_metric
dont leave off the squaring of the ground metric
# of ground metric features is  204800
# of ground metric features in 0 is   204800
# of ground metric features in 1 is   204800
ground metric (m0) is  tensor([[777.4424, 585.2165, 581.1296,  ..., 552.6009, 585.0319, 818.8510],
        [619.1436, 538.0853, 545.8791,  ..., 528.7162, 567.8821, 746.0729],
        [801.5978, 674.1153, 419.0361,  ..., 621.5306, 672.7518, 796.1301],
        ...,
        [478.3471, 583.6340, 641.2249,  ..., 649.4100, 532.8078, 473.2034],
        [856.4809, 788.7650, 743.5609,  ..., 698.0983, 765.0619, 773.3025],
        [728.3837, 551.3005, 422.9585,  ..., 456.7693, 661.7441, 818.9379]],
       device='cuda:0')
shape of T_var is  torch.Size([64, 64])
T_var before correction  tensor([[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        ...,
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0156],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]],
       device='cuda:0')
marginals are  tensor([[63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        ...,
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996]],
       device='cuda:0')
T_var after correction  tensor([[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        ...,
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 1.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]],
       device='cuda:0')
T_var stats: max 0.9999935626983643, min 0.0, mean 0.015624899417161942, std 0.12403393536806107 
Ratio of trace to the matrix sum:  tensor(0.0312, device='cuda:0')
Here, trace is 1.9999871253967285 and matrix sum is 63.99958801269531 
Shape of aligned wt is  torch.Size([64, 64, 9])
Shape of fc_layer0_weight_data is  torch.Size([64, 64, 9])

--------------- At layer index 3 ------------- 
 
Previous layer shape is  torch.Size([64, 64, 3, 3])
let's see the difference in layer names layer1.1.conv1 layer1.1.conv1
torch.Size([200, 1, 64, 32, 32]) shape of activations generally
reorder_dim is  [1, 2, 3, 0]
In layer layer1.1.conv1.weight: getting activation distance statistics
Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): 

Max : 37.6721076965332, Mean : 16.19807243347168, Min : 5.08820915222168, Std: 5.6260905265808105
shape of layer: model 0 torch.Size([64, 64, 9])
shape of layer: model 1 torch.Size([64, 64, 9])
shape of activations: model 0 torch.Size([64, 32, 32, 200])
shape of activations: model 1 torch.Size([64, 32, 32, 200])
shape of previous transport map torch.Size([64, 64])
doing nothing for skips
returns a uniform measure of cardinality:  64
returns a uniform measure of cardinality:  64
Refactored ground metric calc
inside refactored
Processing the coordinates to form ground_metric
dont leave off the squaring of the ground metric
# of ground metric features is  204800
# of ground metric features in 0 is   204800
# of ground metric features in 1 is   204800
ground metric (m0) is  tensor([[1065.2611, 1391.2368,  981.9545,  ..., 1193.4048, 1446.5568,
         1318.3558],
        [1516.9712, 1826.8322, 1318.7031,  ..., 1790.2939, 1377.7836,
         1087.3206],
        [1888.6245, 2281.2866, 1436.7770,  ..., 1776.9388, 1369.9454,
         1358.8446],
        ...,
        [1198.0693, 1512.8374, 1056.9357,  ..., 1546.3901, 1407.8657,
         1296.0089],
        [1083.1857, 1564.2021,  824.3983,  ..., 1250.1680, 1338.1228,
         1392.9653],
        [1456.7052, 1873.7275, 1255.7908,  ..., 1599.0505,  788.1938,
         1478.8199]], device='cuda:0')
shape of T_var is  torch.Size([64, 64])
T_var before correction  tensor([[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        ...,
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0156, 0.0000]],
       device='cuda:0')
marginals are  tensor([[63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        ...,
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996]],
       device='cuda:0')
T_var after correction  tensor([[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        ...,
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 1.0000, 0.0000]],
       device='cuda:0')
T_var stats: max 0.9999935626983643, min 0.0, mean 0.015624899417161942, std 0.12403392791748047 
Ratio of trace to the matrix sum:  tensor(0.0156, device='cuda:0')
Here, trace is 0.9999935626983643 and matrix sum is 63.99958801269531 
Shape of aligned wt is  torch.Size([64, 64, 9])
Shape of fc_layer0_weight_data is  torch.Size([64, 64, 9])

--------------- At layer index 4 ------------- 
 
Previous layer shape is  torch.Size([64, 64, 3, 3])
let's see the difference in layer names layer1.1.conv2 layer1.1.conv2
torch.Size([200, 1, 64, 32, 32]) shape of activations generally
reorder_dim is  [1, 2, 3, 0]
In layer layer1.1.conv2.weight: getting activation distance statistics
Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): 

Max : 19.99361228942871, Mean : 7.235418796539307, Min : 1.8792579174041748, Std: 3.09464693069458
shape of layer: model 0 torch.Size([64, 64, 9])
shape of layer: model 1 torch.Size([64, 64, 9])
shape of activations: model 0 torch.Size([64, 32, 32, 200])
shape of activations: model 1 torch.Size([64, 32, 32, 200])
shape of previous transport map torch.Size([64, 64])
doing nothing for skips
returns a uniform measure of cardinality:  64
returns a uniform measure of cardinality:  64
Refactored ground metric calc
inside refactored
Processing the coordinates to form ground_metric
dont leave off the squaring of the ground metric
# of ground metric features is  204800
# of ground metric features in 0 is   204800
# of ground metric features in 1 is   204800
ground metric (m0) is  tensor([[706.5210, 489.2891, 480.3212,  ..., 432.1354, 512.6857, 828.7811],
        [650.0675, 522.9896, 493.9023,  ..., 485.3758, 562.0084, 800.6096],
        [752.6815, 627.2305, 387.1988,  ..., 523.8072, 610.1685, 824.4288],
        ...,
        [478.8063, 570.0978, 571.0106,  ..., 547.4300, 550.5914, 575.1278],
        [782.0881, 682.3680, 659.8893,  ..., 603.3186, 693.7133, 815.2039],
        [627.5742, 474.4393, 424.1832,  ..., 463.4251, 508.1932, 716.2452]],
       device='cuda:0')
shape of T_var is  torch.Size([64, 64])
T_var before correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
marginals are  tensor([[63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        ...,
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996]],
       device='cuda:0')
T_var after correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
T_var stats: max 0.9999935626983643, min 0.0, mean 0.015624899417161942, std 0.12403393536806107 
Ratio of trace to the matrix sum:  tensor(0.0312, device='cuda:0')
Here, trace is 1.9999871253967285 and matrix sum is 63.99958801269531 
Shape of aligned wt is  torch.Size([64, 64, 9])
Shape of fc_layer0_weight_data is  torch.Size([64, 64, 9])

--------------- At layer index 5 ------------- 
 
Previous layer shape is  torch.Size([64, 64, 3, 3])
let's see the difference in layer names layer2.0.conv1 layer2.0.conv1
torch.Size([200, 1, 128, 16, 16]) shape of activations generally
reorder_dim is  [1, 2, 3, 0]
In layer layer2.0.conv1.weight: getting activation distance statistics
Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): 

Max : 34.48009490966797, Mean : 13.961237907409668, Min : 3.606191635131836, Std: 5.466477394104004
shape of layer: model 0 torch.Size([128, 64, 9])
shape of layer: model 1 torch.Size([128, 64, 9])
shape of activations: model 0 torch.Size([128, 16, 16, 200])
shape of activations: model 1 torch.Size([128, 16, 16, 200])
shape of previous transport map torch.Size([64, 64])
saved skip T_var at layer 5 with shape torch.Size([128, 64, 3, 3])
shape of previous transport map now is torch.Size([64, 64])
returns a uniform measure of cardinality:  128
returns a uniform measure of cardinality:  128
Refactored ground metric calc
inside refactored
Processing the coordinates to form ground_metric
dont leave off the squaring of the ground metric
# of ground metric features is  51200
# of ground metric features in 0 is   51200
# of ground metric features in 1 is   51200
ground metric (m0) is  tensor([[1117.8319, 1005.5700,  763.1265,  ...,  751.9706,  766.5610,
          831.1273],
        [ 913.2011,  880.7489,  688.4888,  ...,  754.2366,  667.5234,
          733.6624],
        [ 970.3942,  920.1857,  781.9509,  ...,  950.8889,  892.1124,
          850.3146],
        ...,
        [ 903.0994,  801.8763,  623.3414,  ...,  625.4452,  486.6873,
          630.5886],
        [1218.5221,  929.0884,  682.1146,  ...,  728.3314,  861.2383,
          916.5295],
        [1150.5474,  948.6783,  729.1368,  ...,  883.3538,  985.3044,
          897.4763]], device='cuda:0')
shape of T_var is  torch.Size([128, 128])
T_var before correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
marginals are  tensor([[127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        ...,
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984]],
       device='cuda:0')
T_var after correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
T_var stats: max 0.9999872446060181, min 0.0, mean 0.007812400348484516, std 0.08804396539926529 
Ratio of trace to the matrix sum:  tensor(0.0156, device='cuda:0')
Here, trace is 1.9999744892120361 and matrix sum is 127.99836730957031 
Shape of aligned wt is  torch.Size([128, 64, 9])
Shape of fc_layer0_weight_data is  torch.Size([128, 64, 9])

--------------- At layer index 6 ------------- 
 
Previous layer shape is  torch.Size([128, 64, 3, 3])
let's see the difference in layer names layer2.0.conv2 layer2.0.conv2
torch.Size([200, 1, 128, 16, 16]) shape of activations generally
reorder_dim is  [1, 2, 3, 0]
In layer layer2.0.conv2.weight: getting activation distance statistics
Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): 

Max : 64.25588989257812, Mean : 26.548507690429688, Min : 7.2687835693359375, Std: 10.015398025512695
shape of layer: model 0 torch.Size([128, 128, 9])
shape of layer: model 1 torch.Size([128, 128, 9])
shape of activations: model 0 torch.Size([128, 16, 16, 200])
shape of activations: model 1 torch.Size([128, 16, 16, 200])
shape of previous transport map torch.Size([128, 128])
doing nothing for skips
returns a uniform measure of cardinality:  128
returns a uniform measure of cardinality:  128
Refactored ground metric calc
inside refactored
Processing the coordinates to form ground_metric
dont leave off the squaring of the ground metric
# of ground metric features is  51200
# of ground metric features in 0 is   51200
# of ground metric features in 1 is   51200
ground metric (m0) is  tensor([[1899.8507, 1432.0627, 1727.8987,  ..., 1690.5541,  927.0530,
         1979.4679],
        [2033.0764, 1208.0818, 1930.6483,  ..., 2006.9268, 1679.5691,
         1460.1293],
        [1868.7856, 1940.8438, 1748.1543,  ..., 1662.7726, 1570.0643,
         1975.5333],
        ...,
        [1802.3300, 1378.8789, 1863.7646,  ..., 1848.1984, 1663.8152,
         1631.9613],
        [1472.1298, 1410.2520, 1568.5969,  ..., 1624.4283, 1511.3943,
         1516.1406],
        [2107.8271, 1601.2401, 1945.0212,  ..., 1771.5835, 1740.9249,
         1892.1008]], device='cuda:0')
shape of T_var is  torch.Size([128, 128])
T_var before correction  tensor([[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0078, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        ...,
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]],
       device='cuda:0')
marginals are  tensor([[127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        ...,
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984]],
       device='cuda:0')
T_var after correction  tensor([[0.0000, 0.0000, 0.0000,  ..., 0.0000, 1.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        ...,
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]],
       device='cuda:0')
T_var stats: max 0.9999872446060181, min 0.0, mean 0.007812400348484516, std 0.08804396539926529 
Ratio of trace to the matrix sum:  tensor(0.0234, device='cuda:0')
Here, trace is 2.9999618530273438 and matrix sum is 127.99836730957031 
Shape of aligned wt is  torch.Size([128, 128, 9])
Shape of fc_layer0_weight_data is  torch.Size([128, 128, 9])

--------------- At layer index 7 ------------- 
 
Previous layer shape is  torch.Size([128, 128, 3, 3])
let's see the difference in layer names layer2.0.shortcut.0 layer2.0.shortcut.0
torch.Size([200, 1, 128, 16, 16]) shape of activations generally
reorder_dim is  [1, 2, 3, 0]
In layer layer2.0.shortcut.0.weight: getting activation distance statistics
Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): 

Max : 8.675606727600098, Mean : 3.544717311859131, Min : 1.0014023780822754, Std: 1.3794620037078857
shape of layer: model 0 torch.Size([128, 64, 1])
shape of layer: model 1 torch.Size([128, 64, 1])
shape of activations: model 0 torch.Size([128, 16, 16, 200])
shape of activations: model 1 torch.Size([128, 16, 16, 200])
shape of previous transport map torch.Size([128, 128])
utilizing skip T_var saved from layer layer 5 with shape torch.Size([64, 64])
shape of previous transport map now is torch.Size([64, 64])
returns a uniform measure of cardinality:  128
returns a uniform measure of cardinality:  128
Refactored ground metric calc
inside refactored
Processing the coordinates to form ground_metric
dont leave off the squaring of the ground metric
# of ground metric features is  51200
# of ground metric features in 0 is   51200
# of ground metric features in 1 is   51200
ground metric (m0) is  tensor([[212.7899, 176.8693, 283.9082,  ..., 263.5981, 124.9684, 344.2893],
        [273.7189, 142.5436, 284.6198,  ..., 389.0692, 251.1888, 270.4120],
        [235.0079, 238.6705, 309.4803,  ..., 171.6113, 117.4971, 395.1138],
        ...,
        [245.8001, 160.9339, 305.0012,  ..., 338.0424, 221.3889, 300.5850],
        [137.9309, 160.6247, 210.6449,  ..., 287.9448, 207.0535, 166.2658],
        [204.1529, 169.9808, 265.2859,  ..., 215.1294, 163.1462, 314.1328]],
       device='cuda:0')
shape of T_var is  torch.Size([128, 128])
T_var before correction  tensor([[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0078, 0.0000],
        ...,
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]],
       device='cuda:0')
marginals are  tensor([[127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        ...,
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984]],
       device='cuda:0')
T_var after correction  tensor([[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 1.0000, 0.0000],
        ...,
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]],
       device='cuda:0')
T_var stats: max 0.9999872446060181, min 0.0, mean 0.007812400348484516, std 0.08804396539926529 
Ratio of trace to the matrix sum:  tensor(0.0156, device='cuda:0')
Here, trace is 1.9999744892120361 and matrix sum is 127.99836730957031 
Shape of aligned wt is  torch.Size([128, 64, 1])
Shape of fc_layer0_weight_data is  torch.Size([128, 64, 1])

--------------- At layer index 8 ------------- 
 
Previous layer shape is  torch.Size([128, 64, 1, 1])
let's see the difference in layer names layer2.1.conv1 layer2.1.conv1
torch.Size([200, 1, 128, 16, 16]) shape of activations generally
reorder_dim is  [1, 2, 3, 0]
In layer layer2.1.conv1.weight: getting activation distance statistics
Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): 

Max : 80.00914001464844, Mean : 33.35114288330078, Min : 9.948689460754395, Std: 12.311355590820312
shape of layer: model 0 torch.Size([128, 128, 9])
shape of layer: model 1 torch.Size([128, 128, 9])
shape of activations: model 0 torch.Size([128, 16, 16, 200])
shape of activations: model 1 torch.Size([128, 16, 16, 200])
shape of previous transport map torch.Size([128, 128])
averaging multiple T_var's
returns a uniform measure of cardinality:  128
returns a uniform measure of cardinality:  128
Refactored ground metric calc
inside refactored
Processing the coordinates to form ground_metric
dont leave off the squaring of the ground metric
# of ground metric features is  51200
# of ground metric features in 0 is   51200
# of ground metric features in 1 is   51200
ground metric (m0) is  tensor([[2433.2195, 2361.2141, 2519.8997,  ..., 1988.9772, 2011.4830,
         2427.2671],
        [2025.5759, 1870.6725, 2568.3035,  ..., 1829.2980, 1551.2328,
         2095.3459],
        [2220.4099, 1655.3317, 2328.9019,  ..., 1285.1926, 1754.7202,
         2004.7047],
        ...,
        [2444.8979, 1565.9136, 2678.2639,  ..., 1711.3594, 1533.9918,
         2039.8025],
        [2385.2405, 2122.1692, 2797.3008,  ..., 1885.7701, 2060.0105,
         2417.6653],
        [2133.5249, 2232.7771, 2280.9624,  ..., 2115.6924, 2010.6614,
         2118.0859]], device='cuda:0')
shape of T_var is  torch.Size([128, 128])
T_var before correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
marginals are  tensor([[127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        ...,
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984]],
       device='cuda:0')
T_var after correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
T_var stats: max 0.9999872446060181, min 0.0, mean 0.007812400348484516, std 0.08804396539926529 
Ratio of trace to the matrix sum:  tensor(0.0156, device='cuda:0')
Here, trace is 1.9999744892120361 and matrix sum is 127.99836730957031 
Shape of aligned wt is  torch.Size([128, 128, 9])
Shape of fc_layer0_weight_data is  torch.Size([128, 128, 9])

--------------- At layer index 9 ------------- 
 
Previous layer shape is  torch.Size([128, 128, 3, 3])
let's see the difference in layer names layer2.1.conv2 layer2.1.conv2
torch.Size([200, 1, 128, 16, 16]) shape of activations generally
reorder_dim is  [1, 2, 3, 0]
In layer layer2.1.conv2.weight: getting activation distance statistics
Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): 

Max : 43.48748016357422, Mean : 14.568487167358398, Min : 2.911346435546875, Std: 7.067505836486816
shape of layer: model 0 torch.Size([128, 128, 9])
shape of layer: model 1 torch.Size([128, 128, 9])
shape of activations: model 0 torch.Size([128, 16, 16, 200])
shape of activations: model 1 torch.Size([128, 16, 16, 200])
shape of previous transport map torch.Size([128, 128])
doing nothing for skips
returns a uniform measure of cardinality:  128
returns a uniform measure of cardinality:  128
Refactored ground metric calc
inside refactored
Processing the coordinates to form ground_metric
dont leave off the squaring of the ground metric
# of ground metric features is  51200
# of ground metric features in 0 is   51200
# of ground metric features in 1 is   51200
ground metric (m0) is  tensor([[1049.3085,  879.6328, 1096.5122,  ...,  944.0914,  744.2236,
         1088.5770],
        [1187.1157,  827.1138, 1163.8345,  ..., 1064.2485, 1064.8762,
          934.7716],
        [ 955.6675, 1014.6396,  952.8408,  ...,  879.9196,  830.0007,
         1001.7352],
        ...,
        [1047.4423,  981.8853, 1113.5542,  ..., 1030.4237,  979.8470,
         1036.0565],
        [ 872.3984,  896.4035,  956.8907,  ...,  831.9591,  818.4997,
          830.5481],
        [1060.5065, 1025.8551, 1095.8871,  ...,  931.3055,  942.4636,
         1064.5347]], device='cuda:0')
shape of T_var is  torch.Size([128, 128])
T_var before correction  tensor([[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0078, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        ...,
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]],
       device='cuda:0')
marginals are  tensor([[127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        ...,
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984]],
       device='cuda:0')
T_var after correction  tensor([[0.0000, 0.0000, 0.0000,  ..., 0.0000, 1.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        ...,
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]],
       device='cuda:0')
T_var stats: max 0.9999872446060181, min 0.0, mean 0.007812400348484516, std 0.08804396539926529 
Ratio of trace to the matrix sum:  tensor(0.0156, device='cuda:0')
Here, trace is 1.9999744892120361 and matrix sum is 127.99836730957031 
Shape of aligned wt is  torch.Size([128, 128, 9])
Shape of fc_layer0_weight_data is  torch.Size([128, 128, 9])

--------------- At layer index 10 ------------- 
 
Previous layer shape is  torch.Size([128, 128, 3, 3])
let's see the difference in layer names layer3.0.conv1 layer3.0.conv1
torch.Size([200, 1, 256, 8, 8]) shape of activations generally
reorder_dim is  [1, 2, 3, 0]
In layer layer3.0.conv1.weight: getting activation distance statistics
Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): 

Max : 63.94253921508789, Mean : 24.7738037109375, Min : 6.370980739593506, Std: 10.062156677246094
shape of layer: model 0 torch.Size([256, 128, 9])
shape of layer: model 1 torch.Size([256, 128, 9])
shape of activations: model 0 torch.Size([256, 8, 8, 200])
shape of activations: model 1 torch.Size([256, 8, 8, 200])
shape of previous transport map torch.Size([128, 128])
saved skip T_var at layer 10 with shape torch.Size([256, 128, 3, 3])
shape of previous transport map now is torch.Size([128, 128])
returns a uniform measure of cardinality:  256
returns a uniform measure of cardinality:  256
Refactored ground metric calc
inside refactored
Processing the coordinates to form ground_metric
dont leave off the squaring of the ground metric
# of ground metric features is  12800
# of ground metric features in 0 is   12800
# of ground metric features in 1 is   12800
ground metric (m0) is  tensor([[1111.1654, 1139.9519, 1025.9233,  ..., 1155.1080, 1123.6462,
         1108.4635],
        [1012.7047, 1136.4210,  894.7308,  ..., 1168.9098, 1176.4532,
         1070.8854],
        [1129.6143,  935.4041, 1058.9607,  ..., 1002.7236, 1195.9739,
         1198.9578],
        ...,
        [ 872.7816, 1207.9130, 1152.1075,  ..., 1204.2195, 1001.5905,
         1058.0676],
        [1226.0010, 1075.6132, 1254.3187,  ..., 1270.6516, 1194.7378,
         1237.4189],
        [1252.7616,  971.6481,  950.9108,  ..., 1023.2023, 1305.5461,
         1230.7084]], device='cuda:0')
shape of T_var is  torch.Size([256, 256])
T_var before correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
marginals are  tensor([[255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        ...,
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934]],
       device='cuda:0')
T_var after correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
T_var stats: max 0.9999743700027466, min 0.0, mean 0.003906149882823229, std 0.06237669289112091 
Ratio of trace to the matrix sum:  tensor(0.0117, device='cuda:0')
Here, trace is 2.9999232292175293 and matrix sum is 255.99343872070312 
Shape of aligned wt is  torch.Size([256, 128, 9])
Shape of fc_layer0_weight_data is  torch.Size([256, 128, 9])

--------------- At layer index 11 ------------- 
 
Previous layer shape is  torch.Size([256, 128, 3, 3])
let's see the difference in layer names layer3.0.conv2 layer3.0.conv2
torch.Size([200, 1, 256, 8, 8]) shape of activations generally
reorder_dim is  [1, 2, 3, 0]
In layer layer3.0.conv2.weight: getting activation distance statistics
Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): 

Max : 92.38143157958984, Mean : 33.89318084716797, Min : 8.459432601928711, Std: 14.497169494628906
shape of layer: model 0 torch.Size([256, 256, 9])
shape of layer: model 1 torch.Size([256, 256, 9])
shape of activations: model 0 torch.Size([256, 8, 8, 200])
shape of activations: model 1 torch.Size([256, 8, 8, 200])
shape of previous transport map torch.Size([256, 256])
doing nothing for skips
returns a uniform measure of cardinality:  256
returns a uniform measure of cardinality:  256
Refactored ground metric calc
inside refactored
Processing the coordinates to form ground_metric
dont leave off the squaring of the ground metric
# of ground metric features is  12800
# of ground metric features in 0 is   12800
# of ground metric features in 1 is   12800
ground metric (m0) is  tensor([[1534.6886, 1345.1407, 1008.7850,  ..., 1064.0898, 1300.3154,
         1471.8259],
        [1600.8187, 1386.1198, 1302.2760,  ..., 1203.7607, 1303.9449,
         1461.7231],
        [1594.8564, 1434.0657, 1759.8055,  ..., 1606.9601, 1629.0895,
         2079.4927],
        ...,
        [1594.3616, 1173.0289,  953.1200,  ...,  729.6256, 1083.0284,
         1218.9214],
        [1856.8499, 1485.5299, 1269.6261,  ..., 1136.7159, 1342.1660,
         1382.3428],
        [1983.4279, 1576.8461, 1738.5112,  ..., 1581.7666, 1835.8561,
         1922.2377]], device='cuda:0')
shape of T_var is  torch.Size([256, 256])
T_var before correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
marginals are  tensor([[255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        ...,
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934]],
       device='cuda:0')
T_var after correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
T_var stats: max 0.9999743700027466, min 0.0, mean 0.003906149882823229, std 0.06237669289112091 
Ratio of trace to the matrix sum:  tensor(0.0078, device='cuda:0')
Here, trace is 1.9999487400054932 and matrix sum is 255.99343872070312 
Shape of aligned wt is  torch.Size([256, 256, 9])
Shape of fc_layer0_weight_data is  torch.Size([256, 256, 9])

--------------- At layer index 12 ------------- 
 
Previous layer shape is  torch.Size([256, 256, 3, 3])
let's see the difference in layer names layer3.0.shortcut.0 layer3.0.shortcut.0
torch.Size([200, 1, 256, 8, 8]) shape of activations generally
reorder_dim is  [1, 2, 3, 0]
In layer layer3.0.shortcut.0.weight: getting activation distance statistics
Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): 

Max : 21.507526397705078, Mean : 8.833944320678711, Min : 2.2481236457824707, Std: 3.419567108154297
shape of layer: model 0 torch.Size([256, 128, 1])
shape of layer: model 1 torch.Size([256, 128, 1])
shape of activations: model 0 torch.Size([256, 8, 8, 200])
shape of activations: model 1 torch.Size([256, 8, 8, 200])
shape of previous transport map torch.Size([256, 256])
utilizing skip T_var saved from layer layer 10 with shape torch.Size([128, 128])
shape of previous transport map now is torch.Size([128, 128])
returns a uniform measure of cardinality:  256
returns a uniform measure of cardinality:  256
Refactored ground metric calc
inside refactored
Processing the coordinates to form ground_metric
dont leave off the squaring of the ground metric
# of ground metric features is  12800
# of ground metric features in 0 is   12800
# of ground metric features in 1 is   12800
ground metric (m0) is  tensor([[301.3070, 357.1188, 216.7685,  ..., 279.5176, 240.4060, 410.8896],
        [429.9754, 318.2477, 308.5085,  ..., 201.1445, 318.5617, 313.3685],
        [337.7202, 267.3802, 367.7629,  ..., 341.5398, 401.5772, 603.6871],
        ...,
        [376.2563, 195.7914, 194.4614,  ..., 122.0273, 260.2234, 333.8397],
        [492.6295, 339.9843, 339.1325,  ..., 220.3523, 384.6882, 302.0856],
        [535.6284, 288.8289, 402.6350,  ..., 283.0544, 484.2793, 469.9424]],
       device='cuda:0')
shape of T_var is  torch.Size([256, 256])
T_var before correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
marginals are  tensor([[255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        ...,
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934]],
       device='cuda:0')
T_var after correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
T_var stats: max 0.9999743700027466, min 0.0, mean 0.003906149882823229, std 0.06237669289112091 
Ratio of trace to the matrix sum:  tensor(0.0078, device='cuda:0')
Here, trace is 1.9999487400054932 and matrix sum is 255.99343872070312 
Shape of aligned wt is  torch.Size([256, 128, 1])
Shape of fc_layer0_weight_data is  torch.Size([256, 128, 1])

--------------- At layer index 13 ------------- 
 
Previous layer shape is  torch.Size([256, 128, 1, 1])
let's see the difference in layer names layer3.1.conv1 layer3.1.conv1
torch.Size([200, 1, 256, 8, 8]) shape of activations generally
reorder_dim is  [1, 2, 3, 0]
In layer layer3.1.conv1.weight: getting activation distance statistics
Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): 

Max : 104.03056335449219, Mean : 37.864830017089844, Min : 9.7086181640625, Std: 16.28255844116211
shape of layer: model 0 torch.Size([256, 256, 9])
shape of layer: model 1 torch.Size([256, 256, 9])
shape of activations: model 0 torch.Size([256, 8, 8, 200])
shape of activations: model 1 torch.Size([256, 8, 8, 200])
shape of previous transport map torch.Size([256, 256])
averaging multiple T_var's
returns a uniform measure of cardinality:  256
returns a uniform measure of cardinality:  256
Refactored ground metric calc
inside refactored
Processing the coordinates to form ground_metric
dont leave off the squaring of the ground metric
# of ground metric features is  12800
# of ground metric features in 0 is   12800
# of ground metric features in 1 is   12800
ground metric (m0) is  tensor([[1456.1133, 1260.5995, 1821.2136,  ..., 1725.2573, 1985.9357,
         1663.4401],
        [1598.8663, 1475.0082, 1692.7214,  ..., 1743.9122, 1904.9767,
         1563.2610],
        [1422.3730, 1392.0599, 1634.9792,  ..., 1653.4926, 1846.9667,
         1623.2594],
        ...,
        [1605.3563, 1673.4307, 1894.5486,  ..., 1648.8451, 2057.9705,
         1798.0411],
        [1796.2195, 1789.2067, 1779.8921,  ..., 1528.3782, 1931.4137,
         1668.3180],
        [1375.7604, 1321.6279, 1573.2985,  ..., 1669.1931, 1858.2001,
         1565.9874]], device='cuda:0')
shape of T_var is  torch.Size([256, 256])
T_var before correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
marginals are  tensor([[255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        ...,
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934]],
       device='cuda:0')
T_var after correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
T_var stats: max 0.9999743700027466, min 0.0, mean 0.003906149882823229, std 0.06237669289112091 
Ratio of trace to the matrix sum:  tensor(0., device='cuda:0')
Here, trace is 0.0 and matrix sum is 255.99343872070312 
Shape of aligned wt is  torch.Size([256, 256, 9])
Shape of fc_layer0_weight_data is  torch.Size([256, 256, 9])

--------------- At layer index 14 ------------- 
 
Previous layer shape is  torch.Size([256, 256, 3, 3])
let's see the difference in layer names layer3.1.conv2 layer3.1.conv2
torch.Size([200, 1, 256, 8, 8]) shape of activations generally
reorder_dim is  [1, 2, 3, 0]
In layer layer3.1.conv2.weight: getting activation distance statistics
Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): 

Max : 69.350830078125, Mean : 19.0426025390625, Min : 3.607942819595337, Std: 10.728548049926758
shape of layer: model 0 torch.Size([256, 256, 9])
shape of layer: model 1 torch.Size([256, 256, 9])
shape of activations: model 0 torch.Size([256, 8, 8, 200])
shape of activations: model 1 torch.Size([256, 8, 8, 200])
shape of previous transport map torch.Size([256, 256])
doing nothing for skips
returns a uniform measure of cardinality:  256
returns a uniform measure of cardinality:  256
Refactored ground metric calc
inside refactored
Processing the coordinates to form ground_metric
dont leave off the squaring of the ground metric
# of ground metric features is  12800
# of ground metric features in 0 is   12800
# of ground metric features in 1 is   12800
ground metric (m0) is  tensor([[ 905.9089,  880.4583,  728.6189,  ...,  811.6478,  866.3436,
          994.6477],
        [ 933.4526,  912.0013,  785.2454,  ...,  742.0723,  820.0770,
          961.4824],
        [ 977.6290,  833.4758,  811.3944,  ...,  769.6686,  875.5346,
         1067.1381],
        ...,
        [ 862.6445,  733.7391,  615.4823,  ...,  474.7420,  648.9371,
          789.4444],
        [1050.7706,  951.1003,  829.8730,  ...,  844.2518,  873.6126,
          965.8403],
        [ 935.1357,  842.5307,  766.7418,  ...,  723.6111,  846.7958,
          962.7711]], device='cuda:0')
shape of T_var is  torch.Size([256, 256])
T_var before correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
marginals are  tensor([[255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        ...,
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934]],
       device='cuda:0')
T_var after correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
T_var stats: max 0.9999743700027466, min 0.0, mean 0.003906149882823229, std 0.06237669289112091 
Ratio of trace to the matrix sum:  tensor(0.0039, device='cuda:0')
Here, trace is 0.9999743700027466 and matrix sum is 255.99343872070312 
Shape of aligned wt is  torch.Size([256, 256, 9])
Shape of fc_layer0_weight_data is  torch.Size([256, 256, 9])

--------------- At layer index 15 ------------- 
 
Previous layer shape is  torch.Size([256, 256, 3, 3])
let's see the difference in layer names layer4.0.conv1 layer4.0.conv1
torch.Size([200, 1, 512, 4, 4]) shape of activations generally
reorder_dim is  [1, 2, 3, 0]
In layer layer4.0.conv1.weight: getting activation distance statistics
Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): 

Max : 52.39492416381836, Mean : 16.05187225341797, Min : 2.7977001667022705, Std: 8.209081649780273
shape of layer: model 0 torch.Size([512, 256, 9])
shape of layer: model 1 torch.Size([512, 256, 9])
shape of activations: model 0 torch.Size([512, 4, 4, 200])
shape of activations: model 1 torch.Size([512, 4, 4, 200])
shape of previous transport map torch.Size([256, 256])
saved skip T_var at layer 15 with shape torch.Size([512, 256, 3, 3])
shape of previous transport map now is torch.Size([256, 256])
returns a uniform measure of cardinality:  512
returns a uniform measure of cardinality:  512
Refactored ground metric calc
inside refactored
Processing the coordinates to form ground_metric
dont leave off the squaring of the ground metric
# of ground metric features is  3200
# of ground metric features in 0 is   3200
# of ground metric features in 1 is   3200
ground metric (m0) is  tensor([[445.6955, 480.7390, 452.4637,  ..., 345.0188, 442.6006, 455.9734],
        [424.9759, 417.4261, 515.4103,  ..., 441.2517, 398.1910, 450.4137],
        [501.1575, 557.5177, 533.0869,  ..., 477.9522, 464.8225, 517.0875],
        ...,
        [461.8866, 439.3110, 567.4501,  ..., 492.9948, 488.6202, 499.0795],
        [523.9341, 546.5616, 527.9351,  ..., 426.2899, 486.1743, 493.7668],
        [472.3321, 482.5453, 490.1283,  ..., 387.6014, 444.1664, 491.9425]],
       device='cuda:0')
shape of T_var is  torch.Size([512, 512])
T_var before correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
marginals are  tensor([[511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        ...,
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738]],
       device='cuda:0')
T_var after correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
T_var stats: max 0.9999488592147827, min 0.0, mean 0.0019530251156538725, std 0.044148821383714676 
Ratio of trace to the matrix sum:  tensor(0.0020, device='cuda:0')
Here, trace is 0.9999488592147827 and matrix sum is 511.97381591796875 
Shape of aligned wt is  torch.Size([512, 256, 9])
Shape of fc_layer0_weight_data is  torch.Size([512, 256, 9])

--------------- At layer index 16 ------------- 
 
Previous layer shape is  torch.Size([512, 256, 3, 3])
let's see the difference in layer names layer4.0.conv2 layer4.0.conv2
torch.Size([200, 1, 512, 4, 4]) shape of activations generally
reorder_dim is  [1, 2, 3, 0]
In layer layer4.0.conv2.weight: getting activation distance statistics
Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): 

Max : 58.8126335144043, Mean : 16.503036499023438, Min : 2.7553205490112305, Std: 9.1542387008667
shape of layer: model 0 torch.Size([512, 512, 9])
shape of layer: model 1 torch.Size([512, 512, 9])
shape of activations: model 0 torch.Size([512, 4, 4, 200])
shape of activations: model 1 torch.Size([512, 4, 4, 200])
shape of previous transport map torch.Size([512, 512])
doing nothing for skips
returns a uniform measure of cardinality:  512
returns a uniform measure of cardinality:  512
Refactored ground metric calc
inside refactored
Processing the coordinates to form ground_metric
dont leave off the squaring of the ground metric
# of ground metric features is  3200
# of ground metric features in 0 is   3200
# of ground metric features in 1 is   3200
ground metric (m0) is  tensor([[377.1104, 685.5284, 338.8130,  ..., 668.2831, 513.4731, 533.0674],
        [424.6360, 537.4277, 456.1040,  ..., 641.1440, 526.9479, 525.8859],
        [477.8305, 648.8488, 501.7599,  ..., 712.6720, 725.8804, 555.4002],
        ...,
        [585.5410, 698.9964, 549.5514,  ..., 707.4189, 600.9152, 638.3128],
        [562.5135, 680.7366, 542.8414,  ..., 677.4731, 605.4041, 623.3004],
        [576.2801, 659.8287, 577.4545,  ..., 690.5204, 698.1248, 645.4808]],
       device='cuda:0')
shape of T_var is  torch.Size([512, 512])
T_var before correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
marginals are  tensor([[511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        ...,
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738]],
       device='cuda:0')
T_var after correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
T_var stats: max 0.9999488592147827, min 0.0, mean 0.0019530251156538725, std 0.044148821383714676 
Ratio of trace to the matrix sum:  tensor(0.0020, device='cuda:0')
Here, trace is 0.9999488592147827 and matrix sum is 511.97381591796875 
Shape of aligned wt is  torch.Size([512, 512, 9])
Shape of fc_layer0_weight_data is  torch.Size([512, 512, 9])

--------------- At layer index 17 ------------- 
 
Previous layer shape is  torch.Size([512, 512, 3, 3])
let's see the difference in layer names layer4.0.shortcut.0 layer4.0.shortcut.0
torch.Size([200, 1, 512, 4, 4]) shape of activations generally
reorder_dim is  [1, 2, 3, 0]
In layer layer4.0.shortcut.0.weight: getting activation distance statistics
Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): 

Max : 15.445323944091797, Mean : 5.297582626342773, Min : 1.0357680320739746, Std: 2.445105791091919
shape of layer: model 0 torch.Size([512, 256, 1])
shape of layer: model 1 torch.Size([512, 256, 1])
shape of activations: model 0 torch.Size([512, 4, 4, 200])
shape of activations: model 1 torch.Size([512, 4, 4, 200])
shape of previous transport map torch.Size([512, 512])
utilizing skip T_var saved from layer layer 15 with shape torch.Size([256, 256])
shape of previous transport map now is torch.Size([256, 256])
returns a uniform measure of cardinality:  512
returns a uniform measure of cardinality:  512
Refactored ground metric calc
inside refactored
Processing the coordinates to form ground_metric
dont leave off the squaring of the ground metric
# of ground metric features is  3200
# of ground metric features in 0 is   3200
# of ground metric features in 1 is   3200
ground metric (m0) is  tensor([[105.7134, 234.0448, 107.3719,  ..., 243.7357, 158.4961, 131.1189],
        [152.0319, 145.6687, 159.6804,  ..., 162.0939, 148.9327, 182.3992],
        [141.7796, 208.5903, 154.8235,  ..., 207.0945, 160.8291, 160.0148],
        ...,
        [130.0119, 186.7890, 128.1941,  ..., 196.4380, 144.1273, 164.0202],
        [141.8063, 187.9344, 134.6560,  ..., 203.6286, 147.4483, 182.0710],
        [150.3152, 185.4137, 153.9518,  ..., 180.4885, 167.2209, 187.0489]],
       device='cuda:0')
shape of T_var is  torch.Size([512, 512])
T_var before correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
marginals are  tensor([[511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        ...,
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738]],
       device='cuda:0')
T_var after correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
T_var stats: max 0.9999488592147827, min 0.0, mean 0.0019530251156538725, std 0.044148821383714676 
Ratio of trace to the matrix sum:  tensor(0., device='cuda:0')
Here, trace is 0.0 and matrix sum is 511.97381591796875 
Shape of aligned wt is  torch.Size([512, 256, 1])
Shape of fc_layer0_weight_data is  torch.Size([512, 256, 1])

--------------- At layer index 18 ------------- 
 
Previous layer shape is  torch.Size([512, 256, 1, 1])
let's see the difference in layer names layer4.1.conv1 layer4.1.conv1
torch.Size([200, 1, 512, 4, 4]) shape of activations generally
reorder_dim is  [1, 2, 3, 0]
In layer layer4.1.conv1.weight: getting activation distance statistics
Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): 

Max : 35.10620880126953, Mean : 8.471050262451172, Min : 1.1809303760528564, Std: 5.669946670532227
shape of layer: model 0 torch.Size([512, 512, 9])
shape of layer: model 1 torch.Size([512, 512, 9])
shape of activations: model 0 torch.Size([512, 4, 4, 200])
shape of activations: model 1 torch.Size([512, 4, 4, 200])
shape of previous transport map torch.Size([512, 512])
averaging multiple T_var's
returns a uniform measure of cardinality:  512
returns a uniform measure of cardinality:  512
Refactored ground metric calc
inside refactored
Processing the coordinates to form ground_metric
dont leave off the squaring of the ground metric
# of ground metric features is  3200
# of ground metric features in 0 is   3200
# of ground metric features in 1 is   3200
ground metric (m0) is  tensor([[234.3887,  73.2699, 238.6151,  ..., 172.8172, 273.3054, 422.4964],
        [263.3229, 329.4271, 286.0644,  ..., 325.9837, 304.4368, 411.4967],
        [243.9019, 202.8515, 261.5703,  ..., 212.5703, 301.5627, 402.0004],
        ...,
        [350.0890, 347.9169, 317.5611,  ..., 383.8732, 407.5913, 453.1219],
        [239.2213, 260.9038, 242.1352,  ..., 255.7401, 293.1817, 320.9583],
        [209.4442, 212.1902, 237.7157,  ..., 215.6403, 271.0826, 375.3942]],
       device='cuda:0')
shape of T_var is  torch.Size([512, 512])
T_var before correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
marginals are  tensor([[511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        ...,
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738]],
       device='cuda:0')
T_var after correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
T_var stats: max 0.9999488592147827, min 0.0, mean 0.0019530251156538725, std 0.044148821383714676 
Ratio of trace to the matrix sum:  tensor(0., device='cuda:0')
Here, trace is 0.0 and matrix sum is 511.97381591796875 
Shape of aligned wt is  torch.Size([512, 512, 9])
Shape of fc_layer0_weight_data is  torch.Size([512, 512, 9])

--------------- At layer index 19 ------------- 
 
Previous layer shape is  torch.Size([512, 512, 3, 3])
let's see the difference in layer names layer4.1.conv2 layer4.1.conv2
torch.Size([200, 1, 512, 4, 4]) shape of activations generally
reorder_dim is  [1, 2, 3, 0]
In layer layer4.1.conv2.weight: getting activation distance statistics
Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): 

Max : 41.76462936401367, Mean : 7.060699939727783, Min : 0.6546088457107544, Std: 6.35169792175293
shape of layer: model 0 torch.Size([512, 512, 9])
shape of layer: model 1 torch.Size([512, 512, 9])
shape of activations: model 0 torch.Size([512, 4, 4, 200])
shape of activations: model 1 torch.Size([512, 4, 4, 200])
shape of previous transport map torch.Size([512, 512])
doing nothing for skips
returns a uniform measure of cardinality:  512
returns a uniform measure of cardinality:  512
Refactored ground metric calc
inside refactored
Processing the coordinates to form ground_metric
dont leave off the squaring of the ground metric
# of ground metric features is  3200
# of ground metric features in 0 is   3200
# of ground metric features in 1 is   3200
ground metric (m0) is  tensor([[200.0318, 308.6824, 202.1985,  ..., 390.4932, 250.3355, 219.7269],
        [203.8362, 224.9333, 236.5753,  ..., 368.8410, 296.7083, 265.0080],
        [233.2800, 316.8866, 222.6611,  ..., 403.7383, 333.7494, 254.5016],
        ...,
        [314.0475, 385.7668, 298.8284,  ..., 445.8065, 370.2072, 365.3838],
        [217.7260, 301.5212, 242.0858,  ..., 376.3793, 310.1877, 300.5744],
        [262.5241, 306.0699, 281.8623,  ..., 385.9353, 348.0645, 317.5984]],
       device='cuda:0')
shape of T_var is  torch.Size([512, 512])
T_var before correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
marginals are  tensor([[511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        ...,
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738]],
       device='cuda:0')
T_var after correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
T_var stats: max 0.9999488592147827, min 0.0, mean 0.0019530251156538725, std 0.044148821383714676 
Ratio of trace to the matrix sum:  tensor(0.0020, device='cuda:0')
Here, trace is 0.9999488592147827 and matrix sum is 511.97381591796875 
Shape of aligned wt is  torch.Size([512, 512, 9])
Shape of fc_layer0_weight_data is  torch.Size([512, 512, 9])

--------------- At layer index 20 ------------- 
 
Previous layer shape is  torch.Size([512, 512, 3, 3])
let's see the difference in layer names linear linear
torch.Size([200, 1, 10]) shape of activations generally
In layer linear.weight: getting activation distance statistics
Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): 

Max : 337.4286804199219, Mean : 241.76113891601562, Min : 50.6736946105957, Std: 81.01107025146484
shape of layer: model 0 torch.Size([10, 512])
shape of layer: model 1 torch.Size([10, 512])
shape of activations: model 0 torch.Size([10, 200])
shape of activations: model 1 torch.Size([10, 200])
shape of previous transport map torch.Size([512, 512])
returns a uniform measure of cardinality:  10
returns a uniform measure of cardinality:  10
Refactored ground metric calc
inside refactored
Processing the coordinates to form ground_metric
dont leave off the squaring of the ground metric
# of ground metric features in 0 is   200
# of ground metric features in 1 is   200
ground metric (m0) is  tensor([[ 44.3690, 271.2025, 207.1372, 241.2687, 235.2675, 246.5258, 260.9727,
         293.2737, 195.2302, 235.7500],
        [267.1538,  52.4971, 328.8216, 332.6667, 345.1956, 342.3354, 331.5961,
         375.5926, 272.8466, 211.5527],
        [191.1744, 313.5984,  55.3374, 180.4663, 177.8453, 166.9352, 204.1535,
         249.0489, 242.4713, 265.1311],
        [244.7389, 338.4616, 194.9807,  53.3710, 213.5796, 186.2644, 246.7679,
         288.6340, 281.8751, 301.9074],
        [238.7621, 355.9641, 178.2450, 217.2574,  52.1963, 182.0675, 253.8109,
         235.6281, 284.2994, 319.5439],
        [241.4560, 334.2365, 171.0345, 177.0133, 177.7610,  52.3755, 243.5538,
         220.4460, 276.9285, 300.9351],
        [252.9284, 318.1835, 203.3327, 232.4471, 246.8279, 231.9721,  53.1539,
         320.9542, 279.8248, 307.2574],
        [294.2480, 388.1675, 253.2168, 284.2233, 238.6659, 217.7204, 332.0456,
          47.2685, 317.1276, 335.9295],
        [191.7951, 294.5012, 254.4723, 268.8113, 273.6850, 277.7083, 285.2676,
         320.2268,  45.1897, 246.9037],
        [227.6845, 228.4449, 282.2982, 283.1142, 302.7624, 300.5913, 314.5500,
         333.8112, 236.3097,  50.9787]], device='cuda:0')
shape of T_var is  torch.Size([10, 10])
T_var before correction  tensor([[0.1000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
         0.0000],
        [0.0000, 0.1000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
         0.0000],
        [0.0000, 0.0000, 0.1000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
         0.0000],
        [0.0000, 0.0000, 0.0000, 0.1000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
         0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.1000, 0.0000, 0.0000, 0.0000, 0.0000,
         0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.1000, 0.0000, 0.0000, 0.0000,
         0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.1000, 0.0000, 0.0000,
         0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.1000, 0.0000,
         0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.1000,
         0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
         0.1000]], device='cuda:0')
marginals are  tensor([[10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000,
         10.0000, 10.0000],
        [10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000,
         10.0000, 10.0000],
        [10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000,
         10.0000, 10.0000],
        [10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000,
         10.0000, 10.0000],
        [10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000,
         10.0000, 10.0000],
        [10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000,
         10.0000, 10.0000],
        [10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000,
         10.0000, 10.0000],
        [10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000,
         10.0000, 10.0000],
        [10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000,
         10.0000, 10.0000],
        [10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000,
         10.0000, 10.0000]], device='cuda:0')
T_var after correction  tensor([[1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
         0.0000],
        [0.0000, 1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
         0.0000],
        [0.0000, 0.0000, 1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
         0.0000],
        [0.0000, 0.0000, 0.0000, 1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
         0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 1.0000, 0.0000, 0.0000, 0.0000, 0.0000,
         0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 1.0000, 0.0000, 0.0000, 0.0000,
         0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 1.0000, 0.0000, 0.0000,
         0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 1.0000, 0.0000,
         0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 1.0000,
         0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
         1.0000]], device='cuda:0')
T_var stats: max 0.9999990463256836, min 0.0, mean 0.09999990463256836, std 0.3015110492706299 
Ratio of trace to the matrix sum:  tensor(1., device='cuda:0')
Here, trace is 9.999990463256836 and matrix sum is 9.999990463256836 
Shape of aligned wt is  torch.Size([10, 512])
Shape of fc_layer0_weight_data is  torch.Size([10, 512])
using independent method
model parameters are 
 [torch.Size([64, 3, 3, 3]), torch.Size([64, 64, 3, 3]), torch.Size([64, 64, 3, 3]), torch.Size([64, 64, 3, 3]), torch.Size([64, 64, 3, 3]), torch.Size([128, 64, 3, 3]), torch.Size([128, 128, 3, 3]), torch.Size([128, 64, 1, 1]), torch.Size([128, 128, 3, 3]), torch.Size([128, 128, 3, 3]), torch.Size([256, 128, 3, 3]), torch.Size([256, 256, 3, 3]), torch.Size([256, 128, 1, 1]), torch.Size([256, 256, 3, 3]), torch.Size([256, 256, 3, 3]), torch.Size([512, 256, 3, 3]), torch.Size([512, 512, 3, 3]), torch.Size([512, 256, 1, 1]), torch.Size([512, 512, 3, 3]), torch.Size([512, 512, 3, 3]), torch.Size([10, 512])]

--------- Testing in global mode ---------
size of test_loader dataset:  10000

Test set: Avg. loss: 0.0230, Accuracy: 1162/10000 (12%)

len of model parameters and avg aligned layers is  21 21
len of model_state_dict is  21
len of param_list is  21

--------- Testing in global mode ---------
size of test_loader dataset:  10000

Test set: Avg. loss: 0.0117, Accuracy: 6724/10000 (67%)

Timer ends
Time taken for geometric ensembling is 16.468092747032642 seconds
------- Prediction based ensembling -------

Test set: Avg. loss: 0.0036, Accuracy: 9389/10000 (94%)

------- Naive ensembling of weights -------
[torch.Size([64, 3, 3, 3]), torch.Size([64, 3, 3, 3])]
torch.Size([64, 3, 3, 3])
[torch.Size([64, 64, 3, 3]), torch.Size([64, 64, 3, 3])]
torch.Size([64, 64, 3, 3])
[torch.Size([64, 64, 3, 3]), torch.Size([64, 64, 3, 3])]
torch.Size([64, 64, 3, 3])
[torch.Size([64, 64, 3, 3]), torch.Size([64, 64, 3, 3])]
torch.Size([64, 64, 3, 3])
[torch.Size([64, 64, 3, 3]), torch.Size([64, 64, 3, 3])]
torch.Size([64, 64, 3, 3])
[torch.Size([128, 64, 3, 3]), torch.Size([128, 64, 3, 3])]
torch.Size([128, 64, 3, 3])
[torch.Size([128, 128, 3, 3]), torch.Size([128, 128, 3, 3])]
torch.Size([128, 128, 3, 3])
[torch.Size([128, 64, 1, 1]), torch.Size([128, 64, 1, 1])]
torch.Size([128, 64, 1, 1])
[torch.Size([128, 128, 3, 3]), torch.Size([128, 128, 3, 3])]
torch.Size([128, 128, 3, 3])
[torch.Size([128, 128, 3, 3]), torch.Size([128, 128, 3, 3])]
torch.Size([128, 128, 3, 3])
[torch.Size([256, 128, 3, 3]), torch.Size([256, 128, 3, 3])]
torch.Size([256, 128, 3, 3])
[torch.Size([256, 256, 3, 3]), torch.Size([256, 256, 3, 3])]
torch.Size([256, 256, 3, 3])
[torch.Size([256, 128, 1, 1]), torch.Size([256, 128, 1, 1])]
torch.Size([256, 128, 1, 1])
[torch.Size([256, 256, 3, 3]), torch.Size([256, 256, 3, 3])]
torch.Size([256, 256, 3, 3])
[torch.Size([256, 256, 3, 3]), torch.Size([256, 256, 3, 3])]
torch.Size([256, 256, 3, 3])
[torch.Size([512, 256, 3, 3]), torch.Size([512, 256, 3, 3])]
torch.Size([512, 256, 3, 3])
[torch.Size([512, 512, 3, 3]), torch.Size([512, 512, 3, 3])]
torch.Size([512, 512, 3, 3])
[torch.Size([512, 256, 1, 1]), torch.Size([512, 256, 1, 1])]
torch.Size([512, 256, 1, 1])
[torch.Size([512, 512, 3, 3]), torch.Size([512, 512, 3, 3])]
torch.Size([512, 512, 3, 3])
[torch.Size([512, 512, 3, 3]), torch.Size([512, 512, 3, 3])]
torch.Size([512, 512, 3, 3])
[torch.Size([10, 512]), torch.Size([10, 512])]
torch.Size([10, 512])
model parameters are 
 [torch.Size([64, 3, 3, 3]), torch.Size([64, 64, 3, 3]), torch.Size([64, 64, 3, 3]), torch.Size([64, 64, 3, 3]), torch.Size([64, 64, 3, 3]), torch.Size([128, 64, 3, 3]), torch.Size([128, 128, 3, 3]), torch.Size([128, 64, 1, 1]), torch.Size([128, 128, 3, 3]), torch.Size([128, 128, 3, 3]), torch.Size([256, 128, 3, 3]), torch.Size([256, 256, 3, 3]), torch.Size([256, 128, 1, 1]), torch.Size([256, 256, 3, 3]), torch.Size([256, 256, 3, 3]), torch.Size([512, 256, 3, 3]), torch.Size([512, 512, 3, 3]), torch.Size([512, 256, 1, 1]), torch.Size([512, 512, 3, 3]), torch.Size([512, 512, 3, 3]), torch.Size([10, 512])]

--------- Testing in global mode ---------
size of test_loader dataset:  10000

Test set: Avg. loss: 0.0230, Accuracy: 1000/10000 (10%)


--------- Testing in global mode ---------
/home/gvignen/.local/lib/python3.10/site-packages/torch/optim/lr_scheduler.py:136: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  warnings.warn("Detected call of `lr_scheduler.step()` before `optimizer.step()`. "
/home/gvignen/.local/lib/python3.10/site-packages/torch/optim/lr_scheduler.py:149: UserWarning: The epoch parameter in `scheduler.step()` was not necessary and is being deprecated where possible. Please use `scheduler.step()` to step the scheduler. During the deprecation, if epoch is different from None, the closed form is used instead of the new chainable form, where available. Please open an issue if you are unable to replicate your use case: https://github.com/pytorch/pytorch/issues/new/choose.
  warnings.warn(EPOCH_DEPRECATION_WARNING, UserWarning)
size of test_loader dataset:  10000

Test set: Avg. loss: 0.0230, Accuracy: 1849/10000 (18%)

-------- Retraining the models ---------
Retraining model :  geometric
lr is  0.1
number of epochs would be  300
Epoch 000
accuracy: {'epoch': 0, 'value': 0.8867999999809271} ({'split': 'train'})
cross_entropy: {'epoch': 0, 'value': 0.3361807151699065} ({'split': 'train'})
accuracy: {'epoch': 0, 'value': 0.8779999804496764} ({'split': 'test'})
cross_entropy: {'epoch': 0, 'value': 0.37937054619193067} ({'split': 'test'})
We have a new best! with accuracy::0.8779999804496764 and at epoch::0, let's save it!
Epoch 001
accuracy: {'epoch': 1, 'value': 0.9218200000000004} ({'split': 'train'})
cross_entropy: {'epoch': 1, 'value': 0.23003292628288266} ({'split': 'train'})
accuracy: {'epoch': 1, 'value': 0.8846999782323836} ({'split': 'test'})
cross_entropy: {'epoch': 1, 'value': 0.389809264242649} ({'split': 'test'})
We have a new best! with accuracy::0.8846999782323836 and at epoch::1, let's save it!
Epoch 002
accuracy: {'epoch': 2, 'value': 0.9315800000000001} ({'split': 'train'})
cross_entropy: {'epoch': 2, 'value': 0.2038731579494476} ({'split': 'train'})
accuracy: {'epoch': 2, 'value': 0.8946999818086626} ({'split': 'test'})
cross_entropy: {'epoch': 2, 'value': 0.36081344366073603} ({'split': 'test'})
We have a new best! with accuracy::0.8946999818086626 and at epoch::2, let's save it!
Epoch 003
accuracy: {'epoch': 3, 'value': 0.9405200000572201} ({'split': 'train'})
cross_entropy: {'epoch': 3, 'value': 0.17301975663185123} ({'split': 'train'})
accuracy: {'epoch': 3, 'value': 0.8904999780654907} ({'split': 'test'})
cross_entropy: {'epoch': 3, 'value': 0.3692455735802651} ({'split': 'test'})
Epoch 004
accuracy: {'epoch': 4, 'value': 0.9439999999809268} ({'split': 'train'})
cross_entropy: {'epoch': 4, 'value': 0.16611738886356361} ({'split': 'train'})
accuracy: {'epoch': 4, 'value': 0.8902999818325045} ({'split': 'test'})
cross_entropy: {'epoch': 4, 'value': 0.35180619679391384} ({'split': 'test'})
Epoch 005
accuracy: {'epoch': 5, 'value': 0.9507800000572203} ({'split': 'train'})
cross_entropy: {'epoch': 5, 'value': 0.14597240794897076} ({'split': 'train'})
accuracy: {'epoch': 5, 'value': 0.8873999798297879} ({'split': 'test'})
cross_entropy: {'epoch': 5, 'value': 0.3796899865567684} ({'split': 'test'})
Epoch 006
accuracy: {'epoch': 6, 'value': 0.9516600000190736} ({'split': 'train'})
cross_entropy: {'epoch': 6, 'value': 0.13973681292533874} ({'split': 'train'})
accuracy: {'epoch': 6, 'value': 0.8903999805450442} ({'split': 'test'})
cross_entropy: {'epoch': 6, 'value': 0.37849877715110775} ({'split': 'test'})
Epoch 007
accuracy: {'epoch': 7, 'value': 0.9525200000190734} ({'split': 'train'})
cross_entropy: {'epoch': 7, 'value': 0.13790515446186075} ({'split': 'train'})
accuracy: {'epoch': 7, 'value': 0.8935999798774718} ({'split': 'test'})
cross_entropy: {'epoch': 7, 'value': 0.346686504036188} ({'split': 'test'})
Epoch 008
accuracy: {'epoch': 8, 'value': 0.9564000000190738} ({'split': 'train'})
cross_entropy: {'epoch': 8, 'value': 0.12969230719566352} ({'split': 'train'})
accuracy: {'epoch': 8, 'value': 0.8978999793529508} ({'split': 'test'})
cross_entropy: {'epoch': 8, 'value': 0.3703899674117565} ({'split': 'test'})
We have a new best! with accuracy::0.8978999793529508 and at epoch::8, let's save it!
Epoch 009
accuracy: {'epoch': 9, 'value': 0.9575400000000001} ({'split': 'train'})
cross_entropy: {'epoch': 9, 'value': 0.12313807242393494} ({'split': 'train'})
accuracy: {'epoch': 9, 'value': 0.8968999797105791} ({'split': 'test'})
cross_entropy: {'epoch': 9, 'value': 0.3704637911170721} ({'split': 'test'})
Epoch 010
accuracy: {'epoch': 10, 'value': 0.9606599999809262} ({'split': 'train'})
cross_entropy: {'epoch': 10, 'value': 0.11275674165725712} ({'split': 'train'})
accuracy: {'epoch': 10, 'value': 0.8785999786853791} ({'split': 'test'})
cross_entropy: {'epoch': 10, 'value': 0.44006803154945373} ({'split': 'test'})
Epoch 011
accuracy: {'epoch': 11, 'value': 0.959640000038147} ({'split': 'train'})
cross_entropy: {'epoch': 11, 'value': 0.11656331884264949} ({'split': 'train'})
accuracy: {'epoch': 11, 'value': 0.8886999815702435} ({'split': 'test'})
cross_entropy: {'epoch': 11, 'value': 0.3880862252414225} ({'split': 'test'})
Epoch 012
accuracy: {'epoch': 12, 'value': 0.9646200000572206} ({'split': 'train'})
cross_entropy: {'epoch': 12, 'value': 0.10411193749904633} ({'split': 'train'})
accuracy: {'epoch': 12, 'value': 0.8956999832391737} ({'split': 'test'})
cross_entropy: {'epoch': 12, 'value': 0.3909109546989201} ({'split': 'test'})
Epoch 013
accuracy: {'epoch': 13, 'value': 0.9627999999809267} ({'split': 'train'})
cross_entropy: {'epoch': 13, 'value': 0.10582943109989167} ({'split': 'train'})
accuracy: {'epoch': 13, 'value': 0.9029999804496767} ({'split': 'test'})
cross_entropy: {'epoch': 13, 'value': 0.3541191075742245} ({'split': 'test'})
We have a new best! with accuracy::0.9029999804496767 and at epoch::13, let's save it!
Epoch 014
accuracy: {'epoch': 14, 'value': 0.9647800000381471} ({'split': 'train'})
cross_entropy: {'epoch': 14, 'value': 0.10372049991369243} ({'split': 'train'})
accuracy: {'epoch': 14, 'value': 0.8963999801874164} ({'split': 'test'})
cross_entropy: {'epoch': 14, 'value': 0.37188985824584964} ({'split': 'test'})
Epoch 015
accuracy: {'epoch': 15, 'value': 0.9654800000381466} ({'split': 'train'})
cross_entropy: {'epoch': 15, 'value': 0.1017424670982361} ({'split': 'train'})
accuracy: {'epoch': 15, 'value': 0.9005999779701234} ({'split': 'test'})
cross_entropy: {'epoch': 15, 'value': 0.3509618052840233} ({'split': 'test'})
Epoch 016
accuracy: {'epoch': 16, 'value': 0.9669200000572201} ({'split': 'train'})
cross_entropy: {'epoch': 16, 'value': 0.09555815367937091} ({'split': 'train'})
accuracy: {'epoch': 16, 'value': 0.8949999809265138} ({'split': 'test'})
cross_entropy: {'epoch': 16, 'value': 0.3906841303408146} ({'split': 'test'})
Epoch 017
accuracy: {'epoch': 17, 'value': 0.9678600000381468} ({'split': 'train'})
cross_entropy: {'epoch': 17, 'value': 0.09500116153240204} ({'split': 'train'})
accuracy: {'epoch': 17, 'value': 0.8905999779701235} ({'split': 'test'})
cross_entropy: {'epoch': 17, 'value': 0.38931087210774423} ({'split': 'test'})
Epoch 018
accuracy: {'epoch': 18, 'value': 0.9700200000190736} ({'split': 'train'})
cross_entropy: {'epoch': 18, 'value': 0.08702594274759297} ({'split': 'train'})
accuracy: {'epoch': 18, 'value': 0.8980999785661697} ({'split': 'test'})
cross_entropy: {'epoch': 18, 'value': 0.3905308400094508} ({'split': 'test'})
Epoch 019
accuracy: {'epoch': 19, 'value': 0.9709000000572209} ({'split': 'train'})
cross_entropy: {'epoch': 19, 'value': 0.08434879081249234} ({'split': 'train'})
accuracy: {'epoch': 19, 'value': 0.8960999822616578} ({'split': 'test'})
cross_entropy: {'epoch': 19, 'value': 0.4261957462131978} ({'split': 'test'})
Epoch 020
accuracy: {'epoch': 20, 'value': 0.9682200000190734} ({'split': 'train'})
cross_entropy: {'epoch': 20, 'value': 0.09213371208667756} ({'split': 'train'})
accuracy: {'epoch': 20, 'value': 0.8966999816894531} ({'split': 'test'})
cross_entropy: {'epoch': 20, 'value': 0.36877159148454663} ({'split': 'test'})
Epoch 021
accuracy: {'epoch': 21, 'value': 0.9701399999809263} ({'split': 'train'})
cross_entropy: {'epoch': 21, 'value': 0.0860093674921989} ({'split': 'train'})
accuracy: {'epoch': 21, 'value': 0.8977999830245973} ({'split': 'test'})
cross_entropy: {'epoch': 21, 'value': 0.370445695668459} ({'split': 'test'})
Epoch 022
accuracy: {'epoch': 22, 'value': 0.97006000005722} ({'split': 'train'})
cross_entropy: {'epoch': 22, 'value': 0.08756784078836448} ({'split': 'train'})
accuracy: {'epoch': 22, 'value': 0.9002999800443651} ({'split': 'test'})
cross_entropy: {'epoch': 22, 'value': 0.35926725044846525} ({'split': 'test'})
Epoch 023
accuracy: {'epoch': 23, 'value': 0.9714400000381473} ({'split': 'train'})
cross_entropy: {'epoch': 23, 'value': 0.08384316354990004} ({'split': 'train'})
accuracy: {'epoch': 23, 'value': 0.9019999802112578} ({'split': 'test'})
cross_entropy: {'epoch': 23, 'value': 0.36574284136295315} ({'split': 'test'})
Epoch 024
accuracy: {'epoch': 24, 'value': 0.9736600000190734} ({'split': 'train'})
cross_entropy: {'epoch': 24, 'value': 0.07882503399610523} ({'split': 'train'})
accuracy: {'epoch': 24, 'value': 0.9002999812364578} ({'split': 'test'})
cross_entropy: {'epoch': 24, 'value': 0.3693293502926827} ({'split': 'test'})
Epoch 025
accuracy: {'epoch': 25, 'value': 0.9746800000381469} ({'split': 'train'})
cross_entropy: {'epoch': 25, 'value': 0.07504272484064096} ({'split': 'train'})
accuracy: {'epoch': 25, 'value': 0.9013999819755555} ({'split': 'test'})
cross_entropy: {'epoch': 25, 'value': 0.3961097918450832} ({'split': 'test'})
Epoch 026
accuracy: {'epoch': 26, 'value': 0.9734200000572211} ({'split': 'train'})
cross_entropy: {'epoch': 26, 'value': 0.07650086772918703} ({'split': 'train'})
accuracy: {'epoch': 26, 'value': 0.9068999826908113} ({'split': 'test'})
cross_entropy: {'epoch': 26, 'value': 0.36795475080609313} ({'split': 'test'})
We have a new best! with accuracy::0.9068999826908113 and at epoch::26, let's save it!
Epoch 027
accuracy: {'epoch': 27, 'value': 0.974920000038147} ({'split': 'train'})
cross_entropy: {'epoch': 27, 'value': 0.07380027592182166} ({'split': 'train'})
accuracy: {'epoch': 27, 'value': 0.8935999792814255} ({'split': 'test'})
cross_entropy: {'epoch': 27, 'value': 0.4307093609869479} ({'split': 'test'})
Epoch 028
accuracy: {'epoch': 28, 'value': 0.9742800000572204} ({'split': 'train'})
cross_entropy: {'epoch': 28, 'value': 0.07580029875278475} ({'split': 'train'})
accuracy: {'epoch': 28, 'value': 0.8891999822854993} ({'split': 'test'})
cross_entropy: {'epoch': 28, 'value': 0.40599854156374926} ({'split': 'test'})
Epoch 029
accuracy: {'epoch': 29, 'value': 0.975520000038147} ({'split': 'train'})
cross_entropy: {'epoch': 29, 'value': 0.07039908421754842} ({'split': 'train'})
accuracy: {'epoch': 29, 'value': 0.9043999838829044} ({'split': 'test'})
cross_entropy: {'epoch': 29, 'value': 0.3753716509044171} ({'split': 'test'})
Epoch 030
accuracy: {'epoch': 30, 'value': 0.9711200000190735} ({'split': 'train'})
cross_entropy: {'epoch': 30, 'value': 0.08322796145915988} ({'split': 'train'})
accuracy: {'epoch': 30, 'value': 0.9005999821424482} ({'split': 'test'})
cross_entropy: {'epoch': 30, 'value': 0.37456153176724916} ({'split': 'test'})
Epoch 031
accuracy: {'epoch': 31, 'value': 0.977020000038147} ({'split': 'train'})
cross_entropy: {'epoch': 31, 'value': 0.0681696851372719} ({'split': 'train'})
accuracy: {'epoch': 31, 'value': 0.8972999811172484} ({'split': 'test'})
cross_entropy: {'epoch': 31, 'value': 0.39540841370821006} ({'split': 'test'})
Epoch 032
accuracy: {'epoch': 32, 'value': 0.9732799999809271} ({'split': 'train'})
cross_entropy: {'epoch': 32, 'value': 0.0791566522026062} ({'split': 'train'})
accuracy: {'epoch': 32, 'value': 0.9017999804019927} ({'split': 'test'})
cross_entropy: {'epoch': 32, 'value': 0.38530694060027615} ({'split': 'test'})
Epoch 033
accuracy: {'epoch': 33, 'value': 0.9767600000190733} ({'split': 'train'})
cross_entropy: {'epoch': 33, 'value': 0.06829992666482922} ({'split': 'train'})
accuracy: {'epoch': 33, 'value': 0.9028999793529512} ({'split': 'test'})
cross_entropy: {'epoch': 33, 'value': 0.37825476743280884} ({'split': 'test'})
Epoch 034
accuracy: {'epoch': 34, 'value': 0.9755999999809262} ({'split': 'train'})
cross_entropy: {'epoch': 34, 'value': 0.0731483216381073} ({'split': 'train'})
accuracy: {'epoch': 34, 'value': 0.9014999800920486} ({'split': 'test'})
cross_entropy: {'epoch': 34, 'value': 0.3693943679332732} ({'split': 'test'})
Epoch 035
accuracy: {'epoch': 35, 'value': 0.9759799999809265} ({'split': 'train'})
cross_entropy: {'epoch': 35, 'value': 0.0715028174090385} ({'split': 'train'})
accuracy: {'epoch': 35, 'value': 0.9012999814748768} ({'split': 'test'})
cross_entropy: {'epoch': 35, 'value': 0.3900519430637361} ({'split': 'test'})
Epoch 036
accuracy: {'epoch': 36, 'value': 0.976360000019074} ({'split': 'train'})
cross_entropy: {'epoch': 36, 'value': 0.06919847077131275} ({'split': 'train'})
accuracy: {'epoch': 36, 'value': 0.912199983596802} ({'split': 'test'})
cross_entropy: {'epoch': 36, 'value': 0.354098168835044} ({'split': 'test'})
We have a new best! with accuracy::0.912199983596802 and at epoch::36, let's save it!
Epoch 037
accuracy: {'epoch': 37, 'value': 0.9785599999999997} ({'split': 'train'})
cross_entropy: {'epoch': 37, 'value': 0.06335251718044281} ({'split': 'train'})
accuracy: {'epoch': 37, 'value': 0.902699978351593} ({'split': 'test'})
cross_entropy: {'epoch': 37, 'value': 0.37775289535522455} ({'split': 'test'})
Epoch 038
accuracy: {'epoch': 38, 'value': 0.9793800000190738} ({'split': 'train'})
cross_entropy: {'epoch': 38, 'value': 0.062293381686210625} ({'split': 'train'})
accuracy: {'epoch': 38, 'value': 0.9028999811410904} ({'split': 'test'})
cross_entropy: {'epoch': 38, 'value': 0.3956804166734219} ({'split': 'test'})
Epoch 039
accuracy: {'epoch': 39, 'value': 0.9783600000381473} ({'split': 'train'})
cross_entropy: {'epoch': 39, 'value': 0.06515953438520432} ({'split': 'train'})
accuracy: {'epoch': 39, 'value': 0.905899981856346} ({'split': 'test'})
cross_entropy: {'epoch': 39, 'value': 0.3811507938802243} ({'split': 'test'})
Epoch 040
accuracy: {'epoch': 40, 'value': 0.9753000000381471} ({'split': 'train'})
cross_entropy: {'epoch': 40, 'value': 0.07290233182430268} ({'split': 'train'})
accuracy: {'epoch': 40, 'value': 0.9023999804258349} ({'split': 'test'})
cross_entropy: {'epoch': 40, 'value': 0.366026657372713} ({'split': 'test'})
Epoch 041
accuracy: {'epoch': 41, 'value': 0.9774600000190737} ({'split': 'train'})
cross_entropy: {'epoch': 41, 'value': 0.06548659536600111} ({'split': 'train'})
accuracy: {'epoch': 41, 'value': 0.907299978137016} ({'split': 'test'})
cross_entropy: {'epoch': 41, 'value': 0.3407790270447731} ({'split': 'test'})
Epoch 042
accuracy: {'epoch': 42, 'value': 0.9799800000381468} ({'split': 'train'})
cross_entropy: {'epoch': 42, 'value': 0.05940231014728546} ({'split': 'train'})
accuracy: {'epoch': 42, 'value': 0.9075999796390535} ({'split': 'test'})
cross_entropy: {'epoch': 42, 'value': 0.38441136300563816} ({'split': 'test'})
Epoch 043
accuracy: {'epoch': 43, 'value': 0.9782200000190733} ({'split': 'train'})
cross_entropy: {'epoch': 43, 'value': 0.06369933589339255} ({'split': 'train'})
accuracy: {'epoch': 43, 'value': 0.8998999804258346} ({'split': 'test'})
cross_entropy: {'epoch': 43, 'value': 0.40807355329394346} ({'split': 'test'})
Epoch 044
accuracy: {'epoch': 44, 'value': 0.9796800000381473} ({'split': 'train'})
cross_entropy: {'epoch': 44, 'value': 0.05997020232081415} ({'split': 'train'})
accuracy: {'epoch': 44, 'value': 0.9097999805212023} ({'split': 'test'})
cross_entropy: {'epoch': 44, 'value': 0.3716223813593388} ({'split': 'test'})
Epoch 045
accuracy: {'epoch': 45, 'value': 0.9811799999809263} ({'split': 'train'})
cross_entropy: {'epoch': 45, 'value': 0.057308926191329955} ({'split': 'train'})
accuracy: {'epoch': 45, 'value': 0.9033999842405323} ({'split': 'test'})
cross_entropy: {'epoch': 45, 'value': 0.35757892481982706} ({'split': 'test'})
Epoch 046
accuracy: {'epoch': 46, 'value': 0.9778400000381473} ({'split': 'train'})
cross_entropy: {'epoch': 46, 'value': 0.06448412506103517} ({'split': 'train'})
accuracy: {'epoch': 46, 'value': 0.9082999825477601} ({'split': 'test'})
cross_entropy: {'epoch': 46, 'value': 0.3564219702035189} ({'split': 'test'})
Epoch 047
accuracy: {'epoch': 47, 'value': 0.9780000000381471} ({'split': 'train'})
cross_entropy: {'epoch': 47, 'value': 0.06328834014892576} ({'split': 'train'})
accuracy: {'epoch': 47, 'value': 0.9075999808311461} ({'split': 'test'})
cross_entropy: {'epoch': 47, 'value': 0.3391093665361405} ({'split': 'test'})
Epoch 048
accuracy: {'epoch': 48, 'value': 0.978760000038147} ({'split': 'train'})
cross_entropy: {'epoch': 48, 'value': 0.0617566840481758} ({'split': 'train'})
accuracy: {'epoch': 48, 'value': 0.910299981832504} ({'split': 'test'})
cross_entropy: {'epoch': 48, 'value': 0.3553771108388902} ({'split': 'test'})
Epoch 049
accuracy: {'epoch': 49, 'value': 0.9789200000572207} ({'split': 'train'})
cross_entropy: {'epoch': 49, 'value': 0.062441204128265385} ({'split': 'train'})
accuracy: {'epoch': 49, 'value': 0.9079999810457229} ({'split': 'test'})
cross_entropy: {'epoch': 49, 'value': 0.3659981995820997} ({'split': 'test'})
Epoch 050
accuracy: {'epoch': 50, 'value': 0.9784000000381469} ({'split': 'train'})
cross_entropy: {'epoch': 50, 'value': 0.06275934585809705} ({'split': 'train'})
accuracy: {'epoch': 50, 'value': 0.9031999826431278} ({'split': 'test'})
cross_entropy: {'epoch': 50, 'value': 0.34631401374936105} ({'split': 'test'})
Epoch 051
accuracy: {'epoch': 51, 'value': 0.9790200000572201} ({'split': 'train'})
cross_entropy: {'epoch': 51, 'value': 0.05989536107063295} ({'split': 'train'})
accuracy: {'epoch': 51, 'value': 0.9112999808788299} ({'split': 'test'})
cross_entropy: {'epoch': 51, 'value': 0.31587014302611355} ({'split': 'test'})
Epoch 052
accuracy: {'epoch': 52, 'value': 0.9796800000381471} ({'split': 'train'})
cross_entropy: {'epoch': 52, 'value': 0.061549953694343566} ({'split': 'train'})
accuracy: {'epoch': 52, 'value': 0.9011999821662903} ({'split': 'test'})
cross_entropy: {'epoch': 52, 'value': 0.3727103282511234} ({'split': 'test'})
Epoch 053
accuracy: {'epoch': 53, 'value': 0.9797400000572208} ({'split': 'train'})
cross_entropy: {'epoch': 53, 'value': 0.06089741135835646} ({'split': 'train'})
accuracy: {'epoch': 53, 'value': 0.9084999811649322} ({'split': 'test'})
cross_entropy: {'epoch': 53, 'value': 0.35413585610687726} ({'split': 'test'})
Epoch 054
accuracy: {'epoch': 54, 'value': 0.9793799999809267} ({'split': 'train'})
cross_entropy: {'epoch': 54, 'value': 0.06072675590991973} ({'split': 'train'})
accuracy: {'epoch': 54, 'value': 0.9092999821901319} ({'split': 'test'})
cross_entropy: {'epoch': 54, 'value': 0.34099613673985013} ({'split': 'test'})
Epoch 055
accuracy: {'epoch': 55, 'value': 0.9777199999809263} ({'split': 'train'})
cross_entropy: {'epoch': 55, 'value': 0.06409175594806675} ({'split': 'train'})
accuracy: {'epoch': 55, 'value': 0.9045999795198439} ({'split': 'test'})
cross_entropy: {'epoch': 55, 'value': 0.3508685184270144} ({'split': 'test'})
Epoch 056
accuracy: {'epoch': 56, 'value': 0.9794799999999999} ({'split': 'train'})
cross_entropy: {'epoch': 56, 'value': 0.06009698602676388} ({'split': 'train'})
accuracy: {'epoch': 56, 'value': 0.8920999825000762} ({'split': 'test'})
cross_entropy: {'epoch': 56, 'value': 0.40220863819122316} ({'split': 'test'})
Epoch 057
accuracy: {'epoch': 57, 'value': 0.9787999999809263} ({'split': 'train'})
cross_entropy: {'epoch': 57, 'value': 0.06122716938495636} ({'split': 'train'})
accuracy: {'epoch': 57, 'value': 0.9054999834299088} ({'split': 'test'})
cross_entropy: {'epoch': 57, 'value': 0.38428054504096504} ({'split': 'test'})
Epoch 058
accuracy: {'epoch': 58, 'value': 0.9792400000190733} ({'split': 'train'})
cross_entropy: {'epoch': 58, 'value': 0.0623798022735119} ({'split': 'train'})
accuracy: {'epoch': 58, 'value': 0.9083999824523927} ({'split': 'test'})
cross_entropy: {'epoch': 58, 'value': 0.3461139915883541} ({'split': 'test'})
Epoch 059
accuracy: {'epoch': 59, 'value': 0.980140000019073} ({'split': 'train'})
cross_entropy: {'epoch': 59, 'value': 0.05808354979515075} ({'split': 'train'})
accuracy: {'epoch': 59, 'value': 0.9051999825239181} ({'split': 'test'})
cross_entropy: {'epoch': 59, 'value': 0.38026300966739646} ({'split': 'test'})
Epoch 060
accuracy: {'epoch': 60, 'value': 0.9776399999999995} ({'split': 'train'})
cross_entropy: {'epoch': 60, 'value': 0.06574061904907223} ({'split': 'train'})
accuracy: {'epoch': 60, 'value': 0.8998999780416488} ({'split': 'test'})
cross_entropy: {'epoch': 60, 'value': 0.368567945510149} ({'split': 'test'})
Epoch 061
accuracy: {'epoch': 61, 'value': 0.979880000038147} ({'split': 'train'})
cross_entropy: {'epoch': 61, 'value': 0.05912835379600527} ({'split': 'train'})
accuracy: {'epoch': 61, 'value': 0.9034999781846998} ({'split': 'test'})
cross_entropy: {'epoch': 61, 'value': 0.4089881688356399} ({'split': 'test'})
Epoch 062
accuracy: {'epoch': 62, 'value': 0.9801999999809266} ({'split': 'train'})
cross_entropy: {'epoch': 62, 'value': 0.058545619926452616} ({'split': 'train'})
accuracy: {'epoch': 62, 'value': 0.902899983525276} ({'split': 'test'})
cross_entropy: {'epoch': 62, 'value': 0.3728091527521612} ({'split': 'test'})
Epoch 063
accuracy: {'epoch': 63, 'value': 0.9803200000381467} ({'split': 'train'})
cross_entropy: {'epoch': 63, 'value': 0.05921752111315726} ({'split': 'train'})
accuracy: {'epoch': 63, 'value': 0.9034999805688858} ({'split': 'test'})
cross_entropy: {'epoch': 63, 'value': 0.38488330312073243} ({'split': 'test'})
Epoch 064
accuracy: {'epoch': 64, 'value': 0.9798800000190735} ({'split': 'train'})
cross_entropy: {'epoch': 64, 'value': 0.060479757061004655} ({'split': 'train'})
accuracy: {'epoch': 64, 'value': 0.8972999787330627} ({'split': 'test'})
cross_entropy: {'epoch': 64, 'value': 0.4221360478550196} ({'split': 'test'})
Epoch 065
accuracy: {'epoch': 65, 'value': 0.9808000000572203} ({'split': 'train'})
cross_entropy: {'epoch': 65, 'value': 0.05583344390392303} ({'split': 'train'})
accuracy: {'epoch': 65, 'value': 0.9063999813795088} ({'split': 'test'})
cross_entropy: {'epoch': 65, 'value': 0.38050965711474416} ({'split': 'test'})
Epoch 066
accuracy: {'epoch': 66, 'value': 0.9788400000572207} ({'split': 'train'})
cross_entropy: {'epoch': 66, 'value': 0.06073703754186627} ({'split': 'train'})
accuracy: {'epoch': 66, 'value': 0.8976999831199645} ({'split': 'test'})
cross_entropy: {'epoch': 66, 'value': 0.36750661298632614} ({'split': 'test'})
Epoch 067
accuracy: {'epoch': 67, 'value': 0.9822400000572207} ({'split': 'train'})
cross_entropy: {'epoch': 67, 'value': 0.05524782924056053} ({'split': 'train'})
accuracy: {'epoch': 67, 'value': 0.912699980735779} ({'split': 'test'})
cross_entropy: {'epoch': 67, 'value': 0.364272162541747} ({'split': 'test'})
We have a new best! with accuracy::0.912699980735779 and at epoch::67, let's save it!
Epoch 068
accuracy: {'epoch': 68, 'value': 0.9809000000000003} ({'split': 'train'})
cross_entropy: {'epoch': 68, 'value': 0.05745541662275788} ({'split': 'train'})
accuracy: {'epoch': 68, 'value': 0.9145999801158906} ({'split': 'test'})
cross_entropy: {'epoch': 68, 'value': 0.3240458977967502} ({'split': 'test'})
We have a new best! with accuracy::0.9145999801158906 and at epoch::68, let's save it!
Epoch 069
accuracy: {'epoch': 69, 'value': 0.9813400000000002} ({'split': 'train'})
cross_entropy: {'epoch': 69, 'value': 0.05453556812047957} ({'split': 'train'})
accuracy: {'epoch': 69, 'value': 0.9111999833583834} ({'split': 'test'})
cross_entropy: {'epoch': 69, 'value': 0.3855233940482139} ({'split': 'test'})
Epoch 070
accuracy: {'epoch': 70, 'value': 0.9793799999809271} ({'split': 'train'})
cross_entropy: {'epoch': 70, 'value': 0.06054004463672633} ({'split': 'train'})
accuracy: {'epoch': 70, 'value': 0.89749998152256} ({'split': 'test'})
cross_entropy: {'epoch': 70, 'value': 0.3712509375810622} ({'split': 'test'})
Epoch 071
accuracy: {'epoch': 71, 'value': 0.9801000000381473} ({'split': 'train'})
cross_entropy: {'epoch': 71, 'value': 0.0587100899362564} ({'split': 'train'})
accuracy: {'epoch': 71, 'value': 0.9047999787330626} ({'split': 'test'})
cross_entropy: {'epoch': 71, 'value': 0.40513148307800295} ({'split': 'test'})
Epoch 072
accuracy: {'epoch': 72, 'value': 0.9811400000572206} ({'split': 'train'})
cross_entropy: {'epoch': 72, 'value': 0.05464769072532652} ({'split': 'train'})
accuracy: {'epoch': 72, 'value': 0.9076999807357786} ({'split': 'test'})
cross_entropy: {'epoch': 72, 'value': 0.3740542007610203} ({'split': 'test'})
Epoch 073
accuracy: {'epoch': 73, 'value': 0.9806600000572205} ({'split': 'train'})
cross_entropy: {'epoch': 73, 'value': 0.05733821640491486} ({'split': 'train'})
accuracy: {'epoch': 73, 'value': 0.8994999825954437} ({'split': 'test'})
cross_entropy: {'epoch': 73, 'value': 0.39752287708222855} ({'split': 'test'})
Epoch 074
accuracy: {'epoch': 74, 'value': 0.9806800000190738} ({'split': 'train'})
cross_entropy: {'epoch': 74, 'value': 0.05719044980525968} ({'split': 'train'})
accuracy: {'epoch': 74, 'value': 0.9037999790906904} ({'split': 'test'})
cross_entropy: {'epoch': 74, 'value': 0.36453616291284563} ({'split': 'test'})
Epoch 075
accuracy: {'epoch': 75, 'value': 0.9807000000190728} ({'split': 'train'})
cross_entropy: {'epoch': 75, 'value': 0.05720903594017031} ({'split': 'train'})
accuracy: {'epoch': 75, 'value': 0.903899982571602} ({'split': 'test'})
cross_entropy: {'epoch': 75, 'value': 0.36953701138496403} ({'split': 'test'})
Epoch 076
accuracy: {'epoch': 76, 'value': 0.9789400000190738} ({'split': 'train'})
cross_entropy: {'epoch': 76, 'value': 0.06310807859301566} ({'split': 'train'})
accuracy: {'epoch': 76, 'value': 0.9095999819040298} ({'split': 'test'})
cross_entropy: {'epoch': 76, 'value': 0.3880372060090304} ({'split': 'test'})
Epoch 077
accuracy: {'epoch': 77, 'value': 0.9820200000381468} ({'split': 'train'})
cross_entropy: {'epoch': 77, 'value': 0.05394097948431967} ({'split': 'train'})
accuracy: {'epoch': 77, 'value': 0.906599981188774} ({'split': 'test'})
cross_entropy: {'epoch': 77, 'value': 0.393497811704874} ({'split': 'test'})
Epoch 078
accuracy: {'epoch': 78, 'value': 0.9800600000190737} ({'split': 'train'})
cross_entropy: {'epoch': 78, 'value': 0.06070530851960181} ({'split': 'train'})
accuracy: {'epoch': 78, 'value': 0.9024999815225602} ({'split': 'test'})
cross_entropy: {'epoch': 78, 'value': 0.39515934675931924} ({'split': 'test'})
Epoch 079
accuracy: {'epoch': 79, 'value': 0.9803200000000003} ({'split': 'train'})
cross_entropy: {'epoch': 79, 'value': 0.05801595309138301} ({'split': 'train'})
accuracy: {'epoch': 79, 'value': 0.9093999814987184} ({'split': 'test'})
cross_entropy: {'epoch': 79, 'value': 0.402010432034731} ({'split': 'test'})
Epoch 080
accuracy: {'epoch': 80, 'value': 0.9798599999809259} ({'split': 'train'})
cross_entropy: {'epoch': 80, 'value': 0.06026506783008575} ({'split': 'train'})
accuracy: {'epoch': 80, 'value': 0.9149999839067461} ({'split': 'test'})
cross_entropy: {'epoch': 80, 'value': 0.34743296898901455} ({'split': 'test'})
We have a new best! with accuracy::0.9149999839067461 and at epoch::80, let's save it!
Epoch 081
accuracy: {'epoch': 81, 'value': 0.9798600000381467} ({'split': 'train'})
cross_entropy: {'epoch': 81, 'value': 0.05837456234812735} ({'split': 'train'})
accuracy: {'epoch': 81, 'value': 0.9113999849557879} ({'split': 'test'})
cross_entropy: {'epoch': 81, 'value': 0.356342550292611} ({'split': 'test'})
Epoch 082
accuracy: {'epoch': 82, 'value': 0.9825400000572203} ({'split': 'train'})
cross_entropy: {'epoch': 82, 'value': 0.0518440071606636} ({'split': 'train'})
accuracy: {'epoch': 82, 'value': 0.9109999799728391} ({'split': 'test'})
cross_entropy: {'epoch': 82, 'value': 0.33941949814558026} ({'split': 'test'})
Epoch 083
accuracy: {'epoch': 83, 'value': 0.9811200000190735} ({'split': 'train'})
cross_entropy: {'epoch': 83, 'value': 0.05797782311081891} ({'split': 'train'})
accuracy: {'epoch': 83, 'value': 0.8893999809026719} ({'split': 'test'})
cross_entropy: {'epoch': 83, 'value': 0.4318617905676364} ({'split': 'test'})
Epoch 084
accuracy: {'epoch': 84, 'value': 0.9814800000381466} ({'split': 'train'})
cross_entropy: {'epoch': 84, 'value': 0.055032315220832836} ({'split': 'train'})
accuracy: {'epoch': 84, 'value': 0.9014999800920486} ({'split': 'test'})
cross_entropy: {'epoch': 84, 'value': 0.4093654902279377} ({'split': 'test'})
Epoch 085
accuracy: {'epoch': 85, 'value': 0.9813200000381468} ({'split': 'train'})
cross_entropy: {'epoch': 85, 'value': 0.05658722222208974} ({'split': 'train'})
accuracy: {'epoch': 85, 'value': 0.9079999804496764} ({'split': 'test'})
cross_entropy: {'epoch': 85, 'value': 0.37670878142118447} ({'split': 'test'})
Epoch 086
accuracy: {'epoch': 86, 'value': 0.9813400000000003} ({'split': 'train'})
cross_entropy: {'epoch': 86, 'value': 0.05475492117881777} ({'split': 'train'})
accuracy: {'epoch': 86, 'value': 0.8967999792098998} ({'split': 'test'})
cross_entropy: {'epoch': 86, 'value': 0.39822768352925775} ({'split': 'test'})
Epoch 087
accuracy: {'epoch': 87, 'value': 0.98122} ({'split': 'train'})
cross_entropy: {'epoch': 87, 'value': 0.05587086658358571} ({'split': 'train'})
accuracy: {'epoch': 87, 'value': 0.9102999812364576} ({'split': 'test'})
cross_entropy: {'epoch': 87, 'value': 0.325560066178441} ({'split': 'test'})
Epoch 088
accuracy: {'epoch': 88, 'value': 0.983620000038147} ({'split': 'train'})
cross_entropy: {'epoch': 88, 'value': 0.0492805792760849} ({'split': 'train'})
accuracy: {'epoch': 88, 'value': 0.9031999814510348} ({'split': 'test'})
cross_entropy: {'epoch': 88, 'value': 0.37665586471557627} ({'split': 'test'})
Epoch 089
accuracy: {'epoch': 89, 'value': 0.9830000000190733} ({'split': 'train'})
cross_entropy: {'epoch': 89, 'value': 0.05177793992757797} ({'split': 'train'})
accuracy: {'epoch': 89, 'value': 0.9150999814271931} ({'split': 'test'})
cross_entropy: {'epoch': 89, 'value': 0.33852389752864837} ({'split': 'test'})
We have a new best! with accuracy::0.9150999814271931 and at epoch::89, let's save it!
Epoch 090
accuracy: {'epoch': 90, 'value': 0.9823800000000001} ({'split': 'train'})
cross_entropy: {'epoch': 90, 'value': 0.05434072980105875} ({'split': 'train'})
accuracy: {'epoch': 90, 'value': 0.9092999804019927} ({'split': 'test'})
cross_entropy: {'epoch': 90, 'value': 0.36111138686537725} ({'split': 'test'})
Epoch 091
accuracy: {'epoch': 91, 'value': 0.9812800000381467} ({'split': 'train'})
cross_entropy: {'epoch': 91, 'value': 0.054972691850662246} ({'split': 'train'})
accuracy: {'epoch': 91, 'value': 0.9024999779462817} ({'split': 'test'})
cross_entropy: {'epoch': 91, 'value': 0.4522416941076516} ({'split': 'test'})
Epoch 092
accuracy: {'epoch': 92, 'value': 0.9826600000381469} ({'split': 'train'})
cross_entropy: {'epoch': 92, 'value': 0.0528371644449234} ({'split': 'train'})
accuracy: {'epoch': 92, 'value': 0.8987999844551089} ({'split': 'test'})
cross_entropy: {'epoch': 92, 'value': 0.41476537942886355} ({'split': 'test'})
Epoch 093
accuracy: {'epoch': 93, 'value': 0.9787600000572206} ({'split': 'train'})
cross_entropy: {'epoch': 93, 'value': 0.061528076934814456} ({'split': 'train'})
accuracy: {'epoch': 93, 'value': 0.8963999813795093} ({'split': 'test'})
cross_entropy: {'epoch': 93, 'value': 0.37352946028113354} ({'split': 'test'})
Epoch 094
accuracy: {'epoch': 94, 'value': 0.9808599999999998} ({'split': 'train'})
cross_entropy: {'epoch': 94, 'value': 0.05842236724913121} ({'split': 'train'})
accuracy: {'epoch': 94, 'value': 0.9038999819755558} ({'split': 'test'})
cross_entropy: {'epoch': 94, 'value': 0.351656434610486} ({'split': 'test'})
Epoch 095
accuracy: {'epoch': 95, 'value': 0.9809600000000003} ({'split': 'train'})
cross_entropy: {'epoch': 95, 'value': 0.056926547345221054} ({'split': 'train'})
accuracy: {'epoch': 95, 'value': 0.8991999799013137} ({'split': 'test'})
cross_entropy: {'epoch': 95, 'value': 0.3730861134827136} ({'split': 'test'})
Epoch 096
accuracy: {'epoch': 96, 'value': 0.9824000000381472} ({'split': 'train'})
cross_entropy: {'epoch': 96, 'value': 0.05440945465445519} ({'split': 'train'})
accuracy: {'epoch': 96, 'value': 0.9038999813795092} ({'split': 'test'})
cross_entropy: {'epoch': 96, 'value': 0.3298228420317172} ({'split': 'test'})
Epoch 097
accuracy: {'epoch': 97, 'value': 0.9815599999809267} ({'split': 'train'})
cross_entropy: {'epoch': 97, 'value': 0.05358074559688568} ({'split': 'train'})
accuracy: {'epoch': 97, 'value': 0.9078999823331833} ({'split': 'test'})
cross_entropy: {'epoch': 97, 'value': 0.3758253999799492} ({'split': 'test'})
Epoch 098
accuracy: {'epoch': 98, 'value': 0.9811600000381472} ({'split': 'train'})
cross_entropy: {'epoch': 98, 'value': 0.05654115895509718} ({'split': 'train'})
accuracy: {'epoch': 98, 'value': 0.9116999816894529} ({'split': 'test'})
cross_entropy: {'epoch': 98, 'value': 0.33134553886949997} ({'split': 'test'})
Epoch 099
accuracy: {'epoch': 99, 'value': 0.9802000000190735} ({'split': 'train'})
cross_entropy: {'epoch': 99, 'value': 0.05829677077889442} ({'split': 'train'})
accuracy: {'epoch': 99, 'value': 0.9057999807596208} ({'split': 'test'})
cross_entropy: {'epoch': 99, 'value': 0.37980861082673073} ({'split': 'test'})
Epoch 100
accuracy: {'epoch': 100, 'value': 0.9792200000381468} ({'split': 'train'})
cross_entropy: {'epoch': 100, 'value': 0.06101210976719857} ({'split': 'train'})
accuracy: {'epoch': 100, 'value': 0.9047999775409696} ({'split': 'test'})
cross_entropy: {'epoch': 100, 'value': 0.35942564733326443} ({'split': 'test'})
Epoch 101
accuracy: {'epoch': 101, 'value': 0.9809600000000002} ({'split': 'train'})
cross_entropy: {'epoch': 101, 'value': 0.056190153439939015} ({'split': 'train'})
accuracy: {'epoch': 101, 'value': 0.9082999777793883} ({'split': 'test'})
cross_entropy: {'epoch': 101, 'value': 0.3637819761037827} ({'split': 'test'})
Epoch 102
accuracy: {'epoch': 102, 'value': 0.9842000000190736} ({'split': 'train'})
cross_entropy: {'epoch': 102, 'value': 0.046437412117719665} ({'split': 'train'})
accuracy: {'epoch': 102, 'value': 0.9106999814510347} ({'split': 'test'})
cross_entropy: {'epoch': 102, 'value': 0.38567949093878273} ({'split': 'test'})
Epoch 103
accuracy: {'epoch': 103, 'value': 0.98192} ({'split': 'train'})
cross_entropy: {'epoch': 103, 'value': 0.05505410259723664} ({'split': 'train'})
accuracy: {'epoch': 103, 'value': 0.9025999808311459} ({'split': 'test'})
cross_entropy: {'epoch': 103, 'value': 0.36089927069842825} ({'split': 'test'})
Epoch 104
accuracy: {'epoch': 104, 'value': 0.9815200000190735} ({'split': 'train'})
cross_entropy: {'epoch': 104, 'value': 0.0561619158899784} ({'split': 'train'})
accuracy: {'epoch': 104, 'value': 0.9002999830245968} ({'split': 'test'})
cross_entropy: {'epoch': 104, 'value': 0.41026190534234047} ({'split': 'test'})
Epoch 105
accuracy: {'epoch': 105, 'value': 0.9820000000190738} ({'split': 'train'})
cross_entropy: {'epoch': 105, 'value': 0.05319689334452155} ({'split': 'train'})
accuracy: {'epoch': 105, 'value': 0.9133999824523924} ({'split': 'test'})
cross_entropy: {'epoch': 105, 'value': 0.3553472644835712} ({'split': 'test'})
Epoch 106
accuracy: {'epoch': 106, 'value': 0.9831200000190736} ({'split': 'train'})
cross_entropy: {'epoch': 106, 'value': 0.05156858805179597} ({'split': 'train'})
accuracy: {'epoch': 106, 'value': 0.9079999822378155} ({'split': 'test'})
cross_entropy: {'epoch': 106, 'value': 0.34476834878325463} ({'split': 'test'})
Epoch 107
accuracy: {'epoch': 107, 'value': 0.982380000038147} ({'split': 'train'})
cross_entropy: {'epoch': 107, 'value': 0.05213720163345337} ({'split': 'train'})
accuracy: {'epoch': 107, 'value': 0.9124999821186066} ({'split': 'test'})
cross_entropy: {'epoch': 107, 'value': 0.3232134924829006} ({'split': 'test'})
Epoch 108
accuracy: {'epoch': 108, 'value': 0.9825000000572204} ({'split': 'train'})
cross_entropy: {'epoch': 108, 'value': 0.05180987088203429} ({'split': 'train'})
accuracy: {'epoch': 108, 'value': 0.9077999830245973} ({'split': 'test'})
cross_entropy: {'epoch': 108, 'value': 0.38685400381684304} ({'split': 'test'})
Epoch 109
accuracy: {'epoch': 109, 'value': 0.9799799999999996} ({'split': 'train'})
cross_entropy: {'epoch': 109, 'value': 0.0601718978756666} ({'split': 'train'})
accuracy: {'epoch': 109, 'value': 0.9085999840497974} ({'split': 'test'})
cross_entropy: {'epoch': 109, 'value': 0.337352464646101} ({'split': 'test'})
Epoch 110
accuracy: {'epoch': 110, 'value': 0.9829400000190731} ({'split': 'train'})
cross_entropy: {'epoch': 110, 'value': 0.05152782663822176} ({'split': 'train'})
accuracy: {'epoch': 110, 'value': 0.9167999786138535} ({'split': 'test'})
cross_entropy: {'epoch': 110, 'value': 0.3236001840233803} ({'split': 'test'})
We have a new best! with accuracy::0.9167999786138535 and at epoch::110, let's save it!
Epoch 111
accuracy: {'epoch': 111, 'value': 0.9826400000000001} ({'split': 'train'})
cross_entropy: {'epoch': 111, 'value': 0.05071780213713647} ({'split': 'train'})
accuracy: {'epoch': 111, 'value': 0.9121999830007551} ({'split': 'test'})
cross_entropy: {'epoch': 111, 'value': 0.3598941768705846} ({'split': 'test'})
Epoch 112
accuracy: {'epoch': 112, 'value': 0.9801600000381471} ({'split': 'train'})
cross_entropy: {'epoch': 112, 'value': 0.05789622557878494} ({'split': 'train'})
accuracy: {'epoch': 112, 'value': 0.901799982786179} ({'split': 'test'})
cross_entropy: {'epoch': 112, 'value': 0.38225039489567275} ({'split': 'test'})
Epoch 113
accuracy: {'epoch': 113, 'value': 0.98138} ({'split': 'train'})
cross_entropy: {'epoch': 113, 'value': 0.05598088240146636} ({'split': 'train'})
accuracy: {'epoch': 113, 'value': 0.9107999819517133} ({'split': 'test'})
cross_entropy: {'epoch': 113, 'value': 0.3668954583257436} ({'split': 'test'})
Epoch 114
accuracy: {'epoch': 114, 'value': 0.9804400000190735} ({'split': 'train'})
cross_entropy: {'epoch': 114, 'value': 0.05804853361129761} ({'split': 'train'})
accuracy: {'epoch': 114, 'value': 0.9077999818325043} ({'split': 'test'})
cross_entropy: {'epoch': 114, 'value': 0.40513322219252595} ({'split': 'test'})
Epoch 115
accuracy: {'epoch': 115, 'value': 0.9802799999809263} ({'split': 'train'})
cross_entropy: {'epoch': 115, 'value': 0.05831717754364014} ({'split': 'train'})
accuracy: {'epoch': 115, 'value': 0.9148999810218814} ({'split': 'test'})
cross_entropy: {'epoch': 115, 'value': 0.33718120675534} ({'split': 'test'})
Epoch 116
accuracy: {'epoch': 116, 'value': 0.9810400000190737} ({'split': 'train'})
cross_entropy: {'epoch': 116, 'value': 0.057049333945512766} ({'split': 'train'})
accuracy: {'epoch': 116, 'value': 0.9054999798536301} ({'split': 'test'})
cross_entropy: {'epoch': 116, 'value': 0.363354191929102} ({'split': 'test'})
Epoch 117
accuracy: {'epoch': 117, 'value': 0.9823600000381468} ({'split': 'train'})
cross_entropy: {'epoch': 117, 'value': 0.05283489075779914} ({'split': 'train'})
accuracy: {'epoch': 117, 'value': 0.9030999797582628} ({'split': 'test'})
cross_entropy: {'epoch': 117, 'value': 0.3773720015585422} ({'split': 'test'})
Epoch 118
accuracy: {'epoch': 118, 'value': 0.98286} ({'split': 'train'})
cross_entropy: {'epoch': 118, 'value': 0.051307765654027455} ({'split': 'train'})
accuracy: {'epoch': 118, 'value': 0.9100999814271924} ({'split': 'test'})
cross_entropy: {'epoch': 118, 'value': 0.3458907143026591} ({'split': 'test'})
Epoch 119
accuracy: {'epoch': 119, 'value': 0.9833200000381468} ({'split': 'train'})
cross_entropy: {'epoch': 119, 'value': 0.050926839438676826} ({'split': 'train'})
accuracy: {'epoch': 119, 'value': 0.9078999811410903} ({'split': 'test'})
cross_entropy: {'epoch': 119, 'value': 0.3509241025149822} ({'split': 'test'})
Epoch 120
accuracy: {'epoch': 120, 'value': 0.9832200000572212} ({'split': 'train'})
cross_entropy: {'epoch': 120, 'value': 0.05076946546554567} ({'split': 'train'})
accuracy: {'epoch': 120, 'value': 0.9076999807357786} ({'split': 'test'})
cross_entropy: {'epoch': 120, 'value': 0.3761447523906829} ({'split': 'test'})
Epoch 121
accuracy: {'epoch': 121, 'value': 0.9816200000572202} ({'split': 'train'})
cross_entropy: {'epoch': 121, 'value': 0.05498144272565842} ({'split': 'train'})
accuracy: {'epoch': 121, 'value': 0.9108999812602997} ({'split': 'test'})
cross_entropy: {'epoch': 121, 'value': 0.4096190270036461} ({'split': 'test'})
Epoch 122
accuracy: {'epoch': 122, 'value': 0.9829000000190738} ({'split': 'train'})
cross_entropy: {'epoch': 122, 'value': 0.052386992315053914} ({'split': 'train'})
accuracy: {'epoch': 122, 'value': 0.9094999825954437} ({'split': 'test'})
cross_entropy: {'epoch': 122, 'value': 0.3807995675504209} ({'split': 'test'})
Epoch 123
accuracy: {'epoch': 123, 'value': 0.9827000000190731} ({'split': 'train'})
cross_entropy: {'epoch': 123, 'value': 0.05251217456281186} ({'split': 'train'})
accuracy: {'epoch': 123, 'value': 0.9070999830961228} ({'split': 'test'})
cross_entropy: {'epoch': 123, 'value': 0.42930885627865784} ({'split': 'test'})
Epoch 124
accuracy: {'epoch': 124, 'value': 0.9827000000381468} ({'split': 'train'})
cross_entropy: {'epoch': 124, 'value': 0.05144015026807786} ({'split': 'train'})
accuracy: {'epoch': 124, 'value': 0.9033999782800676} ({'split': 'test'})
cross_entropy: {'epoch': 124, 'value': 0.4024473190307618} ({'split': 'test'})
Epoch 125
accuracy: {'epoch': 125, 'value': 0.9806600000190734} ({'split': 'train'})
cross_entropy: {'epoch': 125, 'value': 0.058990078095197684} ({'split': 'train'})
accuracy: {'epoch': 125, 'value': 0.9109999817609785} ({'split': 'test'})
cross_entropy: {'epoch': 125, 'value': 0.3596064320206643} ({'split': 'test'})
Epoch 126
accuracy: {'epoch': 126, 'value': 0.9811400000190735} ({'split': 'train'})
cross_entropy: {'epoch': 126, 'value': 0.057485881166458135} ({'split': 'train'})
accuracy: {'epoch': 126, 'value': 0.8979999792575839} ({'split': 'test'})
cross_entropy: {'epoch': 126, 'value': 0.3909351970255374} ({'split': 'test'})
Epoch 127
accuracy: {'epoch': 127, 'value': 0.9806600000572201} ({'split': 'train'})
cross_entropy: {'epoch': 127, 'value': 0.0598130346727371} ({'split': 'train'})
accuracy: {'epoch': 127, 'value': 0.9102999830245968} ({'split': 'test'})
cross_entropy: {'epoch': 127, 'value': 0.3596470823884011} ({'split': 'test'})
Epoch 128
accuracy: {'epoch': 128, 'value': 0.9817600000000003} ({'split': 'train'})
cross_entropy: {'epoch': 128, 'value': 0.0544533192062378} ({'split': 'train'})
accuracy: {'epoch': 128, 'value': 0.902199982404709} ({'split': 'test'})
cross_entropy: {'epoch': 128, 'value': 0.364659731835127} ({'split': 'test'})
Epoch 129
accuracy: {'epoch': 129, 'value': 0.9825200000572205} ({'split': 'train'})
cross_entropy: {'epoch': 129, 'value': 0.05288055252552033} ({'split': 'train'})
accuracy: {'epoch': 129, 'value': 0.9070999789237976} ({'split': 'test'})
cross_entropy: {'epoch': 129, 'value': 0.36141600236296667} ({'split': 'test'})
Epoch 130
accuracy: {'epoch': 130, 'value': 0.9825999999999996} ({'split': 'train'})
cross_entropy: {'epoch': 130, 'value': 0.05173651860654354} ({'split': 'train'})
accuracy: {'epoch': 130, 'value': 0.9105999839305877} ({'split': 'test'})
cross_entropy: {'epoch': 130, 'value': 0.35095272690057755} ({'split': 'test'})
Epoch 131
accuracy: {'epoch': 131, 'value': 0.9833400000190736} ({'split': 'train'})
cross_entropy: {'epoch': 131, 'value': 0.04997239409923552} ({'split': 'train'})
accuracy: {'epoch': 131, 'value': 0.9164999830722808} ({'split': 'test'})
cross_entropy: {'epoch': 131, 'value': 0.3295290704071522} ({'split': 'test'})
Epoch 132
accuracy: {'epoch': 132, 'value': 0.9837000000000006} ({'split': 'train'})
cross_entropy: {'epoch': 132, 'value': 0.047332820047736195} ({'split': 'train'})
accuracy: {'epoch': 132, 'value': 0.9049999797344208} ({'split': 'test'})
cross_entropy: {'epoch': 132, 'value': 0.37502441860735414} ({'split': 'test'})
Epoch 133
accuracy: {'epoch': 133, 'value': 0.9827000000381474} ({'split': 'train'})
cross_entropy: {'epoch': 133, 'value': 0.05194603596210482} ({'split': 'train'})
accuracy: {'epoch': 133, 'value': 0.9015999811887742} ({'split': 'test'})
cross_entropy: {'epoch': 133, 'value': 0.3696456553786993} ({'split': 'test'})
Epoch 134
accuracy: {'epoch': 134, 'value': 0.9813200000190738} ({'split': 'train'})
cross_entropy: {'epoch': 134, 'value': 0.054682868974208855} ({'split': 'train'})
accuracy: {'epoch': 134, 'value': 0.9111999803781508} ({'split': 'test'})
cross_entropy: {'epoch': 134, 'value': 0.39117579475045217} ({'split': 'test'})
Epoch 135
accuracy: {'epoch': 135, 'value': 0.9827400000190734} ({'split': 'train'})
cross_entropy: {'epoch': 135, 'value': 0.051331763740778} ({'split': 'train'})
accuracy: {'epoch': 135, 'value': 0.9063999819755555} ({'split': 'test'})
cross_entropy: {'epoch': 135, 'value': 0.38922812283039093} ({'split': 'test'})
Epoch 136
accuracy: {'epoch': 136, 'value': 0.9828400000190735} ({'split': 'train'})
cross_entropy: {'epoch': 136, 'value': 0.05166705770373344} ({'split': 'train'})
accuracy: {'epoch': 136, 'value': 0.9096999788284307} ({'split': 'test'})
cross_entropy: {'epoch': 136, 'value': 0.38439480729401104} ({'split': 'test'})
Epoch 137
accuracy: {'epoch': 137, 'value': 0.9842} ({'split': 'train'})
cross_entropy: {'epoch': 137, 'value': 0.049587474341392525} ({'split': 'train'})
accuracy: {'epoch': 137, 'value': 0.9062999796867371} ({'split': 'test'})
cross_entropy: {'epoch': 137, 'value': 0.3553376818448307} ({'split': 'test'})
Epoch 138
accuracy: {'epoch': 138, 'value': 0.9837800000381473} ({'split': 'train'})
cross_entropy: {'epoch': 138, 'value': 0.049111335073709496} ({'split': 'train'})
accuracy: {'epoch': 138, 'value': 0.9055999821424481} ({'split': 'test'})
cross_entropy: {'epoch': 138, 'value': 0.3819399230182173} ({'split': 'test'})
Epoch 139
accuracy: {'epoch': 139, 'value': 0.9843600000190738} ({'split': 'train'})
cross_entropy: {'epoch': 139, 'value': 0.04792985270202159} ({'split': 'train'})
accuracy: {'epoch': 139, 'value': 0.9141999799013137} ({'split': 'test'})
cross_entropy: {'epoch': 139, 'value': 0.34935796730220325} ({'split': 'test'})
Epoch 140
accuracy: {'epoch': 140, 'value': 0.9827800000190734} ({'split': 'train'})
cross_entropy: {'epoch': 140, 'value': 0.05074924466669559} ({'split': 'train'})
accuracy: {'epoch': 140, 'value': 0.910899980664253} ({'split': 'test'})
cross_entropy: {'epoch': 140, 'value': 0.34631182812154293} ({'split': 'test'})
Epoch 141
accuracy: {'epoch': 141, 'value': 0.9839000000190735} ({'split': 'train'})
cross_entropy: {'epoch': 141, 'value': 0.04844773424625399} ({'split': 'train'})
accuracy: {'epoch': 141, 'value': 0.9119999819993971} ({'split': 'test'})
cross_entropy: {'epoch': 141, 'value': 0.34603339537978156} ({'split': 'test'})
Epoch 142
accuracy: {'epoch': 142, 'value': 0.9816200000572205} ({'split': 'train'})
cross_entropy: {'epoch': 142, 'value': 0.05295975930213925} ({'split': 'train'})
accuracy: {'epoch': 142, 'value': 0.9116999769210815} ({'split': 'test'})
cross_entropy: {'epoch': 142, 'value': 0.38396529242396354} ({'split': 'test'})
Epoch 143
accuracy: {'epoch': 143, 'value': 0.9832599999999996} ({'split': 'train'})
cross_entropy: {'epoch': 143, 'value': 0.05184552469283345} ({'split': 'train'})
accuracy: {'epoch': 143, 'value': 0.9098999840021131} ({'split': 'test'})
cross_entropy: {'epoch': 143, 'value': 0.36420435674488544} ({'split': 'test'})
Epoch 144
accuracy: {'epoch': 144, 'value': 0.9836000000000003} ({'split': 'train'})
cross_entropy: {'epoch': 144, 'value': 0.04796032176733017} ({'split': 'train'})
accuracy: {'epoch': 144, 'value': 0.9097999799251555} ({'split': 'test'})
cross_entropy: {'epoch': 144, 'value': 0.3904108341783285} ({'split': 'test'})
Epoch 145
accuracy: {'epoch': 145, 'value': 0.982040000038147} ({'split': 'train'})
cross_entropy: {'epoch': 145, 'value': 0.05483507267713548} ({'split': 'train'})
accuracy: {'epoch': 145, 'value': 0.9059999787807466} ({'split': 'test'})
cross_entropy: {'epoch': 145, 'value': 0.4019781925529241} ({'split': 'test'})
Epoch 146
accuracy: {'epoch': 146, 'value': 0.9810200000190737} ({'split': 'train'})
cross_entropy: {'epoch': 146, 'value': 0.05775763598442076} ({'split': 'train'})
accuracy: {'epoch': 146, 'value': 0.9171999824047087} ({'split': 'test'})
cross_entropy: {'epoch': 146, 'value': 0.33672779694199567} ({'split': 'test'})
We have a new best! with accuracy::0.9171999824047087 and at epoch::146, let's save it!
Epoch 147
accuracy: {'epoch': 147, 'value': 0.9830400000572209} ({'split': 'train'})
cross_entropy: {'epoch': 147, 'value': 0.051955391075611104} ({'split': 'train'})
accuracy: {'epoch': 147, 'value': 0.9148999798297882} ({'split': 'test'})
cross_entropy: {'epoch': 147, 'value': 0.3434901257231831} ({'split': 'test'})
Epoch 148
accuracy: {'epoch': 148, 'value': 0.9830800000190735} ({'split': 'train'})
cross_entropy: {'epoch': 148, 'value': 0.0519858950603008} ({'split': 'train'})
accuracy: {'epoch': 148, 'value': 0.9023999798297884} ({'split': 'test'})
cross_entropy: {'epoch': 148, 'value': 0.4151214169710874} ({'split': 'test'})
Epoch 149
accuracy: {'epoch': 149, 'value': 0.9810800000572206} ({'split': 'train'})
cross_entropy: {'epoch': 149, 'value': 0.05645198118209838} ({'split': 'train'})
accuracy: {'epoch': 149, 'value': 0.9028999805450436} ({'split': 'test'})
cross_entropy: {'epoch': 149, 'value': 0.40976441644132133} ({'split': 'test'})
Epoch 150
accuracy: {'epoch': 150, 'value': 0.9943600000000002} ({'split': 'train'})
cross_entropy: {'epoch': 150, 'value': 0.01806037236519157} ({'split': 'train'})
accuracy: {'epoch': 150, 'value': 0.9269999843835831} ({'split': 'test'})
cross_entropy: {'epoch': 150, 'value': 0.30941562905907627} ({'split': 'test'})
We have a new best! with accuracy::0.9269999843835831 and at epoch::150, let's save it!
Epoch 151
accuracy: {'epoch': 151, 'value': 0.9973399999999999} ({'split': 'train'})
cross_entropy: {'epoch': 151, 'value': 0.008597883115857838} ({'split': 'train'})
accuracy: {'epoch': 151, 'value': 0.9292999815940857} ({'split': 'test'})
cross_entropy: {'epoch': 151, 'value': 0.31949145250022415} ({'split': 'test'})
We have a new best! with accuracy::0.9292999815940857 and at epoch::151, let's save it!
Epoch 152
accuracy: {'epoch': 152, 'value': 0.9980600000000002} ({'split': 'train'})
cross_entropy: {'epoch': 152, 'value': 0.005949291622787713} ({'split': 'train'})
accuracy: {'epoch': 152, 'value': 0.9308999836444852} ({'split': 'test'})
cross_entropy: {'epoch': 152, 'value': 0.32860554523766045} ({'split': 'test'})
We have a new best! with accuracy::0.9308999836444852 and at epoch::152, let's save it!
Epoch 153
accuracy: {'epoch': 153, 'value': 0.9984599999999999} ({'split': 'train'})
cross_entropy: {'epoch': 153, 'value': 0.004918917270917446} ({'split': 'train'})
accuracy: {'epoch': 153, 'value': 0.9307999825477598} ({'split': 'test'})
cross_entropy: {'epoch': 153, 'value': 0.3326357085257769} ({'split': 'test'})
Epoch 154
accuracy: {'epoch': 154, 'value': 0.9985400000000004} ({'split': 'train'})
cross_entropy: {'epoch': 154, 'value': 0.004394562070313841} ({'split': 'train'})
accuracy: {'epoch': 154, 'value': 0.9316999828815458} ({'split': 'test'})
cross_entropy: {'epoch': 154, 'value': 0.33271590854972577} ({'split': 'test'})
We have a new best! with accuracy::0.9316999828815458 and at epoch::154, let's save it!
Epoch 155
accuracy: {'epoch': 155, 'value': 0.9990999999999998} ({'split': 'train'})
cross_entropy: {'epoch': 155, 'value': 0.0031641274645179515} ({'split': 'train'})
accuracy: {'epoch': 155, 'value': 0.9320999807119372} ({'split': 'test'})
cross_entropy: {'epoch': 155, 'value': 0.3378667070344091} ({'split': 'test'})
We have a new best! with accuracy::0.9320999807119372 and at epoch::155, let's save it!
Epoch 156
accuracy: {'epoch': 156, 'value': 0.9990199999999995} ({'split': 'train'})
cross_entropy: {'epoch': 156, 'value': 0.0034029404369741675} ({'split': 'train'})
accuracy: {'epoch': 156, 'value': 0.9313999825716016} ({'split': 'test'})
cross_entropy: {'epoch': 156, 'value': 0.34243942566216007} ({'split': 'test'})
Epoch 157
accuracy: {'epoch': 157, 'value': 0.9990600000000003} ({'split': 'train'})
cross_entropy: {'epoch': 157, 'value': 0.003042547482997181} ({'split': 'train'})
accuracy: {'epoch': 157, 'value': 0.9310999840497971} ({'split': 'test'})
cross_entropy: {'epoch': 157, 'value': 0.3463344214297831} ({'split': 'test'})
Epoch 158
accuracy: {'epoch': 158, 'value': 0.9991399999999996} ({'split': 'train'})
cross_entropy: {'epoch': 158, 'value': 0.002864845075123011} ({'split': 'train'})
accuracy: {'epoch': 158, 'value': 0.9308999794721603} ({'split': 'test'})
cross_entropy: {'epoch': 158, 'value': 0.3501671537756921} ({'split': 'test'})
Epoch 159
accuracy: {'epoch': 159, 'value': 0.9993999999999997} ({'split': 'train'})
cross_entropy: {'epoch': 159, 'value': 0.0022832743658125387} ({'split': 'train'})
accuracy: {'epoch': 159, 'value': 0.9303999799489975} ({'split': 'test'})
cross_entropy: {'epoch': 159, 'value': 0.35577695649117225} ({'split': 'test'})
Epoch 160
accuracy: {'epoch': 160, 'value': 0.9994999999999999} ({'split': 'train'})
cross_entropy: {'epoch': 160, 'value': 0.002182346345316619} ({'split': 'train'})
accuracy: {'epoch': 160, 'value': 0.9309999817609788} ({'split': 'test'})
cross_entropy: {'epoch': 160, 'value': 0.35947184905409807} ({'split': 'test'})
Epoch 161
accuracy: {'epoch': 161, 'value': 0.9994799999999996} ({'split': 'train'})
cross_entropy: {'epoch': 161, 'value': 0.0019066236543655395} ({'split': 'train'})
accuracy: {'epoch': 161, 'value': 0.9313999807834624} ({'split': 'test'})
cross_entropy: {'epoch': 161, 'value': 0.36479035072028637} ({'split': 'test'})
Epoch 162
accuracy: {'epoch': 162, 'value': 0.9993799999999999} ({'split': 'train'})
cross_entropy: {'epoch': 162, 'value': 0.0021368469793628876} ({'split': 'train'})
accuracy: {'epoch': 162, 'value': 0.9326999807357789} ({'split': 'test'})
cross_entropy: {'epoch': 162, 'value': 0.35452153407037246} ({'split': 'test'})
We have a new best! with accuracy::0.9326999807357789 and at epoch::162, let's save it!
Epoch 163
accuracy: {'epoch': 163, 'value': 0.9994400000190733} ({'split': 'train'})
cross_entropy: {'epoch': 163, 'value': 0.0020336024949327122} ({'split': 'train'})
accuracy: {'epoch': 163, 'value': 0.9319999837875365} ({'split': 'test'})
cross_entropy: {'epoch': 163, 'value': 0.35860732585191724} ({'split': 'test'})
Epoch 164
accuracy: {'epoch': 164, 'value': 0.9994999999999997} ({'split': 'train'})
cross_entropy: {'epoch': 164, 'value': 0.0017936402820423244} ({'split': 'train'})
accuracy: {'epoch': 164, 'value': 0.9313999831676486} ({'split': 'test'})
cross_entropy: {'epoch': 164, 'value': 0.3598744602128864} ({'split': 'test'})
Epoch 165
accuracy: {'epoch': 165, 'value': 0.99952} ({'split': 'train'})
cross_entropy: {'epoch': 165, 'value': 0.0015646635819482624} ({'split': 'train'})
accuracy: {'epoch': 165, 'value': 0.9324999827146528} ({'split': 'test'})
cross_entropy: {'epoch': 165, 'value': 0.3541418230161071} ({'split': 'test'})
Epoch 166
accuracy: {'epoch': 166, 'value': 0.99944} ({'split': 'train'})
cross_entropy: {'epoch': 166, 'value': 0.001697363516055047} ({'split': 'train'})
accuracy: {'epoch': 166, 'value': 0.9326999825239184} ({'split': 'test'})
cross_entropy: {'epoch': 166, 'value': 0.35634627722203727} ({'split': 'test'})
We have a new best! with accuracy::0.9326999825239184 and at epoch::166, let's save it!
Epoch 167
accuracy: {'epoch': 167, 'value': 0.9996399999999994} ({'split': 'train'})
cross_entropy: {'epoch': 167, 'value': 0.0012942177827842535} ({'split': 'train'})
accuracy: {'epoch': 167, 'value': 0.9321999830007557} ({'split': 'test'})
cross_entropy: {'epoch': 167, 'value': 0.362174071483314} ({'split': 'test'})
Epoch 168
accuracy: {'epoch': 168, 'value': 0.9998199999999998} ({'split': 'train'})
cross_entropy: {'epoch': 168, 'value': 0.0011927864270098508} ({'split': 'train'})
accuracy: {'epoch': 168, 'value': 0.9317999821901323} ({'split': 'test'})
cross_entropy: {'epoch': 168, 'value': 0.36683443799614907} ({'split': 'test'})
Epoch 169
accuracy: {'epoch': 169, 'value': 0.9996599999999997} ({'split': 'train'})
cross_entropy: {'epoch': 169, 'value': 0.001236567826606333} ({'split': 'train'})
accuracy: {'epoch': 169, 'value': 0.9314999806880949} ({'split': 'test'})
cross_entropy: {'epoch': 169, 'value': 0.3697532176226376} ({'split': 'test'})
Epoch 170
accuracy: {'epoch': 170, 'value': 0.9997599999999996} ({'split': 'train'})
cross_entropy: {'epoch': 170, 'value': 0.0010462440004758526} ({'split': 'train'})
accuracy: {'epoch': 170, 'value': 0.9310999822616578} ({'split': 'test'})
cross_entropy: {'epoch': 170, 'value': 0.3746845943108201} ({'split': 'test'})
Epoch 171
accuracy: {'epoch': 171, 'value': 0.9996} ({'split': 'train'})
cross_entropy: {'epoch': 171, 'value': 0.0012474631540523831} ({'split': 'train'})
accuracy: {'epoch': 171, 'value': 0.932299983501434} ({'split': 'test'})
cross_entropy: {'epoch': 171, 'value': 0.3765693651884795} ({'split': 'test'})
Epoch 172
accuracy: {'epoch': 172, 'value': 0.9996600000000001} ({'split': 'train'})
cross_entropy: {'epoch': 172, 'value': 0.00129411463338416} ({'split': 'train'})
accuracy: {'epoch': 172, 'value': 0.9317999833822251} ({'split': 'test'})
cross_entropy: {'epoch': 172, 'value': 0.3755748431757092} ({'split': 'test'})
Epoch 173
accuracy: {'epoch': 173, 'value': 0.9998400000190732} ({'split': 'train'})
cross_entropy: {'epoch': 173, 'value': 0.0008903070245124402} ({'split': 'train'})
accuracy: {'epoch': 173, 'value': 0.9318999826908111} ({'split': 'test'})
cross_entropy: {'epoch': 173, 'value': 0.3745202676579358} ({'split': 'test'})
Epoch 174
accuracy: {'epoch': 174, 'value': 0.9999199999999999} ({'split': 'train'})
cross_entropy: {'epoch': 174, 'value': 0.0007608522878854998} ({'split': 'train'})
accuracy: {'epoch': 174, 'value': 0.9331999820470809} ({'split': 'test'})
cross_entropy: {'epoch': 174, 'value': 0.37978905372321603} ({'split': 'test'})
We have a new best! with accuracy::0.9331999820470809 and at epoch::174, let's save it!
Epoch 175
accuracy: {'epoch': 175, 'value': 0.9996800000000002} ({'split': 'train'})
cross_entropy: {'epoch': 175, 'value': 0.0010111749113909906} ({'split': 'train'})
accuracy: {'epoch': 175, 'value': 0.9324999797344208} ({'split': 'test'})
cross_entropy: {'epoch': 175, 'value': 0.3762747692689298} ({'split': 'test'})
Epoch 176
accuracy: {'epoch': 176, 'value': 0.9997600000000001} ({'split': 'train'})
cross_entropy: {'epoch': 176, 'value': 0.0010622306234342972} ({'split': 'train'})
accuracy: {'epoch': 176, 'value': 0.9328999823331833} ({'split': 'test'})
cross_entropy: {'epoch': 176, 'value': 0.3737453559041022} ({'split': 'test'})
Epoch 177
accuracy: {'epoch': 177, 'value': 0.99984} ({'split': 'train'})
cross_entropy: {'epoch': 177, 'value': 0.0006928711835108702} ({'split': 'train'})
accuracy: {'epoch': 177, 'value': 0.9326999825239184} ({'split': 'test'})
cross_entropy: {'epoch': 177, 'value': 0.3807907993718983} ({'split': 'test'})
Epoch 178
accuracy: {'epoch': 178, 'value': 0.9999} ({'split': 'train'})
cross_entropy: {'epoch': 178, 'value': 0.0006968307296675634} ({'split': 'train'})
accuracy: {'epoch': 178, 'value': 0.9336999821662902} ({'split': 'test'})
cross_entropy: {'epoch': 178, 'value': 0.37706450015306475} ({'split': 'test'})
We have a new best! with accuracy::0.9336999821662902 and at epoch::178, let's save it!
Epoch 179
accuracy: {'epoch': 179, 'value': 0.9997799999999998} ({'split': 'train'})
cross_entropy: {'epoch': 179, 'value': 0.0008964436466572804} ({'split': 'train'})
accuracy: {'epoch': 179, 'value': 0.9326999825239183} ({'split': 'test'})
cross_entropy: {'epoch': 179, 'value': 0.3780864272266625} ({'split': 'test'})
Epoch 180
accuracy: {'epoch': 180, 'value': 0.9997399999999999} ({'split': 'train'})
cross_entropy: {'epoch': 180, 'value': 0.0007472072345018385} ({'split': 'train'})
accuracy: {'epoch': 180, 'value': 0.9333999830484392} ({'split': 'test'})
cross_entropy: {'epoch': 180, 'value': 0.3813389608263969} ({'split': 'test'})
Epoch 181
accuracy: {'epoch': 181, 'value': 0.9999} ({'split': 'train'})
cross_entropy: {'epoch': 181, 'value': 0.0006518759863730524} ({'split': 'train'})
accuracy: {'epoch': 181, 'value': 0.9330999815464021} ({'split': 'test'})
cross_entropy: {'epoch': 181, 'value': 0.3774056217819453} ({'split': 'test'})
Epoch 182
accuracy: {'epoch': 182, 'value': 0.9998799999999999} ({'split': 'train'})
cross_entropy: {'epoch': 182, 'value': 0.000678583114044741} ({'split': 'train'})
accuracy: {'epoch': 182, 'value': 0.9329999822378159} ({'split': 'test'})
cross_entropy: {'epoch': 182, 'value': 0.38374825745821} ({'split': 'test'})
Epoch 183
accuracy: {'epoch': 183, 'value': 0.9998799999999998} ({'split': 'train'})
cross_entropy: {'epoch': 183, 'value': 0.0007825350270397032} ({'split': 'train'})
accuracy: {'epoch': 183, 'value': 0.9326999819278716} ({'split': 'test'})
cross_entropy: {'epoch': 183, 'value': 0.38304849456995743} ({'split': 'test'})
Epoch 184
accuracy: {'epoch': 184, 'value': 0.9998200000000002} ({'split': 'train'})
cross_entropy: {'epoch': 184, 'value': 0.0007870393425831573} ({'split': 'train'})
accuracy: {'epoch': 184, 'value': 0.9327999836206438} ({'split': 'test'})
cross_entropy: {'epoch': 184, 'value': 0.3864913812279703} ({'split': 'test'})
Epoch 185
accuracy: {'epoch': 185, 'value': 0.99972} ({'split': 'train'})
cross_entropy: {'epoch': 185, 'value': 0.0008919207411422402} ({'split': 'train'})
accuracy: {'epoch': 185, 'value': 0.9331999814510347} ({'split': 'test'})
cross_entropy: {'epoch': 185, 'value': 0.3809442804008724} ({'split': 'test'})
Epoch 186
accuracy: {'epoch': 186, 'value': 0.9998599999999997} ({'split': 'train'})
cross_entropy: {'epoch': 186, 'value': 0.0008469343255599961} ({'split': 'train'})
accuracy: {'epoch': 186, 'value': 0.9332999807596207} ({'split': 'test'})
cross_entropy: {'epoch': 186, 'value': 0.3781802999600767} ({'split': 'test'})
Epoch 187
accuracy: {'epoch': 187, 'value': 0.9997799999999997} ({'split': 'train'})
cross_entropy: {'epoch': 187, 'value': 0.0007839546052576045} ({'split': 'train'})
accuracy: {'epoch': 187, 'value': 0.9342999792099} ({'split': 'test'})
cross_entropy: {'epoch': 187, 'value': 0.37445523966103794} ({'split': 'test'})
We have a new best! with accuracy::0.9342999792099 and at epoch::187, let's save it!
Epoch 188
accuracy: {'epoch': 188, 'value': 0.9998799999999998} ({'split': 'train'})
cross_entropy: {'epoch': 188, 'value': 0.0006201734315510838} ({'split': 'train'})
accuracy: {'epoch': 188, 'value': 0.9333999812603001} ({'split': 'test'})
cross_entropy: {'epoch': 188, 'value': 0.3803827551752328} ({'split': 'test'})
Epoch 189
accuracy: {'epoch': 189, 'value': 0.9998599999999999} ({'split': 'train'})
cross_entropy: {'epoch': 189, 'value': 0.0007159469657856969} ({'split': 'train'})
accuracy: {'epoch': 189, 'value': 0.9346999812126158} ({'split': 'test'})
cross_entropy: {'epoch': 189, 'value': 0.3779670915007592} ({'split': 'test'})
We have a new best! with accuracy::0.9346999812126158 and at epoch::189, let's save it!
Epoch 190
accuracy: {'epoch': 190, 'value': 0.9998599999999997} ({'split': 'train'})
cross_entropy: {'epoch': 190, 'value': 0.0006996081942692398} ({'split': 'train'})
accuracy: {'epoch': 190, 'value': 0.9338999807834625} ({'split': 'test'})
cross_entropy: {'epoch': 190, 'value': 0.38330379158258426} ({'split': 'test'})
Epoch 191
accuracy: {'epoch': 191, 'value': 0.9998199999999996} ({'split': 'train'})
cross_entropy: {'epoch': 191, 'value': 0.0007065999274607748} ({'split': 'train'})
accuracy: {'epoch': 191, 'value': 0.9328999787569043} ({'split': 'test'})
cross_entropy: {'epoch': 191, 'value': 0.3819452673941851} ({'split': 'test'})
Epoch 192
accuracy: {'epoch': 192, 'value': 0.99984} ({'split': 'train'})
cross_entropy: {'epoch': 192, 'value': 0.0006061055261106234} ({'split': 'train'})
accuracy: {'epoch': 192, 'value': 0.9335999816656111} ({'split': 'test'})
cross_entropy: {'epoch': 192, 'value': 0.3808314469084144} ({'split': 'test'})
Epoch 193
accuracy: {'epoch': 193, 'value': 0.9998200000000003} ({'split': 'train'})
cross_entropy: {'epoch': 193, 'value': 0.000685523580736481} ({'split': 'train'})
accuracy: {'epoch': 193, 'value': 0.9329999816417694} ({'split': 'test'})
cross_entropy: {'epoch': 193, 'value': 0.37754880972206595} ({'split': 'test'})
Epoch 194
accuracy: {'epoch': 194, 'value': 0.9998799999999999} ({'split': 'train'})
cross_entropy: {'epoch': 194, 'value': 0.0006639569306734484} ({'split': 'train'})
accuracy: {'epoch': 194, 'value': 0.9317999821901324} ({'split': 'test'})
cross_entropy: {'epoch': 194, 'value': 0.3781335230171681} ({'split': 'test'})
Epoch 195
accuracy: {'epoch': 195, 'value': 0.9998599999999997} ({'split': 'train'})
cross_entropy: {'epoch': 195, 'value': 0.0005786791133880617} ({'split': 'train'})
accuracy: {'epoch': 195, 'value': 0.9322999829053878} ({'split': 'test'})
cross_entropy: {'epoch': 195, 'value': 0.3815006211400032} ({'split': 'test'})
Epoch 196
accuracy: {'epoch': 196, 'value': 0.9999399999999999} ({'split': 'train'})
cross_entropy: {'epoch': 196, 'value': 0.000608684451291337} ({'split': 'train'})
accuracy: {'epoch': 196, 'value': 0.9321999835968018} ({'split': 'test'})
cross_entropy: {'epoch': 196, 'value': 0.38394426200538867} ({'split': 'test'})
Epoch 197
accuracy: {'epoch': 197, 'value': 0.9998999999999998} ({'split': 'train'})
cross_entropy: {'epoch': 197, 'value': 0.0006079758782917635} ({'split': 'train'})
accuracy: {'epoch': 197, 'value': 0.9330999815464016} ({'split': 'test'})
cross_entropy: {'epoch': 197, 'value': 0.3848296352475883} ({'split': 'test'})
Epoch 198
accuracy: {'epoch': 198, 'value': 0.9998200000000004} ({'split': 'train'})
cross_entropy: {'epoch': 198, 'value': 0.0008239785341871898} ({'split': 'train'})
accuracy: {'epoch': 198, 'value': 0.9318999814987186} ({'split': 'test'})
cross_entropy: {'epoch': 198, 'value': 0.3872475930303335} ({'split': 'test'})
Epoch 199
accuracy: {'epoch': 199, 'value': 0.9999599999999993} ({'split': 'train'})
cross_entropy: {'epoch': 199, 'value': 0.0005240963189490142} ({'split': 'train'})
accuracy: {'epoch': 199, 'value': 0.9334999835491181} ({'split': 'test'})
cross_entropy: {'epoch': 199, 'value': 0.3856816908344627} ({'split': 'test'})
Epoch 200
accuracy: {'epoch': 200, 'value': 0.9998999999999998} ({'split': 'train'})
cross_entropy: {'epoch': 200, 'value': 0.0005603956495213788} ({'split': 'train'})
accuracy: {'epoch': 200, 'value': 0.9316999810934068} ({'split': 'test'})
cross_entropy: {'epoch': 200, 'value': 0.39106592275202257} ({'split': 'test'})
Epoch 201
accuracy: {'epoch': 201, 'value': 0.9998799999999998} ({'split': 'train'})
cross_entropy: {'epoch': 201, 'value': 0.0006720706002227964} ({'split': 'train'})
accuracy: {'epoch': 201, 'value': 0.9330999815464021} ({'split': 'test'})
cross_entropy: {'epoch': 201, 'value': 0.38510707180947057} ({'split': 'test'})
Epoch 202
accuracy: {'epoch': 202, 'value': 0.9999} ({'split': 'train'})
cross_entropy: {'epoch': 202, 'value': 0.0005819449981593062} ({'split': 'train'})
accuracy: {'epoch': 202, 'value': 0.9324999833106996} ({'split': 'test'})
cross_entropy: {'epoch': 202, 'value': 0.3855956039577722} ({'split': 'test'})
Epoch 203
accuracy: {'epoch': 203, 'value': 0.99996} ({'split': 'train'})
cross_entropy: {'epoch': 203, 'value': 0.0005308722890354692} ({'split': 'train'})
accuracy: {'epoch': 203, 'value': 0.9330999833345415} ({'split': 'test'})
cross_entropy: {'epoch': 203, 'value': 0.3897022674977779} ({'split': 'test'})
Epoch 204
accuracy: {'epoch': 204, 'value': 0.9998399999999997} ({'split': 'train'})
cross_entropy: {'epoch': 204, 'value': 0.0006895718751195819} ({'split': 'train'})
accuracy: {'epoch': 204, 'value': 0.9322999835014344} ({'split': 'test'})
cross_entropy: {'epoch': 204, 'value': 0.38355079483240834} ({'split': 'test'})
Epoch 205
accuracy: {'epoch': 205, 'value': 0.9998999999999995} ({'split': 'train'})
cross_entropy: {'epoch': 205, 'value': 0.000536330556292087} ({'split': 'train'})
accuracy: {'epoch': 205, 'value': 0.9322999835014345} ({'split': 'test'})
cross_entropy: {'epoch': 205, 'value': 0.3855152370408178} ({'split': 'test'})
Epoch 206
accuracy: {'epoch': 206, 'value': 0.9998799999999993} ({'split': 'train'})
cross_entropy: {'epoch': 206, 'value': 0.0005954345040791667} ({'split': 'train'})
accuracy: {'epoch': 206, 'value': 0.932599982023239} ({'split': 'test'})
cross_entropy: {'epoch': 206, 'value': 0.37857390198856594} ({'split': 'test'})
Epoch 207
accuracy: {'epoch': 207, 'value': 0.9999199999999997} ({'split': 'train'})
cross_entropy: {'epoch': 207, 'value': 0.000550838814936579} ({'split': 'train'})
accuracy: {'epoch': 207, 'value': 0.9329999840259553} ({'split': 'test'})
cross_entropy: {'epoch': 207, 'value': 0.3859424208849667} ({'split': 'test'})
Epoch 208
accuracy: {'epoch': 208, 'value': 0.9998999999999996} ({'split': 'train'})
cross_entropy: {'epoch': 208, 'value': 0.0005839082143362616} ({'split': 'train'})
accuracy: {'epoch': 208, 'value': 0.9323999828100203} ({'split': 'test'})
cross_entropy: {'epoch': 208, 'value': 0.3896189276874065} ({'split': 'test'})
Epoch 209
accuracy: {'epoch': 209, 'value': 0.9999399999999998} ({'split': 'train'})
cross_entropy: {'epoch': 209, 'value': 0.0005023919110046697} ({'split': 'train'})
accuracy: {'epoch': 209, 'value': 0.9318999832868576} ({'split': 'test'})
cross_entropy: {'epoch': 209, 'value': 0.3883153511211275} ({'split': 'test'})
Epoch 210
accuracy: {'epoch': 210, 'value': 0.99994} ({'split': 'train'})
cross_entropy: {'epoch': 210, 'value': 0.0005634402874275108} ({'split': 'train'})
accuracy: {'epoch': 210, 'value': 0.9313999819755554} ({'split': 'test'})
cross_entropy: {'epoch': 210, 'value': 0.39547034271061426} ({'split': 'test'})
Epoch 211
accuracy: {'epoch': 211, 'value': 0.99984} ({'split': 'train'})
cross_entropy: {'epoch': 211, 'value': 0.0007418755269423125} ({'split': 'train'})
accuracy: {'epoch': 211, 'value': 0.932499982714653} ({'split': 'test'})
cross_entropy: {'epoch': 211, 'value': 0.38430754967033853} ({'split': 'test'})
Epoch 212
accuracy: {'epoch': 212, 'value': 0.9999199999999997} ({'split': 'train'})
cross_entropy: {'epoch': 212, 'value': 0.0005099094244372098} ({'split': 'train'})
accuracy: {'epoch': 212, 'value': 0.9315999835729596} ({'split': 'test'})
cross_entropy: {'epoch': 212, 'value': 0.3852161946147681} ({'split': 'test'})
Epoch 213
accuracy: {'epoch': 213, 'value': 0.9999399999999999} ({'split': 'train'})
cross_entropy: {'epoch': 213, 'value': 0.0004759320624452085} ({'split': 'train'})
accuracy: {'epoch': 213, 'value': 0.932999983429909} ({'split': 'test'})
cross_entropy: {'epoch': 213, 'value': 0.3838646966591478} ({'split': 'test'})
Epoch 214
accuracy: {'epoch': 214, 'value': 0.9999199999999996} ({'split': 'train'})
cross_entropy: {'epoch': 214, 'value': 0.0005922383983409962} ({'split': 'train'})
accuracy: {'epoch': 214, 'value': 0.9330999833345412} ({'split': 'test'})
cross_entropy: {'epoch': 214, 'value': 0.3830344849079848} ({'split': 'test'})
Epoch 215
accuracy: {'epoch': 215, 'value': 0.9998999999999996} ({'split': 'train'})
cross_entropy: {'epoch': 215, 'value': 0.0005114577281707897} ({'split': 'train'})
accuracy: {'epoch': 215, 'value': 0.9326999843120574} ({'split': 'test'})
cross_entropy: {'epoch': 215, 'value': 0.3870347791910171} ({'split': 'test'})
Epoch 216
accuracy: {'epoch': 216, 'value': 0.9998199999999999} ({'split': 'train'})
cross_entropy: {'epoch': 216, 'value': 0.0007283913384750481} ({'split': 'train'})
accuracy: {'epoch': 216, 'value': 0.9316999828815462} ({'split': 'test'})
cross_entropy: {'epoch': 216, 'value': 0.38909083075821405} ({'split': 'test'})
Epoch 217
accuracy: {'epoch': 217, 'value': 0.9998999999999999} ({'split': 'train'})
cross_entropy: {'epoch': 217, 'value': 0.0006879581032041462} ({'split': 'train'})
accuracy: {'epoch': 217, 'value': 0.9328999835252764} ({'split': 'test'})
cross_entropy: {'epoch': 217, 'value': 0.3805979528278114} ({'split': 'test'})
Epoch 218
accuracy: {'epoch': 218, 'value': 0.9999599999999995} ({'split': 'train'})
cross_entropy: {'epoch': 218, 'value': 0.00046927807961590594} ({'split': 'train'})
accuracy: {'epoch': 218, 'value': 0.9335999828577042} ({'split': 'test'})
cross_entropy: {'epoch': 218, 'value': 0.3826302110403777} ({'split': 'test'})
Epoch 219
accuracy: {'epoch': 219, 'value': 0.9999399999999999} ({'split': 'train'})
cross_entropy: {'epoch': 219, 'value': 0.0005129939789604391} ({'split': 'train'})
accuracy: {'epoch': 219, 'value': 0.9324999845027925} ({'split': 'test'})
cross_entropy: {'epoch': 219, 'value': 0.3867277943342923} ({'split': 'test'})
Epoch 220
accuracy: {'epoch': 220, 'value': 0.9999599999999996} ({'split': 'train'})
cross_entropy: {'epoch': 220, 'value': 0.000479590598418145} ({'split': 'train'})
accuracy: {'epoch': 220, 'value': 0.9325999832153322} ({'split': 'test'})
cross_entropy: {'epoch': 220, 'value': 0.3862697260081768} ({'split': 'test'})
Epoch 221
accuracy: {'epoch': 221, 'value': 1.0} ({'split': 'train'})
cross_entropy: {'epoch': 221, 'value': 0.00044786903251020676} ({'split': 'train'})
accuracy: {'epoch': 221, 'value': 0.9332999843358996} ({'split': 'test'})
cross_entropy: {'epoch': 221, 'value': 0.3901928905397654} ({'split': 'test'})
Epoch 222
accuracy: {'epoch': 222, 'value': 0.9999599999999993} ({'split': 'train'})
cross_entropy: {'epoch': 222, 'value': 0.0004990562771540133} ({'split': 'train'})
accuracy: {'epoch': 222, 'value': 0.9335999828577042} ({'split': 'test'})
cross_entropy: {'epoch': 222, 'value': 0.38832676060497756} ({'split': 'test'})
Epoch 223
accuracy: {'epoch': 223, 'value': 0.9999399999999994} ({'split': 'train'})
cross_entropy: {'epoch': 223, 'value': 0.0005227352869510648} ({'split': 'train'})
accuracy: {'epoch': 223, 'value': 0.9339999836683273} ({'split': 'test'})
cross_entropy: {'epoch': 223, 'value': 0.38662264127284285} ({'split': 'test'})
Epoch 224
accuracy: {'epoch': 224, 'value': 0.9998599999999999} ({'split': 'train'})
cross_entropy: {'epoch': 224, 'value': 0.0007559576837439093} ({'split': 'train'})
accuracy: {'epoch': 224, 'value': 0.9334999835491182} ({'split': 'test'})
cross_entropy: {'epoch': 224, 'value': 0.3821628335863353} ({'split': 'test'})
Epoch 225
accuracy: {'epoch': 225, 'value': 0.9999399999999999} ({'split': 'train'})
cross_entropy: {'epoch': 225, 'value': 0.0006222853026632219} ({'split': 'train'})
accuracy: {'epoch': 225, 'value': 0.9335999816656116} ({'split': 'test'})
cross_entropy: {'epoch': 225, 'value': 0.3841731275618077} ({'split': 'test'})
Epoch 226
accuracy: {'epoch': 226, 'value': 0.99996} ({'split': 'train'})
cross_entropy: {'epoch': 226, 'value': 0.0004709135015623178} ({'split': 'train'})
accuracy: {'epoch': 226, 'value': 0.9346999818086621} ({'split': 'test'})
cross_entropy: {'epoch': 226, 'value': 0.38849397718906403} ({'split': 'test'})
We have a new best! with accuracy::0.9346999818086621 and at epoch::226, let's save it!
Epoch 227
accuracy: {'epoch': 227, 'value': 0.9999599999999995} ({'split': 'train'})
cross_entropy: {'epoch': 227, 'value': 0.00045802390791766813} ({'split': 'train'})
accuracy: {'epoch': 227, 'value': 0.9344999837875363} ({'split': 'test'})
cross_entropy: {'epoch': 227, 'value': 0.39032313100993643} ({'split': 'test'})
Epoch 228
accuracy: {'epoch': 228, 'value': 0.9999199999999998} ({'split': 'train'})
cross_entropy: {'epoch': 228, 'value': 0.0005485235726553949} ({'split': 'train'})
accuracy: {'epoch': 228, 'value': 0.9332999837398529} ({'split': 'test'})
cross_entropy: {'epoch': 228, 'value': 0.38872916862368595} ({'split': 'test'})
Epoch 229
accuracy: {'epoch': 229, 'value': 0.9998799999999999} ({'split': 'train'})
cross_entropy: {'epoch': 229, 'value': 0.0006642835537623616} ({'split': 'train'})
accuracy: {'epoch': 229, 'value': 0.9342999839782713} ({'split': 'test'})
cross_entropy: {'epoch': 229, 'value': 0.3895775085315107} ({'split': 'test'})
Epoch 230
accuracy: {'epoch': 230, 'value': 0.9998799999999998} ({'split': 'train'})
cross_entropy: {'epoch': 230, 'value': 0.0006327804176590874} ({'split': 'train'})
accuracy: {'epoch': 230, 'value': 0.9344999831914901} ({'split': 'test'})
cross_entropy: {'epoch': 230, 'value': 0.3877932065352799} ({'split': 'test'})
Epoch 231
accuracy: {'epoch': 231, 'value': 0.9999800000000001} ({'split': 'train'})
cross_entropy: {'epoch': 231, 'value': 0.00043443455506465405} ({'split': 'train'})
accuracy: {'epoch': 231, 'value': 0.9335999846458436} ({'split': 'test'})
cross_entropy: {'epoch': 231, 'value': 0.39160310886800304} ({'split': 'test'})
Epoch 232
accuracy: {'epoch': 232, 'value': 0.9999199999999995} ({'split': 'train'})
cross_entropy: {'epoch': 232, 'value': 0.0005075182022061199} ({'split': 'train'})
accuracy: {'epoch': 232, 'value': 0.9325999838113782} ({'split': 'test'})
cross_entropy: {'epoch': 232, 'value': 0.3971756744384766} ({'split': 'test'})
Epoch 233
accuracy: {'epoch': 233, 'value': 0.9999000000000001} ({'split': 'train'})
cross_entropy: {'epoch': 233, 'value': 0.0005165949820913372} ({'split': 'train'})
accuracy: {'epoch': 233, 'value': 0.9333999842405319} ({'split': 'test'})
cross_entropy: {'epoch': 233, 'value': 0.3996374078840016} ({'split': 'test'})
Epoch 234
accuracy: {'epoch': 234, 'value': 0.9999600000000001} ({'split': 'train'})
cross_entropy: {'epoch': 234, 'value': 0.0005409367236401891} ({'split': 'train'})
accuracy: {'epoch': 234, 'value': 0.933399983048439} ({'split': 'test'})
cross_entropy: {'epoch': 234, 'value': 0.392384795472026} ({'split': 'test'})
Epoch 235
accuracy: {'epoch': 235, 'value': 0.99998} ({'split': 'train'})
cross_entropy: {'epoch': 235, 'value': 0.00045512292322702713} ({'split': 'train'})
accuracy: {'epoch': 235, 'value': 0.9342999815940856} ({'split': 'test'})
cross_entropy: {'epoch': 235, 'value': 0.39771040141582487} ({'split': 'test'})
Epoch 236
accuracy: {'epoch': 236, 'value': 0.9998999999999997} ({'split': 'train'})
cross_entropy: {'epoch': 236, 'value': 0.0005116256599221381} ({'split': 'train'})
accuracy: {'epoch': 236, 'value': 0.933299983739853} ({'split': 'test'})
cross_entropy: {'epoch': 236, 'value': 0.4031789090484381} ({'split': 'test'})
Epoch 237
accuracy: {'epoch': 237, 'value': 0.9999399999999999} ({'split': 'train'})
cross_entropy: {'epoch': 237, 'value': 0.000544600882860832} ({'split': 'train'})
accuracy: {'epoch': 237, 'value': 0.9332999837398531} ({'split': 'test'})
cross_entropy: {'epoch': 237, 'value': 0.3990892019122841} ({'split': 'test'})
Epoch 238
accuracy: {'epoch': 238, 'value': 0.9998999999999999} ({'split': 'train'})
cross_entropy: {'epoch': 238, 'value': 0.0006448918356420474} ({'split': 'train'})
accuracy: {'epoch': 238, 'value': 0.9325999838113784} ({'split': 'test'})
cross_entropy: {'epoch': 238, 'value': 0.4026770441979171} ({'split': 'test'})
Epoch 239
accuracy: {'epoch': 239, 'value': 0.9999399999999995} ({'split': 'train'})
cross_entropy: {'epoch': 239, 'value': 0.0005119390471419318} ({'split': 'train'})
accuracy: {'epoch': 239, 'value': 0.9349999839067461} ({'split': 'test'})
cross_entropy: {'epoch': 239, 'value': 0.3904665131121873} ({'split': 'test'})
We have a new best! with accuracy::0.9349999839067461 and at epoch::239, let's save it!
Epoch 240
accuracy: {'epoch': 240, 'value': 0.9999199999999996} ({'split': 'train'})
cross_entropy: {'epoch': 240, 'value': 0.0005878487355262039} ({'split': 'train'})
accuracy: {'epoch': 240, 'value': 0.9326999819278717} ({'split': 'test'})
cross_entropy: {'epoch': 240, 'value': 0.3925972107052804} ({'split': 'test'})
Epoch 241
accuracy: {'epoch': 241, 'value': 0.9999800000000002} ({'split': 'train'})
cross_entropy: {'epoch': 241, 'value': 0.0004694279418396763} ({'split': 'train'})
accuracy: {'epoch': 241, 'value': 0.9322999823093415} ({'split': 'test'})
cross_entropy: {'epoch': 241, 'value': 0.3982098564505576} ({'split': 'test'})
Epoch 242
accuracy: {'epoch': 242, 'value': 0.9999599999999998} ({'split': 'train'})
cross_entropy: {'epoch': 242, 'value': 0.0005214143662212884} ({'split': 'train'})
accuracy: {'epoch': 242, 'value': 0.9339999842643737} ({'split': 'test'})
cross_entropy: {'epoch': 242, 'value': 0.3993725012242796} ({'split': 'test'})
Epoch 243
accuracy: {'epoch': 243, 'value': 0.9998799999999998} ({'split': 'train'})
cross_entropy: {'epoch': 243, 'value': 0.0007002646640129385} ({'split': 'train'})
accuracy: {'epoch': 243, 'value': 0.9331999826431274} ({'split': 'test'})
cross_entropy: {'epoch': 243, 'value': 0.406897519826889} ({'split': 'test'})
Epoch 244
accuracy: {'epoch': 244, 'value': 1.0} ({'split': 'train'})
cross_entropy: {'epoch': 244, 'value': 0.00045172453427687293} ({'split': 'train'})
accuracy: {'epoch': 244, 'value': 0.9335999816656112} ({'split': 'test'})
cross_entropy: {'epoch': 244, 'value': 0.40198098458349707} ({'split': 'test'})
Epoch 245
accuracy: {'epoch': 245, 'value': 0.9999399999999999} ({'split': 'train'})
cross_entropy: {'epoch': 245, 'value': 0.0005436754156832466} ({'split': 'train'})
accuracy: {'epoch': 245, 'value': 0.9338999819755555} ({'split': 'test'})
cross_entropy: {'epoch': 245, 'value': 0.40013515353202833} ({'split': 'test'})
Epoch 246
accuracy: {'epoch': 246, 'value': 0.9998799999999999} ({'split': 'train'})
cross_entropy: {'epoch': 246, 'value': 0.0006741093754768372} ({'split': 'train'})
accuracy: {'epoch': 246, 'value': 0.9327999836206434} ({'split': 'test'})
cross_entropy: {'epoch': 246, 'value': 0.407257482931018} ({'split': 'test'})
Epoch 247
accuracy: {'epoch': 247, 'value': 0.9999800000000001} ({'split': 'train'})
cross_entropy: {'epoch': 247, 'value': 0.0004954845212958753} ({'split': 'train'})
accuracy: {'epoch': 247, 'value': 0.9339999830722809} ({'split': 'test'})
cross_entropy: {'epoch': 247, 'value': 0.40667999915778624} ({'split': 'test'})
Epoch 248
accuracy: {'epoch': 248, 'value': 0.9999800000000001} ({'split': 'train'})
cross_entropy: {'epoch': 248, 'value': 0.0003912847222574056} ({'split': 'train'})
accuracy: {'epoch': 248, 'value': 0.933999983072281} ({'split': 'test'})
cross_entropy: {'epoch': 248, 'value': 0.412171700000763} ({'split': 'test'})
Epoch 249
accuracy: {'epoch': 249, 'value': 0.9999800000000001} ({'split': 'train'})
cross_entropy: {'epoch': 249, 'value': 0.00039097276942804456} ({'split': 'train'})
accuracy: {'epoch': 249, 'value': 0.9336999833583833} ({'split': 'test'})
cross_entropy: {'epoch': 249, 'value': 0.41414689652621733} ({'split': 'test'})
Epoch 250
accuracy: {'epoch': 250, 'value': 0.9999800000000001} ({'split': 'train'})
cross_entropy: {'epoch': 250, 'value': 0.00041905186987482} ({'split': 'train'})
accuracy: {'epoch': 250, 'value': 0.9328999829292295} ({'split': 'test'})
cross_entropy: {'epoch': 250, 'value': 0.41421974651515486} ({'split': 'test'})
Epoch 251
accuracy: {'epoch': 251, 'value': 0.9999199999999994} ({'split': 'train'})
cross_entropy: {'epoch': 251, 'value': 0.00046144126594750565} ({'split': 'train'})
accuracy: {'epoch': 251, 'value': 0.9330999833345414} ({'split': 'test'})
cross_entropy: {'epoch': 251, 'value': 0.4128269721567631} ({'split': 'test'})
Epoch 252
accuracy: {'epoch': 252, 'value': 0.9999199999999997} ({'split': 'train'})
cross_entropy: {'epoch': 252, 'value': 0.0005018233584560222} ({'split': 'train'})
accuracy: {'epoch': 252, 'value': 0.9333999824523925} ({'split': 'test'})
cross_entropy: {'epoch': 252, 'value': 0.4131865096092225} ({'split': 'test'})
Epoch 253
accuracy: {'epoch': 253, 'value': 0.9998999999999999} ({'split': 'train'})
cross_entropy: {'epoch': 253, 'value': 0.0004859504090133124} ({'split': 'train'})
accuracy: {'epoch': 253, 'value': 0.9332999819517136} ({'split': 'test'})
cross_entropy: {'epoch': 253, 'value': 0.41170498639345166} ({'split': 'test'})
Epoch 254
accuracy: {'epoch': 254, 'value': 0.9999800000000001} ({'split': 'train'})
cross_entropy: {'epoch': 254, 'value': 0.0004147630290547386} ({'split': 'train'})
accuracy: {'epoch': 254, 'value': 0.9337999814748763} ({'split': 'test'})
cross_entropy: {'epoch': 254, 'value': 0.4111306827515364} ({'split': 'test'})
Epoch 255
accuracy: {'epoch': 255, 'value': 0.9999400000000002} ({'split': 'train'})
cross_entropy: {'epoch': 255, 'value': 0.00044876067079603653} ({'split': 'train'})
accuracy: {'epoch': 255, 'value': 0.933499982357025} ({'split': 'test'})
cross_entropy: {'epoch': 255, 'value': 0.4113386584073306} ({'split': 'test'})
Epoch 256
accuracy: {'epoch': 256, 'value': 0.99996} ({'split': 'train'})
cross_entropy: {'epoch': 256, 'value': 0.00040230414872989074} ({'split': 'train'})
accuracy: {'epoch': 256, 'value': 0.9335999816656111} ({'split': 'test'})
cross_entropy: {'epoch': 256, 'value': 0.41155234664678575} ({'split': 'test'})
Epoch 257
accuracy: {'epoch': 257, 'value': 0.9999399999999998} ({'split': 'train'})
cross_entropy: {'epoch': 257, 'value': 0.00040622227052226667} ({'split': 'train'})
accuracy: {'epoch': 257, 'value': 0.9334999817609788} ({'split': 'test'})
cross_entropy: {'epoch': 257, 'value': 0.4111025419831275} ({'split': 'test'})
Epoch 258
accuracy: {'epoch': 258, 'value': 0.9998999999999997} ({'split': 'train'})
cross_entropy: {'epoch': 258, 'value': 0.00043206612628884624} ({'split': 'train'})
accuracy: {'epoch': 258, 'value': 0.9332999819517137} ({'split': 'test'})
cross_entropy: {'epoch': 258, 'value': 0.41031862989068024} ({'split': 'test'})
Epoch 259
accuracy: {'epoch': 259, 'value': 0.99988} ({'split': 'train'})
cross_entropy: {'epoch': 259, 'value': 0.0004978300736937672} ({'split': 'train'})
accuracy: {'epoch': 259, 'value': 0.9337999820709231} ({'split': 'test'})
cross_entropy: {'epoch': 259, 'value': 0.4098225885629653} ({'split': 'test'})
Epoch 260
accuracy: {'epoch': 260, 'value': 1.0} ({'split': 'train'})
cross_entropy: {'epoch': 260, 'value': 0.00037366069649346175} ({'split': 'train'})
accuracy: {'epoch': 260, 'value': 0.9333999824523925} ({'split': 'test'})
cross_entropy: {'epoch': 260, 'value': 0.40917594678699987} ({'split': 'test'})
Epoch 261
accuracy: {'epoch': 261, 'value': 0.9999} ({'split': 'train'})
cross_entropy: {'epoch': 261, 'value': 0.0004999904276721645} ({'split': 'train'})
accuracy: {'epoch': 261, 'value': 0.9334999829530717} ({'split': 'test'})
cross_entropy: {'epoch': 261, 'value': 0.40916675858199597} ({'split': 'test'})
Epoch 262
accuracy: {'epoch': 262, 'value': 0.9999399999999999} ({'split': 'train'})
cross_entropy: {'epoch': 262, 'value': 0.00044167981131933626} ({'split': 'train'})
accuracy: {'epoch': 262, 'value': 0.9339999818801881} ({'split': 'test'})
cross_entropy: {'epoch': 262, 'value': 0.40902374334633357} ({'split': 'test'})
Epoch 263
accuracy: {'epoch': 263, 'value': 0.9999199999999994} ({'split': 'train'})
cross_entropy: {'epoch': 263, 'value': 0.0004975623911991714} ({'split': 'train'})
accuracy: {'epoch': 263, 'value': 0.93329998254776} ({'split': 'test'})
cross_entropy: {'epoch': 263, 'value': 0.4092956951260568} ({'split': 'test'})
Epoch 264
accuracy: {'epoch': 264, 'value': 0.9999599999999996} ({'split': 'train'})
cross_entropy: {'epoch': 264, 'value': 0.00040509911244735125} ({'split': 'train'})
accuracy: {'epoch': 264, 'value': 0.9329999822378158} ({'split': 'test'})
cross_entropy: {'epoch': 264, 'value': 0.40949171900749193} ({'split': 'test'})
Epoch 265
accuracy: {'epoch': 265, 'value': 0.9999599999999995} ({'split': 'train'})
cross_entropy: {'epoch': 265, 'value': 0.0003933349954721054} ({'split': 'train'})
accuracy: {'epoch': 265, 'value': 0.9333999824523925} ({'split': 'test'})
cross_entropy: {'epoch': 265, 'value': 0.4095794334262609} ({'split': 'test'})
Epoch 266
accuracy: {'epoch': 266, 'value': 0.9999599999999993} ({'split': 'train'})
cross_entropy: {'epoch': 266, 'value': 0.0004924590615835038} ({'split': 'train'})
accuracy: {'epoch': 266, 'value': 0.9329999828338627} ({'split': 'test'})
cross_entropy: {'epoch': 266, 'value': 0.40960684061050406} ({'split': 'test'})
Epoch 267
accuracy: {'epoch': 267, 'value': 0.9999399999999996} ({'split': 'train'})
cross_entropy: {'epoch': 267, 'value': 0.00044389554952271274} ({'split': 'train'})
accuracy: {'epoch': 267, 'value': 0.933699982762337} ({'split': 'test'})
cross_entropy: {'epoch': 267, 'value': 0.4089605590701104} ({'split': 'test'})
Epoch 268
accuracy: {'epoch': 268, 'value': 0.9999599999999994} ({'split': 'train'})
cross_entropy: {'epoch': 268, 'value': 0.00039961691403295847} ({'split': 'train'})
accuracy: {'epoch': 268, 'value': 0.9341999822854996} ({'split': 'test'})
cross_entropy: {'epoch': 268, 'value': 0.40907169118523595} ({'split': 'test'})
Epoch 269
accuracy: {'epoch': 269, 'value': 0.9999599999999993} ({'split': 'train'})
cross_entropy: {'epoch': 269, 'value': 0.00040987067938782264} ({'split': 'train'})
accuracy: {'epoch': 269, 'value': 0.9335999828577041} ({'split': 'test'})
cross_entropy: {'epoch': 269, 'value': 0.4093518563359975} ({'split': 'test'})
Epoch 270
accuracy: {'epoch': 270, 'value': 0.99996} ({'split': 'train'})
cross_entropy: {'epoch': 270, 'value': 0.0004000368696823716} ({'split': 'train'})
accuracy: {'epoch': 270, 'value': 0.9330999827384947} ({'split': 'test'})
cross_entropy: {'epoch': 270, 'value': 0.4095520327985287} ({'split': 'test'})
Epoch 271
accuracy: {'epoch': 271, 'value': 0.9999399999999999} ({'split': 'train'})
cross_entropy: {'epoch': 271, 'value': 0.0004377650006301704} ({'split': 'train'})
accuracy: {'epoch': 271, 'value': 0.9329999828338621} ({'split': 'test'})
cross_entropy: {'epoch': 271, 'value': 0.40893005587160597} ({'split': 'test'})
Epoch 272
accuracy: {'epoch': 272, 'value': 0.9999399999999999} ({'split': 'train'})
cross_entropy: {'epoch': 272, 'value': 0.00041648781641386414} ({'split': 'train'})
accuracy: {'epoch': 272, 'value': 0.93329998254776} ({'split': 'test'})
cross_entropy: {'epoch': 272, 'value': 0.409099249392748} ({'split': 'test'})
Epoch 273
accuracy: {'epoch': 273, 'value': 0.9999599999999997} ({'split': 'train'})
cross_entropy: {'epoch': 273, 'value': 0.00043341139632801064} ({'split': 'train'})
accuracy: {'epoch': 273, 'value': 0.933499983549118} ({'split': 'test'})
cross_entropy: {'epoch': 273, 'value': 0.4099349747598171} ({'split': 'test'})
Epoch 274
accuracy: {'epoch': 274, 'value': 0.9999199999999991} ({'split': 'train'})
cross_entropy: {'epoch': 274, 'value': 0.0005356105331610888} ({'split': 'train'})
accuracy: {'epoch': 274, 'value': 0.9334999829530717} ({'split': 'test'})
cross_entropy: {'epoch': 274, 'value': 0.40842341072857374} ({'split': 'test'})
Epoch 275
accuracy: {'epoch': 275, 'value': 0.9998999999999997} ({'split': 'train'})
cross_entropy: {'epoch': 275, 'value': 0.0005622433118149637} ({'split': 'train'})
accuracy: {'epoch': 275, 'value': 0.9337999826669693} ({'split': 'test'})
cross_entropy: {'epoch': 275, 'value': 0.4095021384954453} ({'split': 'test'})
Epoch 276
accuracy: {'epoch': 276, 'value': 0.9999599999999994} ({'split': 'train'})
cross_entropy: {'epoch': 276, 'value': 0.00044628016127273444} ({'split': 'train'})
accuracy: {'epoch': 276, 'value': 0.9337999838590624} ({'split': 'test'})
cross_entropy: {'epoch': 276, 'value': 0.40911611802875997} ({'split': 'test'})
Epoch 277
accuracy: {'epoch': 277, 'value': 0.9999800000000001} ({'split': 'train'})
cross_entropy: {'epoch': 277, 'value': 0.00038921717118704715} ({'split': 'train'})
accuracy: {'epoch': 277, 'value': 0.9338999831676486} ({'split': 'test'})
cross_entropy: {'epoch': 277, 'value': 0.4095988226681947} ({'split': 'test'})
Epoch 278
accuracy: {'epoch': 278, 'value': 1.0} ({'split': 'train'})
cross_entropy: {'epoch': 278, 'value': 0.00032140717916190613} ({'split': 'train'})
accuracy: {'epoch': 278, 'value': 0.9336999833583832} ({'split': 'test'})
cross_entropy: {'epoch': 278, 'value': 0.40910102799534803} ({'split': 'test'})
Epoch 279
accuracy: {'epoch': 279, 'value': 0.9999800000000001} ({'split': 'train'})
cross_entropy: {'epoch': 279, 'value': 0.00036423815900343473} ({'split': 'train'})
accuracy: {'epoch': 279, 'value': 0.9337999832630158} ({'split': 'test'})
cross_entropy: {'epoch': 279, 'value': 0.4095089777559043} ({'split': 'test'})
Epoch 280
accuracy: {'epoch': 280, 'value': 0.9999599999999998} ({'split': 'train'})
cross_entropy: {'epoch': 280, 'value': 0.00039474513117223985} ({'split': 'train'})
accuracy: {'epoch': 280, 'value': 0.9331999826431271} ({'split': 'test'})
cross_entropy: {'epoch': 280, 'value': 0.40935114905238157} ({'split': 'test'})
Epoch 281
accuracy: {'epoch': 281, 'value': 1.0} ({'split': 'train'})
cross_entropy: {'epoch': 281, 'value': 0.0003333007554197685} ({'split': 'train'})
accuracy: {'epoch': 281, 'value': 0.933899982571602} ({'split': 'test'})
cross_entropy: {'epoch': 281, 'value': 0.4099671621620657} ({'split': 'test'})
Epoch 282
accuracy: {'epoch': 282, 'value': 0.9999800000000002} ({'split': 'train'})
cross_entropy: {'epoch': 282, 'value': 0.0003581393976137041} ({'split': 'train'})
accuracy: {'epoch': 282, 'value': 0.9333999824523925} ({'split': 'test'})
cross_entropy: {'epoch': 282, 'value': 0.40977989435195916} ({'split': 'test'})
Epoch 283
accuracy: {'epoch': 283, 'value': 0.9998999999999995} ({'split': 'train'})
cross_entropy: {'epoch': 283, 'value': 0.00047342567945364865} ({'split': 'train'})
accuracy: {'epoch': 283, 'value': 0.9332999837398532} ({'split': 'test'})
cross_entropy: {'epoch': 283, 'value': 0.40802205123007296} ({'split': 'test'})
Epoch 284
accuracy: {'epoch': 284, 'value': 0.99996} ({'split': 'train'})
cross_entropy: {'epoch': 284, 'value': 0.000346624965991359} ({'split': 'train'})
accuracy: {'epoch': 284, 'value': 0.9333999836444856} ({'split': 'test'})
cross_entropy: {'epoch': 284, 'value': 0.40833617091178886} ({'split': 'test'})
Epoch 285
accuracy: {'epoch': 285, 'value': 0.9999599999999993} ({'split': 'train'})
cross_entropy: {'epoch': 285, 'value': 0.000465689157852903} ({'split': 'train'})
accuracy: {'epoch': 285, 'value': 0.9329999834299089} ({'split': 'test'})
cross_entropy: {'epoch': 285, 'value': 0.4088123206049204} ({'split': 'test'})
Epoch 286
accuracy: {'epoch': 286, 'value': 0.9999599999999995} ({'split': 'train'})
cross_entropy: {'epoch': 286, 'value': 0.00042269386498723177} ({'split': 'train'})
accuracy: {'epoch': 286, 'value': 0.9335999834537504} ({'split': 'test'})
cross_entropy: {'epoch': 286, 'value': 0.40816263966262334} ({'split': 'test'})
Epoch 287
accuracy: {'epoch': 287, 'value': 1.0} ({'split': 'train'})
cross_entropy: {'epoch': 287, 'value': 0.0003364390626922251} ({'split': 'train'})
accuracy: {'epoch': 287, 'value': 0.9331999838352203} ({'split': 'test'})
cross_entropy: {'epoch': 287, 'value': 0.4078813078254461} ({'split': 'test'})
Epoch 288
accuracy: {'epoch': 288, 'value': 0.9999800000000001} ({'split': 'train'})
cross_entropy: {'epoch': 288, 'value': 0.00039396717445924876} ({'split': 'train'})
accuracy: {'epoch': 288, 'value': 0.9335999834537505} ({'split': 'test'})
cross_entropy: {'epoch': 288, 'value': 0.40820602819323554} ({'split': 'test'})
Epoch 289
accuracy: {'epoch': 289, 'value': 0.9999600000000001} ({'split': 'train'})
cross_entropy: {'epoch': 289, 'value': 0.0004501131965586683} ({'split': 'train'})
accuracy: {'epoch': 289, 'value': 0.9337999820709229} ({'split': 'test'})
cross_entropy: {'epoch': 289, 'value': 0.4077412325888871} ({'split': 'test'})
Epoch 290
accuracy: {'epoch': 290, 'value': 0.9999600000000002} ({'split': 'train'})
cross_entropy: {'epoch': 290, 'value': 0.00040635559523943793} ({'split': 'train'})
accuracy: {'epoch': 290, 'value': 0.9334999823570255} ({'split': 'test'})
cross_entropy: {'epoch': 290, 'value': 0.407686185911298} ({'split': 'test'})
Epoch 291
accuracy: {'epoch': 291, 'value': 0.9999599999999993} ({'split': 'train'})
cross_entropy: {'epoch': 291, 'value': 0.00041014454691205154} ({'split': 'train'})
accuracy: {'epoch': 291, 'value': 0.9336999827623367} ({'split': 'test'})
cross_entropy: {'epoch': 291, 'value': 0.4078792270272971} ({'split': 'test'})
Epoch 292
accuracy: {'epoch': 292, 'value': 0.9999600000000002} ({'split': 'train'})
cross_entropy: {'epoch': 292, 'value': 0.0003830017570825293} ({'split': 'train'})
accuracy: {'epoch': 292, 'value': 0.9333999824523928} ({'split': 'test'})
cross_entropy: {'epoch': 292, 'value': 0.40830900266766557} ({'split': 'test'})
Epoch 293
accuracy: {'epoch': 293, 'value': 1.0} ({'split': 'train'})
cross_entropy: {'epoch': 293, 'value': 0.0003149241380440071} ({'split': 'train'})
accuracy: {'epoch': 293, 'value': 0.9332999825477596} ({'split': 'test'})
cross_entropy: {'epoch': 293, 'value': 0.4083112217485905} ({'split': 'test'})
Epoch 294
accuracy: {'epoch': 294, 'value': 0.9999400000000003} ({'split': 'train'})
cross_entropy: {'epoch': 294, 'value': 0.00041830333299236374} ({'split': 'train'})
accuracy: {'epoch': 294, 'value': 0.9339999824762347} ({'split': 'test'})
cross_entropy: {'epoch': 294, 'value': 0.4095989805459976} ({'split': 'test'})
Epoch 295
accuracy: {'epoch': 295, 'value': 0.9999599999999991} ({'split': 'train'})
cross_entropy: {'epoch': 295, 'value': 0.0004195770894596353} ({'split': 'train'})
accuracy: {'epoch': 295, 'value': 0.9339999836683271} ({'split': 'test'})
cross_entropy: {'epoch': 295, 'value': 0.41017316728830344} ({'split': 'test'})
Epoch 296
accuracy: {'epoch': 296, 'value': 0.99996} ({'split': 'train'})
cross_entropy: {'epoch': 296, 'value': 0.000429507052670233} ({'split': 'train'})
accuracy: {'epoch': 296, 'value': 0.9337999820709232} ({'split': 'test'})
cross_entropy: {'epoch': 296, 'value': 0.40877463914453965} ({'split': 'test'})
Epoch 297
accuracy: {'epoch': 297, 'value': 0.9999800000000002} ({'split': 'train'})
cross_entropy: {'epoch': 297, 'value': 0.00041340145078487707} ({'split': 'train'})
accuracy: {'epoch': 297, 'value': 0.9337999826669694} ({'split': 'test'})
cross_entropy: {'epoch': 297, 'value': 0.4083228752017023} ({'split': 'test'})
Epoch 298
accuracy: {'epoch': 298, 'value': 0.9999800000000001} ({'split': 'train'})
cross_entropy: {'epoch': 298, 'value': 0.00038322463312884795} ({'split': 'train'})
accuracy: {'epoch': 298, 'value': 0.9337999826669695} ({'split': 'test'})
cross_entropy: {'epoch': 298, 'value': 0.40909523911774165} ({'split': 'test'})
Epoch 299
accuracy: {'epoch': 299, 'value': 0.9999399999999998} ({'split': 'train'})
cross_entropy: {'epoch': 299, 'value': 0.00047832039694534597} ({'split': 'train'})
accuracy: {'epoch': 299, 'value': 0.9337999826669693} ({'split': 'test'})
cross_entropy: {'epoch': 299, 'value': 0.4097719226032496} ({'split': 'test'})
----- Saved results at sample_cifar10_resnet18_nobias_nobn_no_pruning.csv ------
{'exp_name': 'exp_cifar10_resnet18_nobias_nobn_no_pruning', 'model0_acc': 93.10999816656113, 'model1_acc': 93.19999837875366, 'geometric_acc': 67.24, 'prediction_acc': 93.89, 'naive_acc': 18.49, 'geometric_gain': -25.959998378753667, 'geometric_gain_%': -27.854075998215507, 'prediction_gain': 0.6900016212463385, 'prediction_gain_%': 0.7403451000527428, 'relative_loss_wrt_prediction': 28.59442109826825, 'geometric_time': 16.468092747032642, 'retrain_geometric_best': 93.4999983906746, 'retrain_naive_best': -100, 'retrain_model0_best': -100, 'retrain_model1_best': -100, 'retrain_epochs': 300}
FYI: the parameters were: 
 Namespace(n_epochs=300, batch_size_train=64, batch_size_test=1000, learning_rate=0.01, momentum=0.5, log_interval=100, to_download=True, disable_bias=True, dataset='Cifar10', num_models=2, model_name='resnet18_nobias_nobn', config_file=None, config_dir='/home/gvignen/otfusion/exp_cifar10_resnet18_nobias_nobn_no_pruning/configurations', num_hidden_nodes=400, num_hidden_nodes1=400, num_hidden_nodes2=200, num_hidden_nodes3=100, num_hidden_nodes4=50, sweep_id=90, gpu_id=0, skip_last_layer=False, skip_last_layer_type='average', debug=False, cifar_style_data=False, activation_histograms=True, act_num_samples=200, softmax_temperature=1, activation_mode='raw', options_type='generic', deprecated=None, save_result_file='sample_cifar10_resnet18_nobias_nobn_no_pruning.csv', sweep_name='exp_cifar10_resnet18_nobias_nobn_no_pruning', reg=0.01, reg_m=0.001, ground_metric='euclidean', ground_metric_normalize='none', not_squared=True, clip_gm=False, clip_min=0, clip_max=5, tmap_stats=False, ensemble_step=0.5, ground_metric_eff=True, retrain=300, retrain_lr_decay=-1, retrain_lr_decay_factor=None, retrain_lr_decay_epochs=None, retrain_avg_only=False, retrain_geometric_only=True, load_models='./resnet_models/', ckpt_type='best', recheck_cifar=True, recheck_acc=True, eval_aligned=False, enable_dropout=False, dump_model=False, dump_final_models=False, correction=True, activation_seed=21, weight_stats=True, sinkhorn_type='normal', geom_ensemble_type='acts', act_bug=False, standardize_acts=False, transform_acts=False, center_acts=False, prelu_acts=True, pool_acts=False, pool_relu=False, normalize_acts=False, normalize_wts=False, gromov=False, gromov_loss='square_loss', tensorboard_root='./tensorboard', tensorboard=False, same_model=-1, dist_normalize=False, update_acts=False, past_correction=True, partial_reshape=False, choice='0 2 4 6 8', diff_init=False, partition_type='labels', personal_class_idx=9, partition_dataloader=-1, personal_split_frac=0.1, exact=True, skip_personal_idx=False, prediction_wts=False, width_ratio=1, proper_marginals=False, retrain_seed=-1, no_random_trainloaders=False, reinit_trainloaders=False, second_model_name=None, print_distances=False, deterministic=False, skip_retrain=-1, importance=None, unbalanced=False, temperature=20, alpha=0.7, dist_epochs=60, handle_skips=True, prune=False, prune_frac=0.5, prune_type='unstructured', experiment_name='cifar10_resnet18_nobias_nobn_no_pruning', timestamp='2024-01-05_22-27-19_950770', rootdir='/home/gvignen/otfusion/exp_cifar10_resnet18_nobias_nobn_no_pruning', baseroot='/home/gvignen/otfusion', result_dir='/home/gvignen/otfusion/exp_cifar10_resnet18_nobias_nobn_no_pruning/results', exp_name='exp_cifar10_resnet18_nobias_nobn_no_pruning', csv_dir='/home/gvignen/otfusion/exp_cifar10_resnet18_nobias_nobn_no_pruning/csv', config={'dataset': 'Cifar10', 'model': 'resnet18_nobias_nobn', 'optimizer': 'SGD', 'optimizer_decay_at_epochs': [150, 250], 'optimizer_decay_with_factor': 10.0, 'optimizer_learning_rate': 0.1, 'optimizer_momentum': 0.9, 'optimizer_weight_decay': 0.0001, 'batch_size': 256, 'num_epochs': 300, 'seed': 42, 'nick': 'geometric_21', 'start_acc': 67.24}, second_config={'dataset': 'Cifar10', 'model': 'resnet18_nobias_nobn', 'optimizer': 'SGD', 'optimizer_decay_at_epochs': [150, 250], 'optimizer_decay_with_factor': 10.0, 'optimizer_learning_rate': 0.1, 'optimizer_momentum': 0.9, 'optimizer_weight_decay': 0.0001, 'batch_size': 256, 'num_epochs': 300, 'seed': 42, 'nick': 'geometric_21', 'start_acc': 67.24}, cifar_init_lr=0.1, num_personal_idx=25, activation_time=5.636777868960053, params_model_0=11164352, params_model_1=11164352, geometric_time=16.468092747032642, params_geometric=11164352, retrain_geometric_best=0.9349999839067461, retrain_naive_best=-1, retrain_model0_best=-1, retrain_model1_best=-1, **{'trace_sum_ratio_conv1.weight': 0.0625, 'trace_sum_ratio_layer1.0.conv1.weight': 0.01562500186264515, 'trace_sum_ratio_layer1.0.conv2.weight': 0.03125, 'trace_sum_ratio_layer1.1.conv1.weight': 0.015625, 'trace_sum_ratio_layer1.1.conv2.weight': 0.03125, 'trace_sum_ratio_layer2.0.conv1.weight': 0.015625, 'trace_sum_ratio_layer2.0.conv2.weight': 0.02343750186264515, 'trace_sum_ratio_layer2.0.shortcut.0.weight': 0.015625, 'trace_sum_ratio_layer2.1.conv1.weight': 0.015625, 'trace_sum_ratio_layer2.1.conv2.weight': 0.015625, 'trace_sum_ratio_layer3.0.conv1.weight': 0.011718750931322575, 'trace_sum_ratio_layer3.0.conv2.weight': 0.0078125, 'trace_sum_ratio_layer3.0.shortcut.0.weight': 0.0078125, 'trace_sum_ratio_layer3.1.conv1.weight': 0.0, 'trace_sum_ratio_layer3.1.conv2.weight': 0.00390625, 'trace_sum_ratio_layer4.0.conv1.weight': 0.001953125, 'trace_sum_ratio_layer4.0.conv2.weight': 0.001953125, 'trace_sum_ratio_layer4.0.shortcut.0.weight': 0.0, 'trace_sum_ratio_layer4.1.conv1.weight': 0.0, 'trace_sum_ratio_layer4.1.conv2.weight': 0.001953125, 'trace_sum_ratio_linear.weight': 1.0})
