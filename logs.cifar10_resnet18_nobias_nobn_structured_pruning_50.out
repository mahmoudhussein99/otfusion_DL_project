/home/gvignen/.local/lib/python3.10/site-packages/torch/utils/data/dataloader.py:557: UserWarning: This DataLoader will create 2 worker processes in total. Our suggested max number of worker in current system is 1, which is smaller than what this DataLoader is going to create. Please be aware that excessive worker creation might get DataLoader running slow or even freeze, lower the worker number to avoid potential slowness/freeze if necessary.
  warnings.warn(_create_warning_msg(
------- Setting up parameters -------
dumping parameters at  /home/gvignen/otfusion/exp_cifar10_resnet18_nobias_nobn_structured_pruning_50/configurations
The parameters are: 
 Namespace(n_epochs=300, batch_size_train=64, batch_size_test=1000, learning_rate=0.01, momentum=0.5, log_interval=100, to_download=True, disable_bias=True, dataset='Cifar10', num_models=2, model_name='resnet18_nobias_nobn', config_file=None, config_dir='/home/gvignen/otfusion/exp_cifar10_resnet18_nobias_nobn_structured_pruning_50/configurations', num_hidden_nodes=400, num_hidden_nodes1=400, num_hidden_nodes2=200, num_hidden_nodes3=100, num_hidden_nodes4=50, sweep_id=90, gpu_id=0, skip_last_layer=False, skip_last_layer_type='average', debug=False, cifar_style_data=False, activation_histograms=True, act_num_samples=200, softmax_temperature=1, activation_mode='raw', options_type='generic', deprecated=None, save_result_file='sample_cifar10_resnet18_nobias_nobn_structured_pruning_50.csv', sweep_name='exp_cifar10_resnet18_nobias_nobn_structured_pruning_50', reg=0.01, reg_m=0.001, ground_metric='euclidean', ground_metric_normalize='none', not_squared=True, clip_gm=False, clip_min=0, clip_max=5, tmap_stats=False, ensemble_step=0.5, ground_metric_eff=True, retrain=300, retrain_lr_decay=-1, retrain_lr_decay_factor=None, retrain_lr_decay_epochs=None, retrain_avg_only=False, retrain_geometric_only=True, load_models='./resnet_models/', ckpt_type='best', recheck_cifar=True, recheck_acc=True, eval_aligned=False, enable_dropout=False, dump_model=False, dump_final_models=False, correction=True, activation_seed=21, weight_stats=True, sinkhorn_type='normal', geom_ensemble_type='acts', act_bug=False, standardize_acts=False, transform_acts=False, center_acts=False, prelu_acts=True, pool_acts=False, pool_relu=False, normalize_acts=False, normalize_wts=False, gromov=False, gromov_loss='square_loss', tensorboard_root='./tensorboard', tensorboard=False, same_model=-1, dist_normalize=False, update_acts=False, past_correction=True, partial_reshape=False, choice='0 2 4 6 8', diff_init=False, partition_type='labels', personal_class_idx=9, partition_dataloader=-1, personal_split_frac=0.1, exact=True, skip_personal_idx=False, prediction_wts=False, width_ratio=1, proper_marginals=False, retrain_seed=-1, no_random_trainloaders=False, reinit_trainloaders=False, second_model_name=None, print_distances=False, deterministic=False, skip_retrain=-1, importance=None, unbalanced=False, temperature=20, alpha=0.7, dist_epochs=60, handle_skips=True, prune=True, prune_frac=0.5, prune_type='structured', experiment_name='cifar10_resnet18_nobias_nobn_structured_pruning_50', timestamp='2024-01-06_11-09-07_280008', rootdir='/home/gvignen/otfusion/exp_cifar10_resnet18_nobias_nobn_structured_pruning_50', baseroot='/home/gvignen/otfusion', result_dir='/home/gvignen/otfusion/exp_cifar10_resnet18_nobias_nobn_structured_pruning_50/results', exp_name='exp_cifar10_resnet18_nobias_nobn_structured_pruning_50', csv_dir='/home/gvignen/otfusion/exp_cifar10_resnet18_nobias_nobn_structured_pruning_50/csv')
refactored get_config
------- Loading pre-trained models -------
loading cifar10 dataloaders
Files already downloaded and verified
Files already downloaded and verified
Files already downloaded and verified
Files already downloaded and verified
loading model with idx 0 and checkpoint_type is best
model parameters are 
 [torch.Size([64, 3, 3, 3]), torch.Size([64, 64, 3, 3]), torch.Size([64, 64, 3, 3]), torch.Size([64, 64, 3, 3]), torch.Size([64, 64, 3, 3]), torch.Size([128, 64, 3, 3]), torch.Size([128, 128, 3, 3]), torch.Size([128, 64, 1, 1]), torch.Size([128, 128, 3, 3]), torch.Size([128, 128, 3, 3]), torch.Size([256, 128, 3, 3]), torch.Size([256, 256, 3, 3]), torch.Size([256, 128, 1, 1]), torch.Size([256, 256, 3, 3]), torch.Size([256, 256, 3, 3]), torch.Size([512, 256, 3, 3]), torch.Size([512, 512, 3, 3]), torch.Size([512, 256, 1, 1]), torch.Size([512, 512, 3, 3]), torch.Size([512, 512, 3, 3]), torch.Size([10, 512])]
Loading model at path ./resnet_models/model_0/best.checkpoint which had accuracy 0.9310999816656113 and at epoch 181
loading model with idx 1 and checkpoint_type is best
model parameters are 
 [torch.Size([64, 3, 3, 3]), torch.Size([64, 64, 3, 3]), torch.Size([64, 64, 3, 3]), torch.Size([64, 64, 3, 3]), torch.Size([64, 64, 3, 3]), torch.Size([128, 64, 3, 3]), torch.Size([128, 128, 3, 3]), torch.Size([128, 64, 1, 1]), torch.Size([128, 128, 3, 3]), torch.Size([128, 128, 3, 3]), torch.Size([256, 128, 3, 3]), torch.Size([256, 256, 3, 3]), torch.Size([256, 128, 1, 1]), torch.Size([256, 256, 3, 3]), torch.Size([256, 256, 3, 3]), torch.Size([512, 256, 3, 3]), torch.Size([512, 512, 3, 3]), torch.Size([512, 256, 1, 1]), torch.Size([512, 512, 3, 3]), torch.Size([512, 512, 3, 3]), torch.Size([10, 512])]
Loading model at path ./resnet_models/model_1/best.checkpoint which had accuracy 0.9319999837875367 and at epoch 205
Done loading all the models

--------- Testing in global mode ---------
size of test_loader dataset:  10000

Test set: Avg. loss: 0.0043, Accuracy: 9311/10000 (93%)


--------- Testing in global mode ---------
size of test_loader dataset:  10000

Test set: Avg. loss: 0.0044, Accuracy: 9320/10000 (93%)

Rechecked accuracies are  [93.11, 93.2]
----------Prune the 2 Parent models now---------
---------let's see result after pruning-------------
dict_keys([])
---------let's see result after pruning-------------
dict_keys([])
--------Rechecking accuracies again!--------

--------- Testing in global mode ---------
size of test_loader dataset:  10000

Test set: Avg. loss: 0.0213, Accuracy: 3211/10000 (32%)

----- Saving Pruned model0-------

--------- Testing in global mode ---------
size of test_loader dataset:  10000

Test set: Avg. loss: 0.0189, Accuracy: 3565/10000 (36%)

----- Saving Pruned model1-------
Rechecked accuracies are  [32.11, 35.65]
layer conv1.weight has #params  1728
layer layer1.0.conv1.weight has #params  36864
layer layer1.0.conv2.weight has #params  36864
layer layer1.1.conv1.weight has #params  36864
layer layer1.1.conv2.weight has #params  36864
layer layer2.0.conv1.weight has #params  73728
layer layer2.0.conv2.weight has #params  147456
layer layer2.0.shortcut.0.weight has #params  8192
layer layer2.1.conv1.weight has #params  147456
layer layer2.1.conv2.weight has #params  147456
layer layer3.0.conv1.weight has #params  294912
layer layer3.0.conv2.weight has #params  589824
layer layer3.0.shortcut.0.weight has #params  32768
layer layer3.1.conv1.weight has #params  589824
layer layer3.1.conv2.weight has #params  589824
layer layer4.0.conv1.weight has #params  1179648
layer layer4.0.conv2.weight has #params  2359296
layer layer4.0.shortcut.0.weight has #params  131072
layer layer4.1.conv1.weight has #params  2359296
layer layer4.1.conv2.weight has #params  2359296
layer linear.weight has #params  5120
Activation Timer start
Files already downloaded and verified
Files already downloaded and verified
excluded
set forward hook for layer named:  conv1
this was continued,  bn1
this was continued,  layer1
this was continued,  layer1.0
set forward hook for layer named:  layer1.0.conv1
this was continued,  layer1.0.bn1
set forward hook for layer named:  layer1.0.conv2
this was continued,  layer1.0.shortcut
this was continued,  layer1.1
set forward hook for layer named:  layer1.1.conv1
this was continued,  layer1.1.bn1
set forward hook for layer named:  layer1.1.conv2
this was continued,  layer1.1.shortcut
this was continued,  layer2
this was continued,  layer2.0
set forward hook for layer named:  layer2.0.conv1
this was continued,  layer2.0.bn1
set forward hook for layer named:  layer2.0.conv2
this was continued,  layer2.0.shortcut
set forward hook for layer named:  layer2.0.shortcut.0
this was continued,  layer2.0.shortcut.1
this was continued,  layer2.1
set forward hook for layer named:  layer2.1.conv1
this was continued,  layer2.1.bn1
set forward hook for layer named:  layer2.1.conv2
this was continued,  layer2.1.shortcut
this was continued,  layer3
this was continued,  layer3.0
set forward hook for layer named:  layer3.0.conv1
this was continued,  layer3.0.bn1
set forward hook for layer named:  layer3.0.conv2
this was continued,  layer3.0.shortcut
set forward hook for layer named:  layer3.0.shortcut.0
this was continued,  layer3.0.shortcut.1
this was continued,  layer3.1
set forward hook for layer named:  layer3.1.conv1
this was continued,  layer3.1.bn1
set forward hook for layer named:  layer3.1.conv2
this was continued,  layer3.1.shortcut
this was continued,  layer4
this was continued,  layer4.0
set forward hook for layer named:  layer4.0.conv1
this was continued,  layer4.0.bn1
set forward hook for layer named:  layer4.0.conv2
this was continued,  layer4.0.shortcut
set forward hook for layer named:  layer4.0.shortcut.0
this was continued,  layer4.0.shortcut.1
this was continued,  layer4.1
set forward hook for layer named:  layer4.1.conv1
this was continued,  layer4.1.bn1
set forward hook for layer named:  layer4.1.conv2
this was continued,  layer4.1.shortcut
set forward hook for layer named:  linear
excluded
set forward hook for layer named:  conv1
this was continued,  bn1
this was continued,  layer1
this was continued,  layer1.0
set forward hook for layer named:  layer1.0.conv1
this was continued,  layer1.0.bn1
set forward hook for layer named:  layer1.0.conv2
this was continued,  layer1.0.shortcut
this was continued,  layer1.1
set forward hook for layer named:  layer1.1.conv1
this was continued,  layer1.1.bn1
set forward hook for layer named:  layer1.1.conv2
this was continued,  layer1.1.shortcut
this was continued,  layer2
this was continued,  layer2.0
set forward hook for layer named:  layer2.0.conv1
this was continued,  layer2.0.bn1
set forward hook for layer named:  layer2.0.conv2
this was continued,  layer2.0.shortcut
set forward hook for layer named:  layer2.0.shortcut.0
this was continued,  layer2.0.shortcut.1
this was continued,  layer2.1
set forward hook for layer named:  layer2.1.conv1
this was continued,  layer2.1.bn1
set forward hook for layer named:  layer2.1.conv2
this was continued,  layer2.1.shortcut
this was continued,  layer3
this was continued,  layer3.0
set forward hook for layer named:  layer3.0.conv1
this was continued,  layer3.0.bn1
set forward hook for layer named:  layer3.0.conv2
this was continued,  layer3.0.shortcut
set forward hook for layer named:  layer3.0.shortcut.0
this was continued,  layer3.0.shortcut.1
this was continued,  layer3.1
set forward hook for layer named:  layer3.1.conv1
this was continued,  layer3.1.bn1
set forward hook for layer named:  layer3.1.conv2
this was continued,  layer3.1.shortcut
this was continued,  layer4
this was continued,  layer4.0
set forward hook for layer named:  layer4.0.conv1
this was continued,  layer4.0.bn1
set forward hook for layer named:  layer4.0.conv2
this was continued,  layer4.0.shortcut
set forward hook for layer named:  layer4.0.shortcut.0
this was continued,  layer4.0.shortcut.1
this was continued,  layer4.1
set forward hook for layer named:  layer4.1.conv1
this was continued,  layer4.1.bn1
set forward hook for layer named:  layer4.1.conv2
this was continued,  layer4.1.shortcut
set forward hook for layer named:  linear
num_personal_idx  25
model_name is  resnet18_nobias_nobn
***********
min of act: -19.394960403442383, max: 19.856435775756836, mean: -0.0037771277129650116
activations for idx 0 at layer conv1 have the following shape  torch.Size([200, 1, 64, 32, 32])
-----------
***********
min of act: -34.54856872558594, max: 14.994999885559082, mean: -1.119741678237915
activations for idx 0 at layer layer1.0.conv1 have the following shape  torch.Size([200, 1, 64, 32, 32])
-----------
***********
min of act: -7.204718589782715, max: 18.887243270874023, mean: 0.14994092285633087
activations for idx 0 at layer layer1.0.conv2 have the following shape  torch.Size([200, 1, 64, 32, 32])
-----------
***********
min of act: -24.31666374206543, max: 14.670839309692383, mean: -1.0351063013076782
activations for idx 0 at layer layer1.1.conv1 have the following shape  torch.Size([200, 1, 64, 32, 32])
-----------
***********
min of act: -7.368381023406982, max: 17.22309112548828, mean: 0.12078649550676346
activations for idx 0 at layer layer1.1.conv2 have the following shape  torch.Size([200, 1, 64, 32, 32])
-----------
***********
min of act: -33.72456359863281, max: 30.940048217773438, mean: -0.32213225960731506
activations for idx 0 at layer layer2.0.conv1 have the following shape  torch.Size([200, 1, 128, 16, 16])
-----------
***********
min of act: -35.88604736328125, max: 30.373498916625977, mean: -0.3635309636592865
activations for idx 0 at layer layer2.0.conv2 have the following shape  torch.Size([200, 1, 128, 16, 16])
-----------
***********
min of act: -6.5441436767578125, max: 9.522503852844238, mean: 0.05822120979428291
activations for idx 0 at layer layer2.0.shortcut.0 have the following shape  torch.Size([200, 1, 128, 16, 16])
-----------
***********
min of act: -48.146934509277344, max: 23.0931396484375, mean: -2.6825106143951416
activations for idx 0 at layer layer2.1.conv1 have the following shape  torch.Size([200, 1, 128, 16, 16])
-----------
***********
min of act: -13.20113468170166, max: 31.36621856689453, mean: 0.3460945785045624
activations for idx 0 at layer layer2.1.conv2 have the following shape  torch.Size([200, 1, 128, 16, 16])
-----------
***********
min of act: -37.319766998291016, max: 40.2124137878418, mean: -1.4669289588928223
activations for idx 0 at layer layer3.0.conv1 have the following shape  torch.Size([200, 1, 256, 8, 8])
-----------
***********
min of act: -35.508079528808594, max: 39.291664123535156, mean: -1.0875145196914673
activations for idx 0 at layer layer3.0.conv2 have the following shape  torch.Size([200, 1, 256, 8, 8])
-----------
***********
min of act: -11.417640686035156, max: 15.064111709594727, mean: -0.12080439180135727
activations for idx 0 at layer layer3.0.shortcut.0 have the following shape  torch.Size([200, 1, 256, 8, 8])
-----------
***********
min of act: -37.24065399169922, max: 29.854827880859375, mean: -2.1463115215301514
activations for idx 0 at layer layer3.1.conv1 have the following shape  torch.Size([200, 1, 256, 8, 8])
-----------
***********
min of act: -8.919498443603516, max: 39.291664123535156, mean: -0.04954778403043747
activations for idx 0 at layer layer3.1.conv2 have the following shape  torch.Size([200, 1, 256, 8, 8])
-----------
***********
min of act: -20.964752197265625, max: 18.193193435668945, mean: -0.8007491827011108
activations for idx 0 at layer layer4.0.conv1 have the following shape  torch.Size([200, 1, 512, 4, 4])
-----------
***********
min of act: -20.47639274597168, max: 16.573020935058594, mean: -0.8024924993515015
activations for idx 0 at layer layer4.0.conv2 have the following shape  torch.Size([200, 1, 512, 4, 4])
-----------
***********
min of act: -6.755589485168457, max: 7.414846420288086, mean: -0.20058250427246094
activations for idx 0 at layer layer4.0.shortcut.0 have the following shape  torch.Size([200, 1, 512, 4, 4])
-----------
***********
min of act: -7.93968391418457, max: 5.066688537597656, mean: -0.3292388916015625
activations for idx 0 at layer layer4.1.conv1 have the following shape  torch.Size([200, 1, 512, 4, 4])
-----------
***********
min of act: -2.8108816146850586, max: 16.573020935058594, mean: 0.013712410815060139
activations for idx 0 at layer layer4.1.conv2 have the following shape  torch.Size([200, 1, 512, 4, 4])
-----------
***********
min of act: -4.668762683868408, max: 8.892239570617676, mean: 0.0023988729808479548
activations for idx 0 at layer linear have the following shape  torch.Size([200, 1, 10])
-----------
***********
min of act: -19.116561889648438, max: 18.00572967529297, mean: -0.009012040682137012
activations for idx 1 at layer conv1 have the following shape  torch.Size([200, 1, 64, 32, 32])
-----------
***********
min of act: -27.54105567932129, max: 17.81136703491211, mean: -0.9837856292724609
activations for idx 1 at layer layer1.0.conv1 have the following shape  torch.Size([200, 1, 64, 32, 32])
-----------
***********
min of act: -9.287031173706055, max: 20.55774688720703, mean: 0.16492490470409393
activations for idx 1 at layer layer1.0.conv2 have the following shape  torch.Size([200, 1, 64, 32, 32])
-----------
***********
min of act: -31.647737503051758, max: 15.553681373596191, mean: -1.1679933071136475
activations for idx 1 at layer layer1.1.conv1 have the following shape  torch.Size([200, 1, 64, 32, 32])
-----------
***********
min of act: -5.041526794433594, max: 19.088645935058594, mean: 0.173527330160141
activations for idx 1 at layer layer1.1.conv2 have the following shape  torch.Size([200, 1, 64, 32, 32])
-----------
***********
min of act: -37.90597915649414, max: 37.31824493408203, mean: -0.3345809578895569
activations for idx 1 at layer layer2.0.conv1 have the following shape  torch.Size([200, 1, 128, 16, 16])
-----------
***********
min of act: -36.934547424316406, max: 48.24642562866211, mean: -0.21751132607460022
activations for idx 1 at layer layer2.0.conv2 have the following shape  torch.Size([200, 1, 128, 16, 16])
-----------
***********
min of act: -7.053943157196045, max: 11.977657318115234, mean: 0.06654458492994308
activations for idx 1 at layer layer2.0.shortcut.0 have the following shape  torch.Size([200, 1, 128, 16, 16])
-----------
***********
min of act: -58.88526153564453, max: 22.844371795654297, mean: -2.964092969894409
activations for idx 1 at layer layer2.1.conv1 have the following shape  torch.Size([200, 1, 128, 16, 16])
-----------
***********
min of act: -9.152372360229492, max: 47.81724548339844, mean: 0.38545265793800354
activations for idx 1 at layer layer2.1.conv2 have the following shape  torch.Size([200, 1, 128, 16, 16])
-----------
***********
min of act: -42.7368278503418, max: 47.0916862487793, mean: -1.4842525720596313
activations for idx 1 at layer layer3.0.conv1 have the following shape  torch.Size([200, 1, 256, 8, 8])
-----------
***********
min of act: -39.38219451904297, max: 43.998844146728516, mean: -1.1403100490570068
activations for idx 1 at layer layer3.0.conv2 have the following shape  torch.Size([200, 1, 256, 8, 8])
-----------
***********
min of act: -11.233585357666016, max: 17.313419342041016, mean: -0.04109351709485054
activations for idx 1 at layer layer3.0.shortcut.0 have the following shape  torch.Size([200, 1, 256, 8, 8])
-----------
***********
min of act: -41.83049011230469, max: 32.0858268737793, mean: -2.6385512351989746
activations for idx 1 at layer layer3.1.conv1 have the following shape  torch.Size([200, 1, 256, 8, 8])
-----------
***********
min of act: -13.28697395324707, max: 43.05036926269531, mean: 0.031020822003483772
activations for idx 1 at layer layer3.1.conv2 have the following shape  torch.Size([200, 1, 256, 8, 8])
-----------
***********
min of act: -22.154850006103516, max: 25.511940002441406, mean: -0.9519248008728027
activations for idx 1 at layer layer4.0.conv1 have the following shape  torch.Size([200, 1, 512, 4, 4])
-----------
***********
min of act: -19.36563491821289, max: 19.14645767211914, mean: -0.9358684420585632
activations for idx 1 at layer layer4.0.conv2 have the following shape  torch.Size([200, 1, 512, 4, 4])
-----------
***********
min of act: -7.896764755249023, max: 12.215757369995117, mean: -0.24662387371063232
activations for idx 1 at layer layer4.0.shortcut.0 have the following shape  torch.Size([200, 1, 512, 4, 4])
-----------
***********
min of act: -10.745847702026367, max: 10.963541030883789, mean: -0.3701588809490204
activations for idx 1 at layer layer4.1.conv1 have the following shape  torch.Size([200, 1, 512, 4, 4])
-----------
***********
min of act: -4.901025295257568, max: 20.7541446685791, mean: 0.03983958810567856
activations for idx 1 at layer layer4.1.conv2 have the following shape  torch.Size([200, 1, 512, 4, 4])
-----------
***********
min of act: -4.672389984130859, max: 13.470712661743164, mean: -0.003454054007306695
activations for idx 1 at layer linear have the following shape  torch.Size([200, 1, 10])
-----------
Activation Timer ends
------- Geometric Ensembling -------
Timer start

--------------- At layer index 0 ------------- 
 
Previous layer shape is  None
let's see the difference in layer names conv1 conv1
torch.Size([200, 1, 64, 32, 32]) shape of activations generally
reorder_dim is  [1, 2, 3, 0]
In layer conv1.weight: getting activation distance statistics
Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): 

Max : 18.645309448242188, Mean : 6.336301326751709, Min : 1.5272409915924072, Std: 2.809204578399658
returns a uniform measure of cardinality:  64
returns a uniform measure of cardinality:  64
Refactored ground metric calc
inside refactored
Processing the coordinates to form ground_metric
dont leave off the squaring of the ground metric
# of ground metric features is  204800
# of ground metric features in 0 is   204800
# of ground metric features in 1 is   204800
ground metric (m0) is  tensor([[   0.0000,    0.0000,    0.0000,  ...,  298.3699,  375.2300,
            0.0000],
        [ 469.7942,  469.7942,  469.7942,  ...,  584.1769,  595.1254,
          469.7942],
        [ 672.3196,  672.3196,  672.3196,  ...,  741.1161,  854.1968,
          672.3196],
        ...,
        [   0.0000,    0.0000,    0.0000,  ...,  298.3699,  375.2300,
            0.0000],
        [ 803.3393,  803.3393,  803.3393,  ...,  916.5223, 1078.0051,
          803.3393],
        [   0.0000,    0.0000,    0.0000,  ...,  298.3699,  375.2300,
            0.0000]], device='cuda:0')
shape of T_var is  torch.Size([64, 64])
T_var before correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
marginals are  tensor([[63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        ...,
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996]],
       device='cuda:0')
T_var after correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
T_var stats: max 0.9999935626983643, min 0.0, mean 0.015624899417161942, std 0.12403393536806107 
Ratio of trace to the matrix sum:  tensor(0.0312, device='cuda:0')
Here, trace is 1.9999871253967285 and matrix sum is 63.99958801269531 
Shape of aligned wt is  torch.Size([64, 3, 9])
Shape of fc_layer0_weight_data is  torch.Size([64, 3, 9])

--------------- At layer index 1 ------------- 
 
Previous layer shape is  torch.Size([64, 3, 3, 3])
let's see the difference in layer names layer1.0.conv1 layer1.0.conv1
torch.Size([200, 1, 64, 32, 32]) shape of activations generally
reorder_dim is  [1, 2, 3, 0]
In layer layer1.0.conv1.weight: getting activation distance statistics
Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): 

Max : 29.962038040161133, Mean : 11.004898071289062, Min : 2.8580496311187744, Std: 4.484291076660156
shape of layer: model 0 torch.Size([64, 64, 9])
shape of layer: model 1 torch.Size([64, 64, 9])
shape of activations: model 0 torch.Size([64, 32, 32, 200])
shape of activations: model 1 torch.Size([64, 32, 32, 200])
shape of previous transport map torch.Size([64, 64])
doing nothing for skips
returns a uniform measure of cardinality:  64
returns a uniform measure of cardinality:  64
Refactored ground metric calc
inside refactored
Processing the coordinates to form ground_metric
dont leave off the squaring of the ground metric
# of ground metric features is  204800
# of ground metric features in 0 is   204800
# of ground metric features in 1 is   204800
ground metric (m0) is  tensor([[1026.2682, 1198.9525, 1390.1879,  ...,  715.5538, 1204.4235,
         1191.4193],
        [   0.0000, 1494.3184, 1765.6061,  ..., 1295.7018, 1687.0981,
          921.3344],
        [   0.0000, 1494.3184, 1765.6061,  ..., 1295.7018, 1687.0981,
          921.3344],
        ...,
        [1411.7344, 1100.6866, 1145.6349,  ..., 1299.1552, 1261.2408,
         1173.5331],
        [   0.0000, 1494.3184, 1765.6061,  ..., 1295.7018, 1687.0981,
          921.3344],
        [   0.0000, 1494.3184, 1765.6061,  ..., 1295.7018, 1687.0981,
          921.3344]], device='cuda:0')
shape of T_var is  torch.Size([64, 64])
T_var before correction  tensor([[0.0000, 0.0000, 0.0000,  ..., 0.0156, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        ...,
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]],
       device='cuda:0')
marginals are  tensor([[63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        ...,
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996]],
       device='cuda:0')
T_var after correction  tensor([[0.0000, 0.0000, 0.0000,  ..., 1.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        ...,
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]],
       device='cuda:0')
T_var stats: max 0.9999935626983643, min 0.0, mean 0.015624899417161942, std 0.12403393536806107 
Ratio of trace to the matrix sum:  tensor(0.0156, device='cuda:0')
Here, trace is 0.9999935626983643 and matrix sum is 63.99958801269531 
Shape of aligned wt is  torch.Size([64, 64, 9])
Shape of fc_layer0_weight_data is  torch.Size([64, 64, 9])

--------------- At layer index 2 ------------- 
 
Previous layer shape is  torch.Size([64, 64, 3, 3])
let's see the difference in layer names layer1.0.conv2 layer1.0.conv2
torch.Size([200, 1, 64, 32, 32]) shape of activations generally
reorder_dim is  [1, 2, 3, 0]
In layer layer1.0.conv2.weight: getting activation distance statistics
Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): 

Max : 14.697563171386719, Mean : 4.522571086883545, Min : 0.8599163293838501, Std: 2.3182806968688965
shape of layer: model 0 torch.Size([64, 64, 9])
shape of layer: model 1 torch.Size([64, 64, 9])
shape of activations: model 0 torch.Size([64, 32, 32, 200])
shape of activations: model 1 torch.Size([64, 32, 32, 200])
shape of previous transport map torch.Size([64, 64])
doing nothing for skips
returns a uniform measure of cardinality:  64
returns a uniform measure of cardinality:  64
Refactored ground metric calc
inside refactored
Processing the coordinates to form ground_metric
dont leave off the squaring of the ground metric
# of ground metric features is  204800
# of ground metric features in 0 is   204800
# of ground metric features in 1 is   204800
ground metric (m0) is  tensor([[175.2794, 175.2794, 175.2794,  ..., 272.6862, 349.4463, 175.2794],
        [369.4266, 369.4266, 369.4266,  ..., 384.5262, 409.2839, 369.4266],
        [442.6249, 442.6249, 442.6249,  ..., 455.2635, 504.4828, 442.6249],
        ...,
        [  0.0000,   0.0000,   0.0000,  ..., 184.4474, 271.1727,   0.0000],
        [520.4916, 520.4916, 520.4916,  ..., 525.0969, 601.1779, 520.4916],
        [  0.0000,   0.0000,   0.0000,  ..., 184.4474, 271.1727,   0.0000]],
       device='cuda:0')
shape of T_var is  torch.Size([64, 64])
T_var before correction  tensor([[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        ...,
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0156, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]],
       device='cuda:0')
marginals are  tensor([[63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        ...,
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996]],
       device='cuda:0')
T_var after correction  tensor([[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        ...,
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [1.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]],
       device='cuda:0')
T_var stats: max 0.9999935626983643, min 0.0, mean 0.015624899417161942, std 0.12403393536806107 
Ratio of trace to the matrix sum:  tensor(0.0469, device='cuda:0')
Here, trace is 2.9999806880950928 and matrix sum is 63.99958801269531 
Shape of aligned wt is  torch.Size([64, 64, 9])
Shape of fc_layer0_weight_data is  torch.Size([64, 64, 9])

--------------- At layer index 3 ------------- 
 
Previous layer shape is  torch.Size([64, 64, 3, 3])
let's see the difference in layer names layer1.1.conv1 layer1.1.conv1
torch.Size([200, 1, 64, 32, 32]) shape of activations generally
reorder_dim is  [1, 2, 3, 0]
In layer layer1.1.conv1.weight: getting activation distance statistics
Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): 

Max : 26.30687141418457, Mean : 10.88742446899414, Min : 3.00842547416687, Std: 3.971118927001953
shape of layer: model 0 torch.Size([64, 64, 9])
shape of layer: model 1 torch.Size([64, 64, 9])
shape of activations: model 0 torch.Size([64, 32, 32, 200])
shape of activations: model 1 torch.Size([64, 32, 32, 200])
shape of previous transport map torch.Size([64, 64])
doing nothing for skips
returns a uniform measure of cardinality:  64
returns a uniform measure of cardinality:  64
Refactored ground metric calc
inside refactored
Processing the coordinates to form ground_metric
dont leave off the squaring of the ground metric
# of ground metric features is  204800
# of ground metric features in 0 is   204800
# of ground metric features in 1 is   204800
ground metric (m0) is  tensor([[   0.0000,    0.0000, 1097.2887,  ..., 1604.4263, 1319.3019,
         1250.6044],
        [1359.6498, 1359.6498,  927.7906,  ..., 1173.9869, 1016.0688,
          801.5104],
        [1357.2452, 1357.2452,  968.3691,  ..., 1238.5659, 1050.4954,
          863.5339],
        ...,
        [1045.6655, 1045.6655,  734.0362,  ..., 1143.3979,  994.1261,
          878.4614],
        [1455.4296, 1455.4296,  715.1758,  ...,  739.3445,  897.8141,
         1083.7922],
        [1349.1353, 1349.1353,  978.5410,  ..., 1131.0348,  642.2848,
         1119.7111]], device='cuda:0')
shape of T_var is  torch.Size([64, 64])
T_var before correction  tensor([[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        ...,
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0156, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0156, 0.0000]],
       device='cuda:0')
marginals are  tensor([[63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        ...,
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996]],
       device='cuda:0')
T_var after correction  tensor([[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        ...,
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 1.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 1.0000, 0.0000]],
       device='cuda:0')
T_var stats: max 0.9999935626983643, min 0.0, mean 0.015624899417161942, std 0.12403392791748047 
Ratio of trace to the matrix sum:  tensor(0.0312, device='cuda:0')
Here, trace is 1.9999871253967285 and matrix sum is 63.99958801269531 
Shape of aligned wt is  torch.Size([64, 64, 9])
Shape of fc_layer0_weight_data is  torch.Size([64, 64, 9])

--------------- At layer index 4 ------------- 
 
Previous layer shape is  torch.Size([64, 64, 3, 3])
let's see the difference in layer names layer1.1.conv2 layer1.1.conv2
torch.Size([200, 1, 64, 32, 32]) shape of activations generally
reorder_dim is  [1, 2, 3, 0]
In layer layer1.1.conv2.weight: getting activation distance statistics
Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): 

Max : 13.54875373840332, Mean : 4.250484466552734, Min : 0.8124853372573853, Std: 2.1388132572174072
shape of layer: model 0 torch.Size([64, 64, 9])
shape of layer: model 1 torch.Size([64, 64, 9])
shape of activations: model 0 torch.Size([64, 32, 32, 200])
shape of activations: model 1 torch.Size([64, 32, 32, 200])
shape of previous transport map torch.Size([64, 64])
doing nothing for skips
returns a uniform measure of cardinality:  64
returns a uniform measure of cardinality:  64
Refactored ground metric calc
inside refactored
Processing the coordinates to form ground_metric
dont leave off the squaring of the ground metric
# of ground metric features is  204800
# of ground metric features in 0 is   204800
# of ground metric features in 1 is   204800
ground metric (m0) is  tensor([[201.5301, 201.5301, 201.5301,  ..., 296.9682, 381.3863, 258.6834],
        [369.4266, 369.4266, 369.4266,  ..., 384.5262, 409.2839, 415.0685],
        [426.2946, 426.2946, 426.2946,  ..., 449.8641, 509.1757, 486.0958],
        ...,
        [  0.0000,   0.0000,   0.0000,  ..., 184.4474, 271.1727, 178.2635],
        [476.7798, 476.7798, 476.7798,  ..., 494.3908, 578.4947, 512.9427],
        [  0.0000,   0.0000,   0.0000,  ..., 184.4474, 271.1727, 178.2635]],
       device='cuda:0')
shape of T_var is  torch.Size([64, 64])
T_var before correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
marginals are  tensor([[63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        ...,
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996],
        [63.9996, 63.9996, 63.9996,  ..., 63.9996, 63.9996, 63.9996]],
       device='cuda:0')
T_var after correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
T_var stats: max 0.9999935626983643, min 0.0, mean 0.015624899417161942, std 0.12403392791748047 
Ratio of trace to the matrix sum:  tensor(0.0312, device='cuda:0')
Here, trace is 1.9999871253967285 and matrix sum is 63.99958801269531 
Shape of aligned wt is  torch.Size([64, 64, 9])
Shape of fc_layer0_weight_data is  torch.Size([64, 64, 9])

--------------- At layer index 5 ------------- 
 
Previous layer shape is  torch.Size([64, 64, 3, 3])
let's see the difference in layer names layer2.0.conv1 layer2.0.conv1
torch.Size([200, 1, 128, 16, 16]) shape of activations generally
reorder_dim is  [1, 2, 3, 0]
In layer layer2.0.conv1.weight: getting activation distance statistics
Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): 

Max : 19.774410247802734, Mean : 7.298001289367676, Min : 1.643493413925171, Std: 3.217181444168091
shape of layer: model 0 torch.Size([128, 64, 9])
shape of layer: model 1 torch.Size([128, 64, 9])
shape of activations: model 0 torch.Size([128, 16, 16, 200])
shape of activations: model 1 torch.Size([128, 16, 16, 200])
shape of previous transport map torch.Size([64, 64])
saved skip T_var at layer 5 with shape torch.Size([128, 64, 3, 3])
shape of previous transport map now is torch.Size([64, 64])
returns a uniform measure of cardinality:  128
returns a uniform measure of cardinality:  128
Refactored ground metric calc
inside refactored
Processing the coordinates to form ground_metric
dont leave off the squaring of the ground metric
# of ground metric features is  51200
# of ground metric features in 0 is   51200
# of ground metric features in 1 is   51200
ground metric (m0) is  tensor([[670.5529, 702.0648,   0.0000,  ...,   0.0000, 350.7782,   0.0000],
        [670.5529, 702.0648,   0.0000,  ...,   0.0000, 350.7782,   0.0000],
        [665.6102, 747.6528, 479.5471,  ..., 479.5471, 581.6356, 479.5471],
        ...,
        [670.5529, 702.0648,   0.0000,  ...,   0.0000, 350.7782,   0.0000],
        [670.5529, 702.0648,   0.0000,  ...,   0.0000, 350.7782,   0.0000],
        [869.8189, 830.3589, 457.9874,  ..., 457.9874, 655.1530, 457.9874]],
       device='cuda:0')
shape of T_var is  torch.Size([128, 128])
T_var before correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
marginals are  tensor([[127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        ...,
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984]],
       device='cuda:0')
T_var after correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
T_var stats: max 0.9999872446060181, min 0.0, mean 0.007812400348484516, std 0.08804396539926529 
Ratio of trace to the matrix sum:  tensor(0.0078, device='cuda:0')
Here, trace is 0.9999872446060181 and matrix sum is 127.99836730957031 
Shape of aligned wt is  torch.Size([128, 64, 9])
Shape of fc_layer0_weight_data is  torch.Size([128, 64, 9])

--------------- At layer index 6 ------------- 
 
Previous layer shape is  torch.Size([128, 64, 3, 3])
let's see the difference in layer names layer2.0.conv2 layer2.0.conv2
torch.Size([200, 1, 128, 16, 16]) shape of activations generally
reorder_dim is  [1, 2, 3, 0]
In layer layer2.0.conv2.weight: getting activation distance statistics
Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): 

Max : 29.84709930419922, Mean : 11.884119033813477, Min : 2.782762050628662, Std: 4.887275695800781
shape of layer: model 0 torch.Size([128, 128, 9])
shape of layer: model 1 torch.Size([128, 128, 9])
shape of activations: model 0 torch.Size([128, 16, 16, 200])
shape of activations: model 1 torch.Size([128, 16, 16, 200])
shape of previous transport map torch.Size([128, 128])
doing nothing for skips
returns a uniform measure of cardinality:  128
returns a uniform measure of cardinality:  128
Refactored ground metric calc
inside refactored
Processing the coordinates to form ground_metric
dont leave off the squaring of the ground metric
# of ground metric features is  51200
# of ground metric features in 0 is   51200
# of ground metric features in 1 is   51200
ground metric (m0) is  tensor([[1062.3121,  592.0822,  909.2006,  ..., 1018.1556,  734.0211,
          604.5830],
        [ 762.8404,    0.0000,  715.1168,  ...,  745.2748,  798.9955,
           81.8477],
        [1012.0849,  583.8503,  844.2391,  ...,  938.1147, 1083.1716,
          612.6781],
        ...,
        [1108.4132,  751.6283, 1079.6880,  ..., 1159.7350, 1254.2941,
          766.0795],
        [ 762.8404,    0.0000,  715.1168,  ...,  745.2748,  798.9955,
           81.8477],
        [1179.7739,  740.3474, 1134.3071,  ..., 1067.1931, 1286.8391,
          756.5614]], device='cuda:0')
shape of T_var is  torch.Size([128, 128])
T_var before correction  tensor([[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0078, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        ...,
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]],
       device='cuda:0')
marginals are  tensor([[127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        ...,
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984]],
       device='cuda:0')
T_var after correction  tensor([[0.0000, 0.0000, 0.0000,  ..., 0.0000, 1.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        ...,
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]],
       device='cuda:0')
T_var stats: max 0.9999872446060181, min 0.0, mean 0.007812400348484516, std 0.08804396539926529 
Ratio of trace to the matrix sum:  tensor(0.0312, device='cuda:0')
Here, trace is 3.9999489784240723 and matrix sum is 127.99836730957031 
Shape of aligned wt is  torch.Size([128, 128, 9])
Shape of fc_layer0_weight_data is  torch.Size([128, 128, 9])

--------------- At layer index 7 ------------- 
 
Previous layer shape is  torch.Size([128, 128, 3, 3])
let's see the difference in layer names layer2.0.shortcut.0 layer2.0.shortcut.0
torch.Size([200, 1, 128, 16, 16]) shape of activations generally
reorder_dim is  [1, 2, 3, 0]
In layer layer2.0.shortcut.0.weight: getting activation distance statistics
Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): 

Max : 4.379622459411621, Mean : 1.5629637241363525, Min : 0.3896615505218506, Std: 0.6734628081321716
shape of layer: model 0 torch.Size([128, 64, 1])
shape of layer: model 1 torch.Size([128, 64, 1])
shape of activations: model 0 torch.Size([128, 16, 16, 200])
shape of activations: model 1 torch.Size([128, 16, 16, 200])
shape of previous transport map torch.Size([128, 128])
utilizing skip T_var saved from layer layer 5 with shape torch.Size([64, 64])
shape of previous transport map now is torch.Size([64, 64])
returns a uniform measure of cardinality:  128
returns a uniform measure of cardinality:  128
Refactored ground metric calc
inside refactored
Processing the coordinates to form ground_metric
dont leave off the squaring of the ground metric
# of ground metric features is  51200
# of ground metric features in 0 is   51200
# of ground metric features in 1 is   51200
ground metric (m0) is  tensor([[113.5975,  69.2766, 170.1979,  ..., 178.7816,  77.8229, 120.2765],
        [ 84.1587,   0.0000, 178.6987,  ..., 137.5348,  58.4062,  81.8477],
        [113.2048,  52.9007, 171.1454,  ..., 153.5509,  68.7487, 114.3835],
        ...,
        [175.3929, 135.0237, 235.4425,  ..., 230.0801, 143.7436, 164.9918],
        [ 84.1587,   0.0000, 178.6987,  ..., 137.5348,  58.4062,  81.8477],
        [129.1944,  74.1375, 198.9429,  ..., 141.8332, 101.0693, 127.6690]],
       device='cuda:0')
shape of T_var is  torch.Size([128, 128])
T_var before correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
marginals are  tensor([[127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        ...,
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984]],
       device='cuda:0')
T_var after correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
T_var stats: max 0.9999872446060181, min 0.0, mean 0.007812400348484516, std 0.08804396539926529 
Ratio of trace to the matrix sum:  tensor(0.0156, device='cuda:0')
Here, trace is 1.9999744892120361 and matrix sum is 127.99836730957031 
Shape of aligned wt is  torch.Size([128, 64, 1])
Shape of fc_layer0_weight_data is  torch.Size([128, 64, 1])

--------------- At layer index 8 ------------- 
 
Previous layer shape is  torch.Size([128, 64, 1, 1])
let's see the difference in layer names layer2.1.conv1 layer2.1.conv1
torch.Size([200, 1, 128, 16, 16]) shape of activations generally
reorder_dim is  [1, 2, 3, 0]
In layer layer2.1.conv1.weight: getting activation distance statistics
Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): 

Max : 38.81315612792969, Mean : 17.596149444580078, Min : 5.149519443511963, Std: 6.104233741760254
shape of layer: model 0 torch.Size([128, 128, 9])
shape of layer: model 1 torch.Size([128, 128, 9])
shape of activations: model 0 torch.Size([128, 16, 16, 200])
shape of activations: model 1 torch.Size([128, 16, 16, 200])
shape of previous transport map torch.Size([128, 128])
averaging multiple T_var's
returns a uniform measure of cardinality:  128
returns a uniform measure of cardinality:  128
Refactored ground metric calc
inside refactored
Processing the coordinates to form ground_metric
dont leave off the squaring of the ground metric
# of ground metric features is  51200
# of ground metric features in 0 is   51200
# of ground metric features in 1 is   51200
ground metric (m0) is  tensor([[1340.4839, 1485.4985, 1286.2274,  ..., 1014.0197, 1485.4985,
         1239.2590],
        [1645.1897,    0.0000, 2124.0100,  ..., 1346.5474,    0.0000,
         1858.1509],
        [1645.1897,    0.0000, 2124.0100,  ..., 1346.5474,    0.0000,
         1858.1509],
        ...,
        [1645.1897,    0.0000, 2124.0100,  ..., 1346.5474,    0.0000,
         1858.1509],
        [1225.4750, 1377.8068, 1259.7601,  ...,  892.3563, 1377.8068,
         1211.8953],
        [1247.2395, 1446.5016, 1182.1554,  ..., 1016.0529, 1446.5016,
         1071.4056]], device='cuda:0')
shape of T_var is  torch.Size([128, 128])
T_var before correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
marginals are  tensor([[127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        ...,
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984]],
       device='cuda:0')
T_var after correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
T_var stats: max 0.9999872446060181, min 0.0, mean 0.007812400348484516, std 0.08804396539926529 
Ratio of trace to the matrix sum:  tensor(0.0156, device='cuda:0')
Here, trace is 1.9999744892120361 and matrix sum is 127.99836730957031 
Shape of aligned wt is  torch.Size([128, 128, 9])
Shape of fc_layer0_weight_data is  torch.Size([128, 128, 9])

--------------- At layer index 9 ------------- 
 
Previous layer shape is  torch.Size([128, 128, 3, 3])
let's see the difference in layer names layer2.1.conv2 layer2.1.conv2
torch.Size([200, 1, 128, 16, 16]) shape of activations generally
reorder_dim is  [1, 2, 3, 0]
In layer layer2.1.conv2.weight: getting activation distance statistics
Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): 

Max : 19.74955177307129, Mean : 6.283172607421875, Min : 0.9975008368492126, Std: 3.372894525527954
shape of layer: model 0 torch.Size([128, 128, 9])
shape of layer: model 1 torch.Size([128, 128, 9])
shape of activations: model 0 torch.Size([128, 16, 16, 200])
shape of activations: model 1 torch.Size([128, 16, 16, 200])
shape of previous transport map torch.Size([128, 128])
doing nothing for skips
returns a uniform measure of cardinality:  128
returns a uniform measure of cardinality:  128
Refactored ground metric calc
inside refactored
Processing the coordinates to form ground_metric
dont leave off the squaring of the ground metric
# of ground metric features is  51200
# of ground metric features in 0 is   51200
# of ground metric features in 1 is   51200
ground metric (m0) is  tensor([[658.6825, 451.1681, 612.9286,  ..., 600.4688, 528.4588, 443.5064],
        [525.6506,   0.0000, 486.7976,  ..., 483.1129, 641.9192,  71.1847],
        [591.5153, 313.3129, 511.7613,  ..., 540.9562, 674.8282, 325.9329],
        ...,
        [670.6083, 459.9554, 661.9839,  ..., 670.6129, 771.5505, 464.2387],
        [525.6506,   0.0000, 486.7976,  ..., 483.1129, 641.9192,  71.1847],
        [633.5217, 380.6095, 624.8496,  ..., 567.4935, 723.7063, 382.2630]],
       device='cuda:0')
shape of T_var is  torch.Size([128, 128])
T_var before correction  tensor([[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0078, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        ...,
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]],
       device='cuda:0')
marginals are  tensor([[127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        ...,
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984],
        [127.9984, 127.9984, 127.9984,  ..., 127.9984, 127.9984, 127.9984]],
       device='cuda:0')
T_var after correction  tensor([[0.0000, 0.0000, 0.0000,  ..., 0.0000, 1.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        ...,
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]],
       device='cuda:0')
T_var stats: max 0.9999872446060181, min 0.0, mean 0.007812400348484516, std 0.08804396539926529 
Ratio of trace to the matrix sum:  tensor(0.0078, device='cuda:0')
Here, trace is 0.9999872446060181 and matrix sum is 127.99836730957031 
Shape of aligned wt is  torch.Size([128, 128, 9])
Shape of fc_layer0_weight_data is  torch.Size([128, 128, 9])

--------------- At layer index 10 ------------- 
 
Previous layer shape is  torch.Size([128, 128, 3, 3])
let's see the difference in layer names layer3.0.conv1 layer3.0.conv1
torch.Size([200, 1, 256, 8, 8]) shape of activations generally
reorder_dim is  [1, 2, 3, 0]
In layer layer3.0.conv1.weight: getting activation distance statistics
Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): 

Max : 25.212139129638672, Mean : 10.361769676208496, Min : 2.4507031440734863, Std: 4.1328630447387695
shape of layer: model 0 torch.Size([256, 128, 9])
shape of layer: model 1 torch.Size([256, 128, 9])
shape of activations: model 0 torch.Size([256, 8, 8, 200])
shape of activations: model 1 torch.Size([256, 8, 8, 200])
shape of previous transport map torch.Size([128, 128])
saved skip T_var at layer 10 with shape torch.Size([256, 128, 3, 3])
shape of previous transport map now is torch.Size([128, 128])
returns a uniform measure of cardinality:  256
returns a uniform measure of cardinality:  256
Refactored ground metric calc
inside refactored
Processing the coordinates to form ground_metric
dont leave off the squaring of the ground metric
# of ground metric features is  12800
# of ground metric features in 0 is   12800
# of ground metric features in 1 is   12800
ground metric (m0) is  tensor([[477.8453, 477.8453, 477.8453,  ..., 477.8453, 646.8006, 477.8453],
        [649.3625, 649.3625, 649.3625,  ..., 649.3625, 609.9206, 649.3625],
        [  0.0000,   0.0000,   0.0000,  ...,   0.0000, 567.8771,   0.0000],
        ...,
        [  0.0000,   0.0000,   0.0000,  ...,   0.0000, 567.8771,   0.0000],
        [604.8383, 604.8383, 604.8383,  ..., 604.8383, 666.7708, 604.8383],
        [  0.0000,   0.0000,   0.0000,  ...,   0.0000, 567.8771,   0.0000]],
       device='cuda:0')
shape of T_var is  torch.Size([256, 256])
T_var before correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
marginals are  tensor([[255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        ...,
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934]],
       device='cuda:0')
T_var after correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
T_var stats: max 0.9999743700027466, min 0.0, mean 0.003906149882823229, std 0.06237669289112091 
Ratio of trace to the matrix sum:  tensor(0.0039, device='cuda:0')
Here, trace is 0.9999743700027466 and matrix sum is 255.99343872070312 
Shape of aligned wt is  torch.Size([256, 128, 9])
Shape of fc_layer0_weight_data is  torch.Size([256, 128, 9])

--------------- At layer index 11 ------------- 
 
Previous layer shape is  torch.Size([256, 128, 3, 3])
let's see the difference in layer names layer3.0.conv2 layer3.0.conv2
torch.Size([200, 1, 256, 8, 8]) shape of activations generally
reorder_dim is  [1, 2, 3, 0]
In layer layer3.0.conv2.weight: getting activation distance statistics
Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): 

Max : 24.583667755126953, Mean : 9.748626708984375, Min : 2.4351563453674316, Std: 3.956794023513794
shape of layer: model 0 torch.Size([256, 256, 9])
shape of layer: model 1 torch.Size([256, 256, 9])
shape of activations: model 0 torch.Size([256, 8, 8, 200])
shape of activations: model 1 torch.Size([256, 8, 8, 200])
shape of previous transport map torch.Size([256, 256])
doing nothing for skips
returns a uniform measure of cardinality:  256
returns a uniform measure of cardinality:  256
Refactored ground metric calc
inside refactored
Processing the coordinates to form ground_metric
dont leave off the squaring of the ground metric
# of ground metric features is  12800
# of ground metric features in 0 is   12800
# of ground metric features in 1 is   12800
ground metric (m0) is  tensor([[674.0401,   0.0000,   0.0000,  ...,   0.0000, 360.2480, 461.1189],
        [674.0401,   0.0000,   0.0000,  ...,   0.0000, 360.2480, 461.1189],
        [603.9498, 176.3283, 176.3283,  ..., 176.3283, 408.7312, 520.3968],
        ...,
        [674.0401,   0.0000,   0.0000,  ...,   0.0000, 360.2480, 461.1189],
        [674.0401,   0.0000,   0.0000,  ...,   0.0000, 360.2480, 461.1189],
        [717.5339, 201.2239, 201.2239,  ..., 201.2239, 411.4075, 450.7374]],
       device='cuda:0')
shape of T_var is  torch.Size([256, 256])
T_var before correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
marginals are  tensor([[255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        ...,
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934]],
       device='cuda:0')
T_var after correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
T_var stats: max 0.9999743700027466, min 0.0, mean 0.003906149882823229, std 0.06237669289112091 
Ratio of trace to the matrix sum:  tensor(0., device='cuda:0')
Here, trace is 0.0 and matrix sum is 255.99343872070312 
Shape of aligned wt is  torch.Size([256, 256, 9])
Shape of fc_layer0_weight_data is  torch.Size([256, 256, 9])

--------------- At layer index 12 ------------- 
 
Previous layer shape is  torch.Size([256, 256, 3, 3])
let's see the difference in layer names layer3.0.shortcut.0 layer3.0.shortcut.0
torch.Size([200, 1, 256, 8, 8]) shape of activations generally
reorder_dim is  [1, 2, 3, 0]
In layer layer3.0.shortcut.0.weight: getting activation distance statistics
Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): 

Max : 7.877974033355713, Mean : 3.171468734741211, Min : 0.7079041004180908, Std: 1.2964075803756714
shape of layer: model 0 torch.Size([256, 128, 1])
shape of layer: model 1 torch.Size([256, 128, 1])
shape of activations: model 0 torch.Size([256, 8, 8, 200])
shape of activations: model 1 torch.Size([256, 8, 8, 200])
shape of previous transport map torch.Size([256, 256])
utilizing skip T_var saved from layer layer 10 with shape torch.Size([128, 128])
shape of previous transport map now is torch.Size([128, 128])
returns a uniform measure of cardinality:  256
returns a uniform measure of cardinality:  256
Refactored ground metric calc
inside refactored
Processing the coordinates to form ground_metric
dont leave off the squaring of the ground metric
# of ground metric features is  12800
# of ground metric features in 0 is   12800
# of ground metric features in 1 is   12800
ground metric (m0) is  tensor([[261.1686,   0.0000,   0.0000,  ...,   0.0000, 125.5513, 138.8796],
        [261.1686,   0.0000,   0.0000,  ...,   0.0000, 125.5513, 138.8796],
        [226.0955, 176.3283, 176.3283,  ..., 176.3283, 212.8730, 288.7845],
        ...,
        [261.1686,   0.0000,   0.0000,  ...,   0.0000, 125.5513, 138.8796],
        [261.1686,   0.0000,   0.0000,  ...,   0.0000, 125.5513, 138.8796],
        [400.6487, 201.2239, 201.2239,  ..., 201.2239, 285.4751, 238.6101]],
       device='cuda:0')
shape of T_var is  torch.Size([256, 256])
T_var before correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
marginals are  tensor([[255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        ...,
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934]],
       device='cuda:0')
T_var after correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
T_var stats: max 0.9999743700027466, min 0.0, mean 0.003906149882823229, std 0.06237669289112091 
Ratio of trace to the matrix sum:  tensor(0.0078, device='cuda:0')
Here, trace is 1.9999487400054932 and matrix sum is 255.99343872070312 
Shape of aligned wt is  torch.Size([256, 128, 1])
Shape of fc_layer0_weight_data is  torch.Size([256, 128, 1])

--------------- At layer index 13 ------------- 
 
Previous layer shape is  torch.Size([256, 128, 1, 1])
let's see the difference in layer names layer3.1.conv1 layer3.1.conv1
torch.Size([200, 1, 256, 8, 8]) shape of activations generally
reorder_dim is  [1, 2, 3, 0]
In layer layer3.1.conv1.weight: getting activation distance statistics
Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): 

Max : 26.110355377197266, Mean : 11.154743194580078, Min : 3.222400665283203, Std: 4.127051830291748
shape of layer: model 0 torch.Size([256, 256, 9])
shape of layer: model 1 torch.Size([256, 256, 9])
shape of activations: model 0 torch.Size([256, 8, 8, 200])
shape of activations: model 1 torch.Size([256, 8, 8, 200])
shape of previous transport map torch.Size([256, 256])
averaging multiple T_var's
returns a uniform measure of cardinality:  256
returns a uniform measure of cardinality:  256
Refactored ground metric calc
inside refactored
Processing the coordinates to form ground_metric
dont leave off the squaring of the ground metric
# of ground metric features is  12800
# of ground metric features in 0 is   12800
# of ground metric features in 1 is   12800
ground metric (m0) is  tensor([[553.6907, 553.6907, 580.2557,  ..., 524.6724, 580.6812, 545.9802],
        [  0.0000,   0.0000, 767.4740,  ..., 691.4329, 741.6381, 828.1621],
        [609.3235, 609.3235, 535.5142,  ..., 551.4653, 611.4208, 511.1335],
        ...,
        [656.7522, 656.7522, 629.6075,  ..., 522.0225, 609.3329, 583.2641],
        [675.8993, 675.8993, 540.8372,  ..., 461.3264, 621.5444, 478.4530],
        [  0.0000,   0.0000, 767.4740,  ..., 691.4329, 741.6381, 828.1621]],
       device='cuda:0')
shape of T_var is  torch.Size([256, 256])
T_var before correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
marginals are  tensor([[255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        ...,
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934]],
       device='cuda:0')
T_var after correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
T_var stats: max 0.9999743700027466, min 0.0, mean 0.003906149882823229, std 0.06237669289112091 
Ratio of trace to the matrix sum:  tensor(0., device='cuda:0')
Here, trace is 0.0 and matrix sum is 255.99343872070312 
Shape of aligned wt is  torch.Size([256, 256, 9])
Shape of fc_layer0_weight_data is  torch.Size([256, 256, 9])

--------------- At layer index 14 ------------- 
 
Previous layer shape is  torch.Size([256, 256, 3, 3])
let's see the difference in layer names layer3.1.conv2 layer3.1.conv2
torch.Size([200, 1, 256, 8, 8]) shape of activations generally
reorder_dim is  [1, 2, 3, 0]
In layer layer3.1.conv2.weight: getting activation distance statistics
Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): 

Max : 14.86649227142334, Mean : 4.263095855712891, Min : 0.7359461784362793, Std: 2.410897731781006
shape of layer: model 0 torch.Size([256, 256, 9])
shape of layer: model 1 torch.Size([256, 256, 9])
shape of activations: model 0 torch.Size([256, 8, 8, 200])
shape of activations: model 1 torch.Size([256, 8, 8, 200])
shape of previous transport map torch.Size([256, 256])
doing nothing for skips
returns a uniform measure of cardinality:  256
returns a uniform measure of cardinality:  256
Refactored ground metric calc
inside refactored
Processing the coordinates to form ground_metric
dont leave off the squaring of the ground metric
# of ground metric features is  12800
# of ground metric features in 0 is   12800
# of ground metric features in 1 is   12800
ground metric (m0) is  tensor([[489.5754, 131.9832, 131.9832,  ..., 131.9832, 284.3077, 259.0237],
        [440.2948,   0.0000,   0.0000,  ...,   0.0000, 236.4392, 226.1040],
        [392.3679, 123.0032, 123.0032,  ..., 123.0032, 251.9403, 269.4414],
        ...,
        [440.2948,   0.0000,   0.0000,  ...,   0.0000, 236.4392, 226.1040],
        [440.2948,   0.0000,   0.0000,  ...,   0.0000, 236.4392, 226.1040],
        [440.9807,  12.8370,  12.8370,  ...,  12.8370, 236.9074, 227.3224]],
       device='cuda:0')
shape of T_var is  torch.Size([256, 256])
T_var before correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
marginals are  tensor([[255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        ...,
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934],
        [255.9934, 255.9934, 255.9934,  ..., 255.9934, 255.9934, 255.9934]],
       device='cuda:0')
T_var after correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
T_var stats: max 0.9999743700027466, min 0.0, mean 0.003906149882823229, std 0.06237669289112091 
Ratio of trace to the matrix sum:  tensor(0.0039, device='cuda:0')
Here, trace is 0.9999743700027466 and matrix sum is 255.99343872070312 
Shape of aligned wt is  torch.Size([256, 256, 9])
Shape of fc_layer0_weight_data is  torch.Size([256, 256, 9])

--------------- At layer index 15 ------------- 
 
Previous layer shape is  torch.Size([256, 256, 3, 3])
let's see the difference in layer names layer4.0.conv1 layer4.0.conv1
torch.Size([200, 1, 512, 4, 4]) shape of activations generally
reorder_dim is  [1, 2, 3, 0]
In layer layer4.0.conv1.weight: getting activation distance statistics
Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): 

Max : 11.545821189880371, Mean : 4.320254325866699, Min : 0.8631324768066406, Std: 1.894811749458313
shape of layer: model 0 torch.Size([512, 256, 9])
shape of layer: model 1 torch.Size([512, 256, 9])
shape of activations: model 0 torch.Size([512, 4, 4, 200])
shape of activations: model 1 torch.Size([512, 4, 4, 200])
shape of previous transport map torch.Size([256, 256])
saved skip T_var at layer 15 with shape torch.Size([512, 256, 3, 3])
shape of previous transport map now is torch.Size([256, 256])
returns a uniform measure of cardinality:  512
returns a uniform measure of cardinality:  512
Refactored ground metric calc
inside refactored
Processing the coordinates to form ground_metric
dont leave off the squaring of the ground metric
# of ground metric features is  3200
# of ground metric features in 0 is   3200
# of ground metric features in 1 is   3200
ground metric (m0) is  tensor([[  0.0000,   0.0000, 193.5739,  ...,   0.0000,   0.0000,   0.0000],
        [  0.0000,   0.0000, 193.5739,  ...,   0.0000,   0.0000,   0.0000],
        [ 96.6006,  96.6006, 185.0171,  ...,  96.6006,  96.6006,  96.6006],
        ...,
        [191.9644, 191.9644, 152.6967,  ..., 191.9644, 191.9644, 191.9644],
        [138.2033, 138.2033, 172.2387,  ..., 138.2033, 138.2033, 138.2033],
        [  0.0000,   0.0000, 193.5739,  ...,   0.0000,   0.0000,   0.0000]],
       device='cuda:0')
shape of T_var is  torch.Size([512, 512])
T_var before correction  tensor([[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0020, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        ...,
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]],
       device='cuda:0')
marginals are  tensor([[511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        ...,
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738]],
       device='cuda:0')
T_var after correction  tensor([[0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.9999, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        ...,
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000],
        [0.0000, 0.0000, 0.0000,  ..., 0.0000, 0.0000, 0.0000]],
       device='cuda:0')
T_var stats: max 0.9999488592147827, min 0.0, mean 0.0019530251156538725, std 0.044148821383714676 
Ratio of trace to the matrix sum:  tensor(0.0020, device='cuda:0')
Here, trace is 0.9999488592147827 and matrix sum is 511.97381591796875 
Shape of aligned wt is  torch.Size([512, 256, 9])
Shape of fc_layer0_weight_data is  torch.Size([512, 256, 9])

--------------- At layer index 16 ------------- 
 
Previous layer shape is  torch.Size([512, 256, 3, 3])
let's see the difference in layer names layer4.0.conv2 layer4.0.conv2
torch.Size([200, 1, 512, 4, 4]) shape of activations generally
reorder_dim is  [1, 2, 3, 0]
In layer layer4.0.conv2.weight: getting activation distance statistics
Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): 

Max : 9.628518104553223, Mean : 3.6692311763763428, Min : 0.8108591437339783, Std: 1.5395127534866333
shape of layer: model 0 torch.Size([512, 512, 9])
shape of layer: model 1 torch.Size([512, 512, 9])
shape of activations: model 0 torch.Size([512, 4, 4, 200])
shape of activations: model 1 torch.Size([512, 4, 4, 200])
shape of previous transport map torch.Size([512, 512])
doing nothing for skips
returns a uniform measure of cardinality:  512
returns a uniform measure of cardinality:  512
Refactored ground metric calc
inside refactored
Processing the coordinates to form ground_metric
dont leave off the squaring of the ground metric
# of ground metric features is  3200
# of ground metric features in 0 is   3200
# of ground metric features in 1 is   3200
ground metric (m0) is  tensor([[  0.0000, 224.2209,   0.0000,  ..., 150.2492, 171.6717, 132.8916],
        [115.3414, 178.8645, 115.3414,  ..., 156.0130, 142.9932, 150.0095],
        [ 31.3297, 221.0472,  31.3297,  ..., 147.3514, 168.5882, 129.8633],
        ...,
        [139.0004, 185.0235, 139.0004,  ..., 164.8800, 128.8288, 170.4702],
        [174.5414, 162.4273, 174.5414,  ..., 161.5768, 115.3079, 191.8231],
        [164.9836, 166.1464, 164.9836,  ..., 179.6600, 133.2893, 182.2505]],
       device='cuda:0')
shape of T_var is  torch.Size([512, 512])
T_var before correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
marginals are  tensor([[511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        ...,
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738]],
       device='cuda:0')
T_var after correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
T_var stats: max 0.9999488592147827, min 0.0, mean 0.0019530251156538725, std 0.044148821383714676 
Ratio of trace to the matrix sum:  tensor(0., device='cuda:0')
Here, trace is 0.0 and matrix sum is 511.97381591796875 
Shape of aligned wt is  torch.Size([512, 512, 9])
Shape of fc_layer0_weight_data is  torch.Size([512, 512, 9])

--------------- At layer index 17 ------------- 
 
Previous layer shape is  torch.Size([512, 512, 3, 3])
let's see the difference in layer names layer4.0.shortcut.0 layer4.0.shortcut.0
torch.Size([200, 1, 512, 4, 4]) shape of activations generally
reorder_dim is  [1, 2, 3, 0]
In layer layer4.0.shortcut.0.weight: getting activation distance statistics
Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): 

Max : 3.43414306640625, Mean : 1.274718999862671, Min : 0.2655864953994751, Std: 0.5678274631500244
shape of layer: model 0 torch.Size([512, 256, 1])
shape of layer: model 1 torch.Size([512, 256, 1])
shape of activations: model 0 torch.Size([512, 4, 4, 200])
shape of activations: model 1 torch.Size([512, 4, 4, 200])
shape of previous transport map torch.Size([512, 512])
utilizing skip T_var saved from layer layer 15 with shape torch.Size([256, 256])
shape of previous transport map now is torch.Size([256, 256])
returns a uniform measure of cardinality:  512
returns a uniform measure of cardinality:  512
Refactored ground metric calc
inside refactored
Processing the coordinates to form ground_metric
dont leave off the squaring of the ground metric
# of ground metric features is  3200
# of ground metric features in 0 is   3200
# of ground metric features in 1 is   3200
ground metric (m0) is  tensor([[ 0.0000, 78.1314,  0.0000,  ..., 96.1939, 43.2023, 47.4021],
        [43.5433, 56.5085, 43.5433,  ..., 74.5920, 44.4364, 63.3296],
        [31.3297, 77.0553, 31.3297,  ..., 92.4123, 46.4876, 49.5506],
        ...,
        [ 0.0000, 78.1314,  0.0000,  ..., 96.1939, 43.2023, 47.4021],
        [39.1366, 71.4733, 39.1366,  ..., 85.4316, 45.5700, 67.6826],
        [40.3265, 71.7191, 40.3265,  ..., 84.7871, 48.4084, 66.1384]],
       device='cuda:0')
shape of T_var is  torch.Size([512, 512])
T_var before correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
marginals are  tensor([[511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        ...,
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738]],
       device='cuda:0')
T_var after correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
T_var stats: max 0.9999488592147827, min 0.0, mean 0.0019530251156538725, std 0.044148821383714676 
Ratio of trace to the matrix sum:  tensor(0., device='cuda:0')
Here, trace is 0.0 and matrix sum is 511.97381591796875 
Shape of aligned wt is  torch.Size([512, 256, 1])
Shape of fc_layer0_weight_data is  torch.Size([512, 256, 1])

--------------- At layer index 18 ------------- 
 
Previous layer shape is  torch.Size([512, 256, 1, 1])
let's see the difference in layer names layer4.1.conv1 layer4.1.conv1
torch.Size([200, 1, 512, 4, 4]) shape of activations generally
reorder_dim is  [1, 2, 3, 0]
In layer layer4.1.conv1.weight: getting activation distance statistics
Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): 

Max : 3.586730718612671, Mean : 1.3257789611816406, Min : 0.3009810447692871, Std: 0.5592610836029053
shape of layer: model 0 torch.Size([512, 512, 9])
shape of layer: model 1 torch.Size([512, 512, 9])
shape of activations: model 0 torch.Size([512, 4, 4, 200])
shape of activations: model 1 torch.Size([512, 4, 4, 200])
shape of previous transport map torch.Size([512, 512])
averaging multiple T_var's
returns a uniform measure of cardinality:  512
returns a uniform measure of cardinality:  512
Refactored ground metric calc
inside refactored
Processing the coordinates to form ground_metric
dont leave off the squaring of the ground metric
# of ground metric features is  3200
# of ground metric features in 0 is   3200
# of ground metric features in 1 is   3200
ground metric (m0) is  tensor([[ 0.0000,  0.0000, 56.0574,  ...,  0.0000, 42.6009, 88.6635],
        [47.9606, 47.9606, 45.3883,  ..., 47.9606, 52.9327, 75.0414],
        [ 0.0000,  0.0000, 56.0574,  ...,  0.0000, 42.6009, 88.6635],
        ...,
        [65.4957, 65.4957, 39.0845,  ..., 65.4957, 75.2215, 61.2479],
        [76.3911, 76.3911, 41.5986,  ..., 76.3911, 84.8349, 54.9135],
        [ 0.0000,  0.0000, 56.0574,  ...,  0.0000, 42.6009, 88.6635]],
       device='cuda:0')
shape of T_var is  torch.Size([512, 512])
T_var before correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
marginals are  tensor([[511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        ...,
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738]],
       device='cuda:0')
T_var after correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
T_var stats: max 0.9999488592147827, min 0.0, mean 0.0019530251156538725, std 0.044148821383714676 
Ratio of trace to the matrix sum:  tensor(0., device='cuda:0')
Here, trace is 0.0 and matrix sum is 511.97381591796875 
Shape of aligned wt is  torch.Size([512, 512, 9])
Shape of fc_layer0_weight_data is  torch.Size([512, 512, 9])

--------------- At layer index 19 ------------- 
 
Previous layer shape is  torch.Size([512, 512, 3, 3])
let's see the difference in layer names layer4.1.conv2 layer4.1.conv2
torch.Size([200, 1, 512, 4, 4]) shape of activations generally
reorder_dim is  [1, 2, 3, 0]
In layer layer4.1.conv2.weight: getting activation distance statistics
Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): 

Max : 4.385044574737549, Mean : 0.8808280825614929, Min : 0.09502117335796356, Std: 0.6929606199264526
shape of layer: model 0 torch.Size([512, 512, 9])
shape of layer: model 1 torch.Size([512, 512, 9])
shape of activations: model 0 torch.Size([512, 4, 4, 200])
shape of activations: model 1 torch.Size([512, 4, 4, 200])
shape of previous transport map torch.Size([512, 512])
doing nothing for skips
returns a uniform measure of cardinality:  512
returns a uniform measure of cardinality:  512
Refactored ground metric calc
inside refactored
Processing the coordinates to form ground_metric
dont leave off the squaring of the ground metric
# of ground metric features is  3200
# of ground metric features in 0 is   3200
# of ground metric features in 1 is   3200
ground metric (m0) is  tensor([[ 0.0000, 29.5296,  0.0000,  ..., 64.9134, 19.7077, 58.9670],
        [37.4576, 43.3165, 37.4576,  ..., 74.9933, 40.2305, 73.4857],
        [20.3380, 40.0270, 20.3380,  ..., 64.7173, 30.7652, 57.9356],
        ...,
        [35.7684, 49.1502, 35.7684,  ..., 67.3301, 41.7666, 68.1668],
        [25.5400, 35.1168, 25.5400,  ..., 69.8783, 28.2143, 70.0048],
        [25.8063, 32.5199, 25.8063,  ..., 72.5603, 27.4907, 71.6560]],
       device='cuda:0')
shape of T_var is  torch.Size([512, 512])
T_var before correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
marginals are  tensor([[511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        ...,
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738],
        [511.9738, 511.9738, 511.9738,  ..., 511.9738, 511.9738, 511.9738]],
       device='cuda:0')
T_var after correction  tensor([[0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        ...,
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.],
        [0., 0., 0.,  ..., 0., 0., 0.]], device='cuda:0')
T_var stats: max 0.9999488592147827, min 0.0, mean 0.0019530251156538725, std 0.044148821383714676 
Ratio of trace to the matrix sum:  tensor(0.0039, device='cuda:0')
Here, trace is 1.9998977184295654 and matrix sum is 511.97381591796875 
Shape of aligned wt is  torch.Size([512, 512, 9])
Shape of fc_layer0_weight_data is  torch.Size([512, 512, 9])

--------------- At layer index 20 ------------- 
 
Previous layer shape is  torch.Size([512, 512, 3, 3])
let's see the difference in layer names linear linear
torch.Size([200, 1, 10]) shape of activations generally
In layer linear.weight: getting activation distance statistics
Statistics of the distance from neurons of layer 1 (averaged across nodes of layer 0): 

Max : 55.79441452026367, Mean : 30.73398208618164, Min : 16.41244888305664, Std: 11.763522148132324
shape of layer: model 0 torch.Size([10, 512])
shape of layer: model 1 torch.Size([10, 512])
shape of activations: model 0 torch.Size([10, 200])
shape of activations: model 1 torch.Size([10, 200])
shape of previous transport map torch.Size([512, 512])
returns a uniform measure of cardinality:  10
returns a uniform measure of cardinality:  10
Refactored ground metric calc
inside refactored
Processing the coordinates to form ground_metric
dont leave off the squaring of the ground metric
# of ground metric features in 0 is   200
# of ground metric features in 1 is   200
ground metric (m0) is  tensor([[14.9581, 21.9386, 21.0499, 31.7159, 22.9007, 31.6429, 50.2393, 24.3367,
         22.4253, 18.5704],
        [21.7463, 12.3265, 27.8387, 38.3020, 29.4695, 32.2548, 56.1978, 24.5522,
         18.4022, 17.5551],
        [26.4111, 34.2683, 23.0925, 19.8632, 21.5816, 40.8927, 33.5747, 40.7717,
         38.6630, 35.8766],
        [38.1077, 44.8289, 35.6178, 20.2532, 28.7125, 49.4123, 33.0311, 50.2842,
         48.7744, 46.1901],
        [28.3967, 26.4319, 23.9321, 34.0596, 21.9673, 22.5381, 56.1971, 20.2336,
         24.5593, 19.6444],
        [31.6118, 27.1779, 26.6228, 36.2706, 28.7051, 15.2577, 62.6952, 17.5505,
         23.7229, 22.7863],
        [35.6339, 43.9790, 37.8595, 32.5056, 33.5811, 57.0825, 18.7969, 55.4907,
         51.7468, 47.8480],
        [23.2208, 22.9371, 20.9746, 31.6041, 22.3399, 23.4197, 56.4332, 14.9751,
         19.6397, 17.7310],
        [34.0741, 27.5894, 35.2667, 48.8929, 38.3683, 26.9721, 72.7009, 18.6909,
         16.7245, 20.1345],
        [22.6801, 18.0592, 21.8641, 33.4483, 24.2174, 24.2153, 55.2212, 18.3812,
         17.7814, 11.3247]], device='cuda:0')
shape of T_var is  torch.Size([10, 10])
T_var before correction  tensor([[0.1000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
         0.0000],
        [0.0000, 0.1000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
         0.0000],
        [0.0000, 0.0000, 0.1000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
         0.0000],
        [0.0000, 0.0000, 0.0000, 0.1000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
         0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.1000, 0.0000, 0.0000, 0.0000, 0.0000,
         0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.1000, 0.0000, 0.0000, 0.0000,
         0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.1000, 0.0000, 0.0000,
         0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.1000, 0.0000,
         0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.1000,
         0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
         0.1000]], device='cuda:0')
marginals are  tensor([[10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000,
         10.0000, 10.0000],
        [10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000,
         10.0000, 10.0000],
        [10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000,
         10.0000, 10.0000],
        [10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000,
         10.0000, 10.0000],
        [10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000,
         10.0000, 10.0000],
        [10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000,
         10.0000, 10.0000],
        [10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000,
         10.0000, 10.0000],
        [10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000,
         10.0000, 10.0000],
        [10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000,
         10.0000, 10.0000],
        [10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000, 10.0000,
         10.0000, 10.0000]], device='cuda:0')
T_var after correction  tensor([[1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
         0.0000],
        [0.0000, 1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
         0.0000],
        [0.0000, 0.0000, 1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
         0.0000],
        [0.0000, 0.0000, 0.0000, 1.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
         0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 1.0000, 0.0000, 0.0000, 0.0000, 0.0000,
         0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 1.0000, 0.0000, 0.0000, 0.0000,
         0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 1.0000, 0.0000, 0.0000,
         0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 1.0000, 0.0000,
         0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 1.0000,
         0.0000],
        [0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000,
         1.0000]], device='cuda:0')
T_var stats: max 0.9999990463256836, min 0.0, mean 0.09999990463256836, std 0.3015110492706299 
Ratio of trace to the matrix sum:  tensor(1., device='cuda:0')
Here, trace is 9.999990463256836 and matrix sum is 9.999990463256836 
Shape of aligned wt is  torch.Size([10, 512])
Shape of fc_layer0_weight_data is  torch.Size([10, 512])
using independent method
model parameters are 
 [torch.Size([64, 3, 3, 3]), torch.Size([64, 64, 3, 3]), torch.Size([64, 64, 3, 3]), torch.Size([64, 64, 3, 3]), torch.Size([64, 64, 3, 3]), torch.Size([128, 64, 3, 3]), torch.Size([128, 128, 3, 3]), torch.Size([128, 64, 1, 1]), torch.Size([128, 128, 3, 3]), torch.Size([128, 128, 3, 3]), torch.Size([256, 128, 3, 3]), torch.Size([256, 256, 3, 3]), torch.Size([256, 128, 1, 1]), torch.Size([256, 256, 3, 3]), torch.Size([256, 256, 3, 3]), torch.Size([512, 256, 3, 3]), torch.Size([512, 512, 3, 3]), torch.Size([512, 256, 1, 1]), torch.Size([512, 512, 3, 3]), torch.Size([512, 512, 3, 3]), torch.Size([10, 512])]

--------- Testing in global mode ---------
size of test_loader dataset:  10000

Test set: Avg. loss: 0.0230, Accuracy: 1162/10000 (12%)

len of model parameters and avg aligned layers is  21 21
len of model_state_dict is  21
len of param_list is  21

--------- Testing in global mode ---------
size of test_loader dataset:  10000

Test set: Avg. loss: 0.0227, Accuracy: 1331/10000 (13%)

Timer ends
Time taken for geometric ensembling is 15.593362676911056 seconds
------- Prediction based ensembling -------

Test set: Avg. loss: 0.0185, Accuracy: 3604/10000 (36%)

------- Naive ensembling of weights -------
[torch.Size([64, 3, 3, 3]), torch.Size([64, 3, 3, 3])]
torch.Size([64, 3, 3, 3])
[torch.Size([64, 64, 3, 3]), torch.Size([64, 64, 3, 3])]
torch.Size([64, 64, 3, 3])
[torch.Size([64, 64, 3, 3]), torch.Size([64, 64, 3, 3])]
torch.Size([64, 64, 3, 3])
[torch.Size([64, 64, 3, 3]), torch.Size([64, 64, 3, 3])]
torch.Size([64, 64, 3, 3])
[torch.Size([64, 64, 3, 3]), torch.Size([64, 64, 3, 3])]
torch.Size([64, 64, 3, 3])
[torch.Size([128, 64, 3, 3]), torch.Size([128, 64, 3, 3])]
torch.Size([128, 64, 3, 3])
[torch.Size([128, 128, 3, 3]), torch.Size([128, 128, 3, 3])]
torch.Size([128, 128, 3, 3])
[torch.Size([128, 64, 1, 1]), torch.Size([128, 64, 1, 1])]
torch.Size([128, 64, 1, 1])
[torch.Size([128, 128, 3, 3]), torch.Size([128, 128, 3, 3])]
torch.Size([128, 128, 3, 3])
[torch.Size([128, 128, 3, 3]), torch.Size([128, 128, 3, 3])]
torch.Size([128, 128, 3, 3])
[torch.Size([256, 128, 3, 3]), torch.Size([256, 128, 3, 3])]
torch.Size([256, 128, 3, 3])
[torch.Size([256, 256, 3, 3]), torch.Size([256, 256, 3, 3])]
torch.Size([256, 256, 3, 3])
[torch.Size([256, 128, 1, 1]), torch.Size([256, 128, 1, 1])]
torch.Size([256, 128, 1, 1])
[torch.Size([256, 256, 3, 3]), torch.Size([256, 256, 3, 3])]
torch.Size([256, 256, 3, 3])
[torch.Size([256, 256, 3, 3]), torch.Size([256, 256, 3, 3])]
torch.Size([256, 256, 3, 3])
[torch.Size([512, 256, 3, 3]), torch.Size([512, 256, 3, 3])]
torch.Size([512, 256, 3, 3])
[torch.Size([512, 512, 3, 3]), torch.Size([512, 512, 3, 3])]
torch.Size([512, 512, 3, 3])
[torch.Size([512, 256, 1, 1]), torch.Size([512, 256, 1, 1])]
torch.Size([512, 256, 1, 1])
[torch.Size([512, 512, 3, 3]), torch.Size([512, 512, 3, 3])]
torch.Size([512, 512, 3, 3])
[torch.Size([512, 512, 3, 3]), torch.Size([512, 512, 3, 3])]
torch.Size([512, 512, 3, 3])
[torch.Size([10, 512]), torch.Size([10, 512])]
torch.Size([10, 512])
model parameters are 
 [torch.Size([64, 3, 3, 3]), torch.Size([64, 64, 3, 3]), torch.Size([64, 64, 3, 3]), torch.Size([64, 64, 3, 3]), torch.Size([64, 64, 3, 3]), torch.Size([128, 64, 3, 3]), torch.Size([128, 128, 3, 3]), torch.Size([128, 64, 1, 1]), torch.Size([128, 128, 3, 3]), torch.Size([128, 128, 3, 3]), torch.Size([256, 128, 3, 3]), torch.Size([256, 256, 3, 3]), torch.Size([256, 128, 1, 1]), torch.Size([256, 256, 3, 3]), torch.Size([256, 256, 3, 3]), torch.Size([512, 256, 3, 3]), torch.Size([512, 512, 3, 3]), torch.Size([512, 256, 1, 1]), torch.Size([512, 512, 3, 3]), torch.Size([512, 512, 3, 3]), torch.Size([10, 512])]

--------- Testing in global mode ---------
size of test_loader dataset:  10000

Test set: Avg. loss: 0.0230, Accuracy: 1000/10000 (10%)


--------- Testing in global mode ---------
/home/gvignen/.local/lib/python3.10/site-packages/torch/optim/lr_scheduler.py:136: UserWarning: Detected call of `lr_scheduler.step()` before `optimizer.step()`. In PyTorch 1.1.0 and later, you should call them in the opposite order: `optimizer.step()` before `lr_scheduler.step()`.  Failure to do this will result in PyTorch skipping the first value of the learning rate schedule. See more details at https://pytorch.org/docs/stable/optim.html#how-to-adjust-learning-rate
  warnings.warn("Detected call of `lr_scheduler.step()` before `optimizer.step()`. "
/home/gvignen/.local/lib/python3.10/site-packages/torch/optim/lr_scheduler.py:149: UserWarning: The epoch parameter in `scheduler.step()` was not necessary and is being deprecated where possible. Please use `scheduler.step()` to step the scheduler. During the deprecation, if epoch is different from None, the closed form is used instead of the new chainable form, where available. Please open an issue if you are unable to replicate your use case: https://github.com/pytorch/pytorch/issues/new/choose.
  warnings.warn(EPOCH_DEPRECATION_WARNING, UserWarning)
size of test_loader dataset:  10000

Test set: Avg. loss: 0.0230, Accuracy: 1393/10000 (14%)

-------- Retraining the models ---------
Retraining model :  geometric
lr is  0.1
number of epochs would be  300
Epoch 000
accuracy: {'epoch': 0, 'value': 0.14080000000238416} ({'split': 'train'})
cross_entropy: {'epoch': 0, 'value': 2.257142142562865} ({'split': 'train'})
accuracy: {'epoch': 0, 'value': 0.14249999642372135} ({'split': 'test'})
cross_entropy: {'epoch': 0, 'value': 2.266486866474151} ({'split': 'test'})
We have a new best! with accuracy::0.14249999642372135 and at epoch::0, let's save it!
Epoch 001
accuracy: {'epoch': 1, 'value': 0.1276400000047683} ({'split': 'train'})
cross_entropy: {'epoch': 1, 'value': 2.281581118545534} ({'split': 'train'})
accuracy: {'epoch': 1, 'value': 0.10159999752417209} ({'split': 'test'})
cross_entropy: {'epoch': 1, 'value': 2.302908215522766} ({'split': 'test'})
Epoch 002
accuracy: {'epoch': 2, 'value': 0.11568000000715255} ({'split': 'train'})
cross_entropy: {'epoch': 2, 'value': 2.302748675613402} ({'split': 'train'})
accuracy: {'epoch': 2, 'value': 0.13399999644607305} ({'split': 'test'})
cross_entropy: {'epoch': 2, 'value': 2.3026313638687137} ({'split': 'test'})
Epoch 003
accuracy: {'epoch': 3, 'value': 0.13010000000715258} ({'split': 'train'})
cross_entropy: {'epoch': 3, 'value': 2.3025506590271005} ({'split': 'train'})
accuracy: {'epoch': 3, 'value': 0.14119999691843982} ({'split': 'test'})
cross_entropy: {'epoch': 3, 'value': 2.302507975101471} ({'split': 'test'})
Epoch 004
accuracy: {'epoch': 4, 'value': 0.1232400000071525} ({'split': 'train'})
cross_entropy: {'epoch': 4, 'value': 2.2822884931945793} ({'split': 'train'})
accuracy: {'epoch': 4, 'value': 0.168699995726347} ({'split': 'test'})
cross_entropy: {'epoch': 4, 'value': 2.1575644350051872} ({'split': 'test'})
We have a new best! with accuracy::0.168699995726347 and at epoch::4, let's save it!
Epoch 005
accuracy: {'epoch': 5, 'value': 0.23460000001430512} ({'split': 'train'})
cross_entropy: {'epoch': 5, 'value': 2.044536015014648} ({'split': 'train'})
accuracy: {'epoch': 5, 'value': 0.29629999339580537} ({'split': 'test'})
cross_entropy: {'epoch': 5, 'value': 1.866465737819671} ({'split': 'test'})
We have a new best! with accuracy::0.29629999339580537 and at epoch::5, let's save it!
Epoch 006
accuracy: {'epoch': 6, 'value': 0.33228000002861047} ({'split': 'train'})
cross_entropy: {'epoch': 6, 'value': 1.8019513873672475} ({'split': 'train'})
accuracy: {'epoch': 6, 'value': 0.379999990463257} ({'split': 'test'})
cross_entropy: {'epoch': 6, 'value': 1.658053380250931} ({'split': 'test'})
We have a new best! with accuracy::0.379999990463257 and at epoch::6, let's save it!
Epoch 007
accuracy: {'epoch': 7, 'value': 0.4178800000000001} ({'split': 'train'})
cross_entropy: {'epoch': 7, 'value': 1.580799129257202} ({'split': 'train'})
accuracy: {'epoch': 7, 'value': 0.4960999861359594} ({'split': 'test'})
cross_entropy: {'epoch': 7, 'value': 1.4006657207012174} ({'split': 'test'})
We have a new best! with accuracy::0.4960999861359594 and at epoch::7, let's save it!
Epoch 008
accuracy: {'epoch': 8, 'value': 0.5110400000190735} ({'split': 'train'})
cross_entropy: {'epoch': 8, 'value': 1.3578230491256718} ({'split': 'train'})
accuracy: {'epoch': 8, 'value': 0.5156999871134759} ({'split': 'test'})
cross_entropy: {'epoch': 8, 'value': 1.4162051773071287} ({'split': 'test'})
We have a new best! with accuracy::0.5156999871134759 and at epoch::8, let's save it!
Epoch 009
accuracy: {'epoch': 9, 'value': 0.588280000019074} ({'split': 'train'})
cross_entropy: {'epoch': 9, 'value': 1.1562282311248777} ({'split': 'train'})
accuracy: {'epoch': 9, 'value': 0.6236999863386155} ({'split': 'test'})
cross_entropy: {'epoch': 9, 'value': 1.064625207185745} ({'split': 'test'})
We have a new best! with accuracy::0.6236999863386155 and at epoch::9, let's save it!
Epoch 010
accuracy: {'epoch': 10, 'value': 0.6537999999999998} ({'split': 'train'})
cross_entropy: {'epoch': 10, 'value': 0.9853340600967407} ({'split': 'train'})
accuracy: {'epoch': 10, 'value': 0.6809999859333037} ({'split': 'test'})
cross_entropy: {'epoch': 10, 'value': 0.9253151619434357} ({'split': 'test'})
We have a new best! with accuracy::0.6809999859333037 and at epoch::10, let's save it!
Epoch 011
accuracy: {'epoch': 11, 'value': 0.6970600000572206} ({'split': 'train'})
cross_entropy: {'epoch': 11, 'value': 0.8685843834877017} ({'split': 'train'})
accuracy: {'epoch': 11, 'value': 0.7288999813795088} ({'split': 'test'})
cross_entropy: {'epoch': 11, 'value': 0.797645888030529} ({'split': 'test'})
We have a new best! with accuracy::0.7288999813795088 and at epoch::11, let's save it!
Epoch 012
accuracy: {'epoch': 12, 'value': 0.7359400000381469} ({'split': 'train'})
cross_entropy: {'epoch': 12, 'value': 0.7679667042160035} ({'split': 'train'})
accuracy: {'epoch': 12, 'value': 0.7493999832868574} ({'split': 'test'})
cross_entropy: {'epoch': 12, 'value': 0.7387402641773227} ({'split': 'test'})
We have a new best! with accuracy::0.7493999832868574 and at epoch::12, let's save it!
Epoch 013
accuracy: {'epoch': 13, 'value': 0.7572200000381472} ({'split': 'train'})
cross_entropy: {'epoch': 13, 'value': 0.7082973982048035} ({'split': 'train'})
accuracy: {'epoch': 13, 'value': 0.7376999807357787} ({'split': 'test'})
cross_entropy: {'epoch': 13, 'value': 0.7853631246089935} ({'split': 'test'})
Epoch 014
accuracy: {'epoch': 14, 'value': 0.78224} ({'split': 'train'})
cross_entropy: {'epoch': 14, 'value': 0.6398507188034058} ({'split': 'train'})
accuracy: {'epoch': 14, 'value': 0.7816999793052674} ({'split': 'test'})
cross_entropy: {'epoch': 14, 'value': 0.6500814083218575} ({'split': 'test'})
We have a new best! with accuracy::0.7816999793052674 and at epoch::14, let's save it!
Epoch 015
accuracy: {'epoch': 15, 'value': 0.7935400000381473} ({'split': 'train'})
cross_entropy: {'epoch': 15, 'value': 0.601763639526367} ({'split': 'train'})
accuracy: {'epoch': 15, 'value': 0.7691999793052675} ({'split': 'test'})
cross_entropy: {'epoch': 15, 'value': 0.6648571172356608} ({'split': 'test'})
Epoch 016
accuracy: {'epoch': 16, 'value': 0.8071000000190737} ({'split': 'train'})
cross_entropy: {'epoch': 16, 'value': 0.5726663878250124} ({'split': 'train'})
accuracy: {'epoch': 16, 'value': 0.7775999814271926} ({'split': 'test'})
cross_entropy: {'epoch': 16, 'value': 0.6743178972601889} ({'split': 'test'})
Epoch 017
accuracy: {'epoch': 17, 'value': 0.8149600000572204} ({'split': 'train'})
cross_entropy: {'epoch': 17, 'value': 0.5409911120986935} ({'split': 'train'})
accuracy: {'epoch': 17, 'value': 0.801599980592728} ({'split': 'test'})
cross_entropy: {'epoch': 17, 'value': 0.6093840536475181} ({'split': 'test'})
We have a new best! with accuracy::0.801599980592728 and at epoch::17, let's save it!
Epoch 018
accuracy: {'epoch': 18, 'value': 0.8262600000000001} ({'split': 'train'})
cross_entropy: {'epoch': 18, 'value': 0.5063553934478762} ({'split': 'train'})
accuracy: {'epoch': 18, 'value': 0.8116999804973604} ({'split': 'test'})
cross_entropy: {'epoch': 18, 'value': 0.5730124706029891} ({'split': 'test'})
We have a new best! with accuracy::0.8116999804973604 and at epoch::18, let's save it!
Epoch 019
accuracy: {'epoch': 19, 'value': 0.8347399999809269} ({'split': 'train'})
cross_entropy: {'epoch': 19, 'value': 0.4855891476535797} ({'split': 'train'})
accuracy: {'epoch': 19, 'value': 0.8193999803066253} ({'split': 'test'})
cross_entropy: {'epoch': 19, 'value': 0.5460865068435672} ({'split': 'test'})
We have a new best! with accuracy::0.8193999803066253 and at epoch::19, let's save it!
Epoch 020
accuracy: {'epoch': 20, 'value': 0.8379400000381466} ({'split': 'train'})
cross_entropy: {'epoch': 20, 'value': 0.4727774743652345} ({'split': 'train'})
accuracy: {'epoch': 20, 'value': 0.7694999831914903} ({'split': 'test'})
cross_entropy: {'epoch': 20, 'value': 0.7011205205321311} ({'split': 'test'})
Epoch 021
accuracy: {'epoch': 21, 'value': 0.8411400000381469} ({'split': 'train'})
cross_entropy: {'epoch': 21, 'value': 0.467485191707611} ({'split': 'train'})
accuracy: {'epoch': 21, 'value': 0.8149999779462813} ({'split': 'test'})
cross_entropy: {'epoch': 21, 'value': 0.562246461510658} ({'split': 'test'})
Epoch 022
accuracy: {'epoch': 22, 'value': 0.84802000005722} ({'split': 'train'})
cross_entropy: {'epoch': 22, 'value': 0.4434849417114258} ({'split': 'train'})
accuracy: {'epoch': 22, 'value': 0.8285999798774719} ({'split': 'test'})
cross_entropy: {'epoch': 22, 'value': 0.49567860633134836} ({'split': 'test'})
We have a new best! with accuracy::0.8285999798774719 and at epoch::22, let's save it!
Epoch 023
accuracy: {'epoch': 23, 'value': 0.8511799999809263} ({'split': 'train'})
cross_entropy: {'epoch': 23, 'value': 0.4309598834609984} ({'split': 'train'})
accuracy: {'epoch': 23, 'value': 0.8252999770641328} ({'split': 'test'})
cross_entropy: {'epoch': 23, 'value': 0.5305228960514069} ({'split': 'test'})
Epoch 024
accuracy: {'epoch': 24, 'value': 0.8597599999809263} ({'split': 'train'})
cross_entropy: {'epoch': 24, 'value': 0.41386364022254957} ({'split': 'train'})
accuracy: {'epoch': 24, 'value': 0.8384999805688855} ({'split': 'test'})
cross_entropy: {'epoch': 24, 'value': 0.4726054319739342} ({'split': 'test'})
We have a new best! with accuracy::0.8384999805688855 and at epoch::24, let's save it!
Epoch 025
accuracy: {'epoch': 25, 'value': 0.8625199999809265} ({'split': 'train'})
cross_entropy: {'epoch': 25, 'value': 0.4051544499111175} ({'split': 'train'})
accuracy: {'epoch': 25, 'value': 0.8532999789714809} ({'split': 'test'})
cross_entropy: {'epoch': 25, 'value': 0.4370890982449056} ({'split': 'test'})
We have a new best! with accuracy::0.8532999789714809 and at epoch::25, let's save it!
Epoch 026
accuracy: {'epoch': 26, 'value': 0.8674400000381471} ({'split': 'train'})
cross_entropy: {'epoch': 26, 'value': 0.3870768582725525} ({'split': 'train'})
accuracy: {'epoch': 26, 'value': 0.8497999781370162} ({'split': 'test'})
cross_entropy: {'epoch': 26, 'value': 0.4639335484802724} ({'split': 'test'})
Epoch 027
accuracy: {'epoch': 27, 'value': 0.8681200000190736} ({'split': 'train'})
cross_entropy: {'epoch': 27, 'value': 0.38525734771728515} ({'split': 'train'})
accuracy: {'epoch': 27, 'value': 0.846699979305267} ({'split': 'test'})
cross_entropy: {'epoch': 27, 'value': 0.4647741930186749} ({'split': 'test'})
Epoch 028
accuracy: {'epoch': 28, 'value': 0.8738800000000002} ({'split': 'train'})
cross_entropy: {'epoch': 28, 'value': 0.3705071068954468} ({'split': 'train'})
accuracy: {'epoch': 28, 'value': 0.8467999780178068} ({'split': 'test'})
cross_entropy: {'epoch': 28, 'value': 0.4782354226708413} ({'split': 'test'})
Epoch 029
accuracy: {'epoch': 29, 'value': 0.8783200000572207} ({'split': 'train'})
cross_entropy: {'epoch': 29, 'value': 0.35659694262504565} ({'split': 'train'})
accuracy: {'epoch': 29, 'value': 0.8355999803543089} ({'split': 'test'})
cross_entropy: {'epoch': 29, 'value': 0.5057319390773775} ({'split': 'test'})
Epoch 030
accuracy: {'epoch': 30, 'value': 0.8774600000000002} ({'split': 'train'})
cross_entropy: {'epoch': 30, 'value': 0.35592864499092086} ({'split': 'train'})
accuracy: {'epoch': 30, 'value': 0.8506999742984775} ({'split': 'test'})
cross_entropy: {'epoch': 30, 'value': 0.47290713414549806} ({'split': 'test'})
Epoch 031
accuracy: {'epoch': 31, 'value': 0.8783399999999998} ({'split': 'train'})
cross_entropy: {'epoch': 31, 'value': 0.35527796797752365} ({'split': 'train'})
accuracy: {'epoch': 31, 'value': 0.8546999788284301} ({'split': 'test'})
cross_entropy: {'epoch': 31, 'value': 0.43414215460419675} ({'split': 'test'})
We have a new best! with accuracy::0.8546999788284301 and at epoch::31, let's save it!
Epoch 032
accuracy: {'epoch': 32, 'value': 0.8832000000190733} ({'split': 'train'})
cross_entropy: {'epoch': 32, 'value': 0.3412198139381409} ({'split': 'train'})
accuracy: {'epoch': 32, 'value': 0.8566999781131743} ({'split': 'test'})
cross_entropy: {'epoch': 32, 'value': 0.43552911072969425} ({'split': 'test'})
We have a new best! with accuracy::0.8566999781131743 and at epoch::32, let's save it!
Epoch 033
accuracy: {'epoch': 33, 'value': 0.8856000000381474} ({'split': 'train'})
cross_entropy: {'epoch': 33, 'value': 0.33375624296188366} ({'split': 'train'})
accuracy: {'epoch': 33, 'value': 0.8445999842882159} ({'split': 'test'})
cross_entropy: {'epoch': 33, 'value': 0.47340094685554523} ({'split': 'test'})
Epoch 034
accuracy: {'epoch': 34, 'value': 0.8859} ({'split': 'train'})
cross_entropy: {'epoch': 34, 'value': 0.3363569934654236} ({'split': 'train'})
accuracy: {'epoch': 34, 'value': 0.8551999807357791} ({'split': 'test'})
cross_entropy: {'epoch': 34, 'value': 0.4410093899071217} ({'split': 'test'})
Epoch 035
accuracy: {'epoch': 35, 'value': 0.8893199999809265} ({'split': 'train'})
cross_entropy: {'epoch': 35, 'value': 0.32433297913551334} ({'split': 'train'})
accuracy: {'epoch': 35, 'value': 0.8577999812364574} ({'split': 'test'})
cross_entropy: {'epoch': 35, 'value': 0.44381084516644476} ({'split': 'test'})
We have a new best! with accuracy::0.8577999812364574 and at epoch::35, let's save it!
Epoch 036
accuracy: {'epoch': 36, 'value': 0.8929999999809269} ({'split': 'train'})
cross_entropy: {'epoch': 36, 'value': 0.3122962787914277} ({'split': 'train'})
accuracy: {'epoch': 36, 'value': 0.8618999814987184} ({'split': 'test'})
cross_entropy: {'epoch': 36, 'value': 0.4170969413220882} ({'split': 'test'})
We have a new best! with accuracy::0.8618999814987184 and at epoch::36, let's save it!
Epoch 037
accuracy: {'epoch': 37, 'value': 0.8930000000572205} ({'split': 'train'})
cross_entropy: {'epoch': 37, 'value': 0.31466897507667546} ({'split': 'train'})
accuracy: {'epoch': 37, 'value': 0.855099977850914} ({'split': 'test'})
cross_entropy: {'epoch': 37, 'value': 0.44592841342091577} ({'split': 'test'})
Epoch 038
accuracy: {'epoch': 38, 'value': 0.8922800000381472} ({'split': 'train'})
cross_entropy: {'epoch': 38, 'value': 0.3143330572414399} ({'split': 'train'})
accuracy: {'epoch': 38, 'value': 0.8514999788999554} ({'split': 'test'})
cross_entropy: {'epoch': 38, 'value': 0.4991326895356177} ({'split': 'test'})
Epoch 039
accuracy: {'epoch': 39, 'value': 0.8899200000572206} ({'split': 'train'})
cross_entropy: {'epoch': 39, 'value': 0.31920331583023065} ({'split': 'train'})
accuracy: {'epoch': 39, 'value': 0.8574999773502351} ({'split': 'test'})
cross_entropy: {'epoch': 39, 'value': 0.4416125871241093} ({'split': 'test'})
Epoch 040
accuracy: {'epoch': 40, 'value': 0.8975000000190737} ({'split': 'train'})
cross_entropy: {'epoch': 40, 'value': 0.30289524900436376} ({'split': 'train'})
accuracy: {'epoch': 40, 'value': 0.8642999780178068} ({'split': 'test'})
cross_entropy: {'epoch': 40, 'value': 0.427033125758171} ({'split': 'test'})
We have a new best! with accuracy::0.8642999780178068 and at epoch::40, let's save it!
Epoch 041
accuracy: {'epoch': 41, 'value': 0.9000400000190735} ({'split': 'train'})
cross_entropy: {'epoch': 41, 'value': 0.295071767034531} ({'split': 'train'})
accuracy: {'epoch': 41, 'value': 0.8481999814510346} ({'split': 'test'})
cross_entropy: {'epoch': 41, 'value': 0.47519919157028184} ({'split': 'test'})
Epoch 042
accuracy: {'epoch': 42, 'value': 0.9024799999999998} ({'split': 'train'})
cross_entropy: {'epoch': 42, 'value': 0.2821160968875887} ({'split': 'train'})
accuracy: {'epoch': 42, 'value': 0.8699999791383741} ({'split': 'test'})
cross_entropy: {'epoch': 42, 'value': 0.41184257313609124} ({'split': 'test'})
We have a new best! with accuracy::0.8699999791383741 and at epoch::42, let's save it!
Epoch 043
accuracy: {'epoch': 43, 'value': 0.9016800000572207} ({'split': 'train'})
cross_entropy: {'epoch': 43, 'value': 0.28439628098964687} ({'split': 'train'})
accuracy: {'epoch': 43, 'value': 0.8666999787092211} ({'split': 'test'})
cross_entropy: {'epoch': 43, 'value': 0.41577354758977897} ({'split': 'test'})
Epoch 044
accuracy: {'epoch': 44, 'value': 0.9035600000190732} ({'split': 'train'})
cross_entropy: {'epoch': 44, 'value': 0.28331032295227065} ({'split': 'train'})
accuracy: {'epoch': 44, 'value': 0.8516999804973604} ({'split': 'test'})
cross_entropy: {'epoch': 44, 'value': 0.46747287407517435} ({'split': 'test'})
Epoch 045
accuracy: {'epoch': 45, 'value': 0.9052600000381472} ({'split': 'train'})
cross_entropy: {'epoch': 45, 'value': 0.27761535000324256} ({'split': 'train'})
accuracy: {'epoch': 45, 'value': 0.8712999808788298} ({'split': 'test'})
cross_entropy: {'epoch': 45, 'value': 0.40790094360709206} ({'split': 'test'})
We have a new best! with accuracy::0.8712999808788298 and at epoch::45, let's save it!
Epoch 046
accuracy: {'epoch': 46, 'value': 0.9041000000572204} ({'split': 'train'})
cross_entropy: {'epoch': 46, 'value': 0.27804679330825804} ({'split': 'train'})
accuracy: {'epoch': 46, 'value': 0.8660999780893325} ({'split': 'test'})
cross_entropy: {'epoch': 46, 'value': 0.4161451491713524} ({'split': 'test'})
Epoch 047
accuracy: {'epoch': 47, 'value': 0.9065800000381472} ({'split': 'train'})
cross_entropy: {'epoch': 47, 'value': 0.26827670615196203} ({'split': 'train'})
accuracy: {'epoch': 47, 'value': 0.8619999825954436} ({'split': 'test'})
cross_entropy: {'epoch': 47, 'value': 0.4502297097444535} ({'split': 'test'})
Epoch 048
accuracy: {'epoch': 48, 'value': 0.9107400000190736} ({'split': 'train'})
cross_entropy: {'epoch': 48, 'value': 0.26295590857505785} ({'split': 'train'})
accuracy: {'epoch': 48, 'value': 0.866299978494644} ({'split': 'test'})
cross_entropy: {'epoch': 48, 'value': 0.42684527128934874} ({'split': 'test'})
Epoch 049
accuracy: {'epoch': 49, 'value': 0.9076800000000002} ({'split': 'train'})
cross_entropy: {'epoch': 49, 'value': 0.2639026418209077} ({'split': 'train'})
accuracy: {'epoch': 49, 'value': 0.862999978661537} ({'split': 'test'})
cross_entropy: {'epoch': 49, 'value': 0.43988087877631193} ({'split': 'test'})
Epoch 050
accuracy: {'epoch': 50, 'value': 0.9076399999809261} ({'split': 'train'})
cross_entropy: {'epoch': 50, 'value': 0.2664510039138794} ({'split': 'train'})
accuracy: {'epoch': 50, 'value': 0.8734999799728393} ({'split': 'test'})
cross_entropy: {'epoch': 50, 'value': 0.3811983811855317} ({'split': 'test'})
We have a new best! with accuracy::0.8734999799728393 and at epoch::50, let's save it!
Epoch 051
accuracy: {'epoch': 51, 'value': 0.9139800000572205} ({'split': 'train'})
cross_entropy: {'epoch': 51, 'value': 0.25253702337265016} ({'split': 'train'})
accuracy: {'epoch': 51, 'value': 0.8520999765396118} ({'split': 'test'})
cross_entropy: {'epoch': 51, 'value': 0.49279074847698223} ({'split': 'test'})
Epoch 052
accuracy: {'epoch': 52, 'value': 0.9122800000572202} ({'split': 'train'})
cross_entropy: {'epoch': 52, 'value': 0.2579465245604515} ({'split': 'train'})
accuracy: {'epoch': 52, 'value': 0.8770999795198439} ({'split': 'test'})
cross_entropy: {'epoch': 52, 'value': 0.3869068513810635} ({'split': 'test'})
We have a new best! with accuracy::0.8770999795198439 and at epoch::52, let's save it!
Epoch 053
accuracy: {'epoch': 53, 'value': 0.9120199999999995} ({'split': 'train'})
cross_entropy: {'epoch': 53, 'value': 0.25788485320091253} ({'split': 'train'})
accuracy: {'epoch': 53, 'value': 0.8634999775886537} ({'split': 'test'})
cross_entropy: {'epoch': 53, 'value': 0.421891216635704} ({'split': 'test'})
Epoch 054
accuracy: {'epoch': 54, 'value': 0.9143200000572206} ({'split': 'train'})
cross_entropy: {'epoch': 54, 'value': 0.24511212435722354} ({'split': 'train'})
accuracy: {'epoch': 54, 'value': 0.8688999813795093} ({'split': 'test'})
cross_entropy: {'epoch': 54, 'value': 0.4227504013478755} ({'split': 'test'})
Epoch 055
accuracy: {'epoch': 55, 'value': 0.915000000019074} ({'split': 'train'})
cross_entropy: {'epoch': 55, 'value': 0.24796421178817746} ({'split': 'train'})
accuracy: {'epoch': 55, 'value': 0.8706999796628949} ({'split': 'test'})
cross_entropy: {'epoch': 55, 'value': 0.39694741606712336} ({'split': 'test'})
Epoch 056
accuracy: {'epoch': 56, 'value': 0.9174800000572205} ({'split': 'train'})
cross_entropy: {'epoch': 56, 'value': 0.24079547776222227} ({'split': 'train'})
accuracy: {'epoch': 56, 'value': 0.8731999808549882} ({'split': 'test'})
cross_entropy: {'epoch': 56, 'value': 0.4026048445701598} ({'split': 'test'})
Epoch 057
accuracy: {'epoch': 57, 'value': 0.9128999999809266} ({'split': 'train'})
cross_entropy: {'epoch': 57, 'value': 0.2506910019493104} ({'split': 'train'})
accuracy: {'epoch': 57, 'value': 0.8748999822139739} ({'split': 'test'})
cross_entropy: {'epoch': 57, 'value': 0.39806070595979687} ({'split': 'test'})
Epoch 058
accuracy: {'epoch': 58, 'value': 0.9175200000572206} ({'split': 'train'})
cross_entropy: {'epoch': 58, 'value': 0.24097705292701727} ({'split': 'train'})
accuracy: {'epoch': 58, 'value': 0.8582999789714814} ({'split': 'test'})
cross_entropy: {'epoch': 58, 'value': 0.44121811658143995} ({'split': 'test'})
Epoch 059
accuracy: {'epoch': 59, 'value': 0.9164799999999996} ({'split': 'train'})
cross_entropy: {'epoch': 59, 'value': 0.24580718261718748} ({'split': 'train'})
accuracy: {'epoch': 59, 'value': 0.868499982357025} ({'split': 'test'})
cross_entropy: {'epoch': 59, 'value': 0.4042121280729771} ({'split': 'test'})
Epoch 060
accuracy: {'epoch': 60, 'value': 0.91722} ({'split': 'train'})
cross_entropy: {'epoch': 60, 'value': 0.2402823288154602} ({'split': 'train'})
accuracy: {'epoch': 60, 'value': 0.8678999811410903} ({'split': 'test'})
cross_entropy: {'epoch': 60, 'value': 0.43044800519943244} ({'split': 'test'})
Epoch 061
accuracy: {'epoch': 61, 'value': 0.9198600000190734} ({'split': 'train'})
cross_entropy: {'epoch': 61, 'value': 0.234936380329132} ({'split': 'train'})
accuracy: {'epoch': 61, 'value': 0.8698999798297882} ({'split': 'test'})
cross_entropy: {'epoch': 61, 'value': 0.4059274923801423} ({'split': 'test'})
Epoch 062
accuracy: {'epoch': 62, 'value': 0.9172799999809268} ({'split': 'train'})
cross_entropy: {'epoch': 62, 'value': 0.23977130590438836} ({'split': 'train'})
accuracy: {'epoch': 62, 'value': 0.8698999780416494} ({'split': 'test'})
cross_entropy: {'epoch': 62, 'value': 0.4315580695867538} ({'split': 'test'})
Epoch 063
accuracy: {'epoch': 63, 'value': 0.9199800000190741} ({'split': 'train'})
cross_entropy: {'epoch': 63, 'value': 0.23206472881317142} ({'split': 'train'})
accuracy: {'epoch': 63, 'value': 0.8658999776840214} ({'split': 'test'})
cross_entropy: {'epoch': 63, 'value': 0.45659706607460954} ({'split': 'test'})
Epoch 064
accuracy: {'epoch': 64, 'value': 0.9180000000190734} ({'split': 'train'})
cross_entropy: {'epoch': 64, 'value': 0.23498678339958196} ({'split': 'train'})
accuracy: {'epoch': 64, 'value': 0.8757999789714812} ({'split': 'test'})
cross_entropy: {'epoch': 64, 'value': 0.4033359587192536} ({'split': 'test'})
Epoch 065
accuracy: {'epoch': 65, 'value': 0.9211600000572202} ({'split': 'train'})
cross_entropy: {'epoch': 65, 'value': 0.2298632390975952} ({'split': 'train'})
accuracy: {'epoch': 65, 'value': 0.8647999799251557} ({'split': 'test'})
cross_entropy: {'epoch': 65, 'value': 0.43870299383997924} ({'split': 'test'})
Epoch 066
accuracy: {'epoch': 66, 'value': 0.9245600000190735} ({'split': 'train'})
cross_entropy: {'epoch': 66, 'value': 0.2235118723869323} ({'split': 'train'})
accuracy: {'epoch': 66, 'value': 0.8725999802350998} ({'split': 'test'})
cross_entropy: {'epoch': 66, 'value': 0.41383942693471903} ({'split': 'test'})
Epoch 067
accuracy: {'epoch': 67, 'value': 0.9219599999999999} ({'split': 'train'})
cross_entropy: {'epoch': 67, 'value': 0.22359152242660515} ({'split': 'train'})
accuracy: {'epoch': 67, 'value': 0.8862999844551087} ({'split': 'test'})
cross_entropy: {'epoch': 67, 'value': 0.36999437615275393} ({'split': 'test'})
We have a new best! with accuracy::0.8862999844551087 and at epoch::67, let's save it!
Epoch 068
accuracy: {'epoch': 68, 'value': 0.9221199999809266} ({'split': 'train'})
cross_entropy: {'epoch': 68, 'value': 0.22443951739788046} ({'split': 'train'})
accuracy: {'epoch': 68, 'value': 0.8744999831914904} ({'split': 'test'})
cross_entropy: {'epoch': 68, 'value': 0.40305656999349593} ({'split': 'test'})
Epoch 069
accuracy: {'epoch': 69, 'value': 0.9292600000381471} ({'split': 'train'})
cross_entropy: {'epoch': 69, 'value': 0.20890096036911013} ({'split': 'train'})
accuracy: {'epoch': 69, 'value': 0.881199980378151} ({'split': 'test'})
cross_entropy: {'epoch': 69, 'value': 0.38712008833885186} ({'split': 'test'})
Epoch 070
accuracy: {'epoch': 70, 'value': 0.9240200000190736} ({'split': 'train'})
cross_entropy: {'epoch': 70, 'value': 0.21775934353828424} ({'split': 'train'})
accuracy: {'epoch': 70, 'value': 0.8744999808073043} ({'split': 'test'})
cross_entropy: {'epoch': 70, 'value': 0.4126457202434541} ({'split': 'test'})
Epoch 071
accuracy: {'epoch': 71, 'value': 0.9262200000000003} ({'split': 'train'})
cross_entropy: {'epoch': 71, 'value': 0.2169353801488877} ({'split': 'train'})
accuracy: {'epoch': 71, 'value': 0.8797999823093413} ({'split': 'test'})
cross_entropy: {'epoch': 71, 'value': 0.38196106716990463} ({'split': 'test'})
Epoch 072
accuracy: {'epoch': 72, 'value': 0.9247799999809264} ({'split': 'train'})
cross_entropy: {'epoch': 72, 'value': 0.2156729130363464} ({'split': 'train'})
accuracy: {'epoch': 72, 'value': 0.8756999790668487} ({'split': 'test'})
cross_entropy: {'epoch': 72, 'value': 0.40897188499569875} ({'split': 'test'})
Epoch 073
accuracy: {'epoch': 73, 'value': 0.9255200000000002} ({'split': 'train'})
cross_entropy: {'epoch': 73, 'value': 0.21795726135253915} ({'split': 'train'})
accuracy: {'epoch': 73, 'value': 0.8797999805212019} ({'split': 'test'})
cross_entropy: {'epoch': 73, 'value': 0.3995506811141967} ({'split': 'test'})
Epoch 074
accuracy: {'epoch': 74, 'value': 0.9273199999999998} ({'split': 'train'})
cross_entropy: {'epoch': 74, 'value': 0.21169374477386468} ({'split': 'train'})
accuracy: {'epoch': 74, 'value': 0.8773999798297883} ({'split': 'test'})
cross_entropy: {'epoch': 74, 'value': 0.41332923173904423} ({'split': 'test'})
Epoch 075
accuracy: {'epoch': 75, 'value': 0.9261000000000006} ({'split': 'train'})
cross_entropy: {'epoch': 75, 'value': 0.21616379260063176} ({'split': 'train'})
accuracy: {'epoch': 75, 'value': 0.8770999765396116} ({'split': 'test'})
cross_entropy: {'epoch': 75, 'value': 0.3860373742878437} ({'split': 'test'})
Epoch 076
accuracy: {'epoch': 76, 'value': 0.9265800000572202} ({'split': 'train'})
cross_entropy: {'epoch': 76, 'value': 0.2144849481773376} ({'split': 'train'})
accuracy: {'epoch': 76, 'value': 0.8695999807119368} ({'split': 'test'})
cross_entropy: {'epoch': 76, 'value': 0.4254786059260367} ({'split': 'test'})
Epoch 077
accuracy: {'epoch': 77, 'value': 0.9272999999809266} ({'split': 'train'})
cross_entropy: {'epoch': 77, 'value': 0.21110584869384774} ({'split': 'train'})
accuracy: {'epoch': 77, 'value': 0.8786999803781508} ({'split': 'test'})
cross_entropy: {'epoch': 77, 'value': 0.3978795543313029} ({'split': 'test'})
Epoch 078
accuracy: {'epoch': 78, 'value': 0.9272400000572205} ({'split': 'train'})
cross_entropy: {'epoch': 78, 'value': 0.21213211855411532} ({'split': 'train'})
accuracy: {'epoch': 78, 'value': 0.8787999808788297} ({'split': 'test'})
cross_entropy: {'epoch': 78, 'value': 0.4128488780558109} ({'split': 'test'})
Epoch 079
accuracy: {'epoch': 79, 'value': 0.9335600000190737} ({'split': 'train'})
cross_entropy: {'epoch': 79, 'value': 0.19787105350494374} ({'split': 'train'})
accuracy: {'epoch': 79, 'value': 0.8819999843835827} ({'split': 'test'})
cross_entropy: {'epoch': 79, 'value': 0.37644436731934533} ({'split': 'test'})
Epoch 080
accuracy: {'epoch': 80, 'value': 0.9287399999809268} ({'split': 'train'})
cross_entropy: {'epoch': 80, 'value': 0.20539086627960212} ({'split': 'train'})
accuracy: {'epoch': 80, 'value': 0.873199980854988} ({'split': 'test'})
cross_entropy: {'epoch': 80, 'value': 0.4237901705503462} ({'split': 'test'})
Epoch 081
accuracy: {'epoch': 81, 'value': 0.9271800000381467} ({'split': 'train'})
cross_entropy: {'epoch': 81, 'value': 0.2112831412124634} ({'split': 'train'})
accuracy: {'epoch': 81, 'value': 0.8767999804019927} ({'split': 'test'})
cross_entropy: {'epoch': 81, 'value': 0.4113958483934402} ({'split': 'test'})
Epoch 082
accuracy: {'epoch': 82, 'value': 0.9288600000572209} ({'split': 'train'})
cross_entropy: {'epoch': 82, 'value': 0.20505921844482422} ({'split': 'train'})
accuracy: {'epoch': 82, 'value': 0.8850999838113781} ({'split': 'test'})
cross_entropy: {'epoch': 82, 'value': 0.36169541046023346} ({'split': 'test'})
Epoch 083
accuracy: {'epoch': 83, 'value': 0.9312000000190739} ({'split': 'train'})
cross_entropy: {'epoch': 83, 'value': 0.19777194280624386} ({'split': 'train'})
accuracy: {'epoch': 83, 'value': 0.8771999818086624} ({'split': 'test'})
cross_entropy: {'epoch': 83, 'value': 0.42129021182656284} ({'split': 'test'})
Epoch 084
accuracy: {'epoch': 84, 'value': 0.9307600000381472} ({'split': 'train'})
cross_entropy: {'epoch': 84, 'value': 0.20191010182380673} ({'split': 'train'})
accuracy: {'epoch': 84, 'value': 0.8770999813079834} ({'split': 'test'})
cross_entropy: {'epoch': 84, 'value': 0.40945457085967046} ({'split': 'test'})
Epoch 085
accuracy: {'epoch': 85, 'value': 0.9292800000000004} ({'split': 'train'})
cross_entropy: {'epoch': 85, 'value': 0.20422712786674496} ({'split': 'train'})
accuracy: {'epoch': 85, 'value': 0.8790999776124954} ({'split': 'test'})
cross_entropy: {'epoch': 85, 'value': 0.4001350472867488} ({'split': 'test'})
Epoch 086
accuracy: {'epoch': 86, 'value': 0.933280000019073} ({'split': 'train'})
cross_entropy: {'epoch': 86, 'value': 0.19465104716300952} ({'split': 'train'})
accuracy: {'epoch': 86, 'value': 0.8736999779939649} ({'split': 'test'})
cross_entropy: {'epoch': 86, 'value': 0.41979868158698097} ({'split': 'test'})
Epoch 087
accuracy: {'epoch': 87, 'value': 0.9339999999999996} ({'split': 'train'})
cross_entropy: {'epoch': 87, 'value': 0.1929112122011184} ({'split': 'train'})
accuracy: {'epoch': 87, 'value': 0.862799980044365} ({'split': 'test'})
cross_entropy: {'epoch': 87, 'value': 0.4588582938909531} ({'split': 'test'})
Epoch 088
accuracy: {'epoch': 88, 'value': 0.9343000000572207} ({'split': 'train'})
cross_entropy: {'epoch': 88, 'value': 0.19504992688179015} ({'split': 'train'})
accuracy: {'epoch': 88, 'value': 0.8802999824285506} ({'split': 'test'})
cross_entropy: {'epoch': 88, 'value': 0.4102065046131611} ({'split': 'test'})
Epoch 089
accuracy: {'epoch': 89, 'value': 0.9344399999809266} ({'split': 'train'})
cross_entropy: {'epoch': 89, 'value': 0.1921707989215851} ({'split': 'train'})
accuracy: {'epoch': 89, 'value': 0.882299980521202} ({'split': 'test'})
cross_entropy: {'epoch': 89, 'value': 0.40448902323842045} ({'split': 'test'})
Epoch 090
accuracy: {'epoch': 90, 'value': 0.9325800000381465} ({'split': 'train'})
cross_entropy: {'epoch': 90, 'value': 0.1949385859966279} ({'split': 'train'})
accuracy: {'epoch': 90, 'value': 0.8811999803781513} ({'split': 'test'})
cross_entropy: {'epoch': 90, 'value': 0.38381572872400266} ({'split': 'test'})
Epoch 091
accuracy: {'epoch': 91, 'value': 0.9321999999809266} ({'split': 'train'})
cross_entropy: {'epoch': 91, 'value': 0.19755590551614757} ({'split': 'train'})
accuracy: {'epoch': 91, 'value': 0.8683999794721605} ({'split': 'test'})
cross_entropy: {'epoch': 91, 'value': 0.45852750420570365} ({'split': 'test'})
Epoch 092
accuracy: {'epoch': 92, 'value': 0.9340399999809261} ({'split': 'train'})
cross_entropy: {'epoch': 92, 'value': 0.19040917233467103} ({'split': 'train'})
accuracy: {'epoch': 92, 'value': 0.8829999810457231} ({'split': 'test'})
cross_entropy: {'epoch': 92, 'value': 0.40732666134834294} ({'split': 'test'})
Epoch 093
accuracy: {'epoch': 93, 'value': 0.9346200000381468} ({'split': 'train'})
cross_entropy: {'epoch': 93, 'value': 0.19154794453620916} ({'split': 'train'})
accuracy: {'epoch': 93, 'value': 0.8859999787807468} ({'split': 'test'})
cross_entropy: {'epoch': 93, 'value': 0.3903720153868198} ({'split': 'test'})
Epoch 094
accuracy: {'epoch': 94, 'value': 0.936380000038147} ({'split': 'train'})
cross_entropy: {'epoch': 94, 'value': 0.18637991963386538} ({'split': 'train'})
accuracy: {'epoch': 94, 'value': 0.885099983215332} ({'split': 'test'})
cross_entropy: {'epoch': 94, 'value': 0.40454533189535147} ({'split': 'test'})
Epoch 095
accuracy: {'epoch': 95, 'value': 0.9375000000572205} ({'split': 'train'})
cross_entropy: {'epoch': 95, 'value': 0.18190285983800902} ({'split': 'train'})
accuracy: {'epoch': 95, 'value': 0.8785999786853791} ({'split': 'test'})
cross_entropy: {'epoch': 95, 'value': 0.3868509672582149} ({'split': 'test'})
Epoch 096
accuracy: {'epoch': 96, 'value': 0.935140000038147} ({'split': 'train'})
cross_entropy: {'epoch': 96, 'value': 0.18677831646442408} ({'split': 'train'})
accuracy: {'epoch': 96, 'value': 0.888299981355667} ({'split': 'test'})
cross_entropy: {'epoch': 96, 'value': 0.38039164200425146} ({'split': 'test'})
We have a new best! with accuracy::0.888299981355667 and at epoch::96, let's save it!
Epoch 097
accuracy: {'epoch': 97, 'value': 0.936600000038147} ({'split': 'train'})
cross_entropy: {'epoch': 97, 'value': 0.18178995005607604} ({'split': 'train'})
accuracy: {'epoch': 97, 'value': 0.880199979543686} ({'split': 'test'})
cross_entropy: {'epoch': 97, 'value': 0.386707676500082} ({'split': 'test'})
Epoch 098
accuracy: {'epoch': 98, 'value': 0.9361200000190736} ({'split': 'train'})
cross_entropy: {'epoch': 98, 'value': 0.18419981477737432} ({'split': 'train'})
accuracy: {'epoch': 98, 'value': 0.8733999788761139} ({'split': 'test'})
cross_entropy: {'epoch': 98, 'value': 0.4152508094906807} ({'split': 'test'})
Epoch 099
accuracy: {'epoch': 99, 'value': 0.9352400000190737} ({'split': 'train'})
cross_entropy: {'epoch': 99, 'value': 0.18892270435333253} ({'split': 'train'})
accuracy: {'epoch': 99, 'value': 0.8751999801397322} ({'split': 'test'})
cross_entropy: {'epoch': 99, 'value': 0.4204527084529399} ({'split': 'test'})
Epoch 100
accuracy: {'epoch': 100, 'value': 0.9379599999999999} ({'split': 'train'})
cross_entropy: {'epoch': 100, 'value': 0.1830107199287415} ({'split': 'train'})
accuracy: {'epoch': 100, 'value': 0.8871999847888946} ({'split': 'test'})
cross_entropy: {'epoch': 100, 'value': 0.3807259200513363} ({'split': 'test'})
Epoch 101
accuracy: {'epoch': 101, 'value': 0.93558} ({'split': 'train'})
cross_entropy: {'epoch': 101, 'value': 0.18709433665275582} ({'split': 'train'})
accuracy: {'epoch': 101, 'value': 0.8779999792575838} ({'split': 'test'})
cross_entropy: {'epoch': 101, 'value': 0.42095156192779554} ({'split': 'test'})
Epoch 102
accuracy: {'epoch': 102, 'value': 0.938139999980926} ({'split': 'train'})
cross_entropy: {'epoch': 102, 'value': 0.180809350733757} ({'split': 'train'})
accuracy: {'epoch': 102, 'value': 0.8712999790906906} ({'split': 'test'})
cross_entropy: {'epoch': 102, 'value': 0.46050630062818526} ({'split': 'test'})
Epoch 103
accuracy: {'epoch': 103, 'value': 0.9380600000572207} ({'split': 'train'})
cross_entropy: {'epoch': 103, 'value': 0.17748527243614193} ({'split': 'train'})
accuracy: {'epoch': 103, 'value': 0.8830999809503551} ({'split': 'test'})
cross_entropy: {'epoch': 103, 'value': 0.4103117538988589} ({'split': 'test'})
Epoch 104
accuracy: {'epoch': 104, 'value': 0.9377999999809267} ({'split': 'train'})
cross_entropy: {'epoch': 104, 'value': 0.18221955670833584} ({'split': 'train'})
accuracy: {'epoch': 104, 'value': 0.8823999810218809} ({'split': 'test'})
cross_entropy: {'epoch': 104, 'value': 0.39339034944772727} ({'split': 'test'})
Epoch 105
accuracy: {'epoch': 105, 'value': 0.9394599999809267} ({'split': 'train'})
cross_entropy: {'epoch': 105, 'value': 0.17441266030788416} ({'split': 'train'})
accuracy: {'epoch': 105, 'value': 0.8898999828100204} ({'split': 'test'})
cross_entropy: {'epoch': 105, 'value': 0.38922764390707} ({'split': 'test'})
We have a new best! with accuracy::0.8898999828100204 and at epoch::105, let's save it!
Epoch 106
accuracy: {'epoch': 106, 'value': 0.9380600000190733} ({'split': 'train'})
cross_entropy: {'epoch': 106, 'value': 0.17642881713390346} ({'split': 'train'})
accuracy: {'epoch': 106, 'value': 0.8851999813318249} ({'split': 'test'})
cross_entropy: {'epoch': 106, 'value': 0.3816782385110855} ({'split': 'test'})
Epoch 107
accuracy: {'epoch': 107, 'value': 0.9372} ({'split': 'train'})
cross_entropy: {'epoch': 107, 'value': 0.17890222095012662} ({'split': 'train'})
accuracy: {'epoch': 107, 'value': 0.8834999835491177} ({'split': 'test'})
cross_entropy: {'epoch': 107, 'value': 0.39526293039321914} ({'split': 'test'})
Epoch 108
accuracy: {'epoch': 108, 'value': 0.9394799999999998} ({'split': 'train'})
cross_entropy: {'epoch': 108, 'value': 0.17826213375091554} ({'split': 'train'})
accuracy: {'epoch': 108, 'value': 0.8851999801397326} ({'split': 'test'})
cross_entropy: {'epoch': 108, 'value': 0.4051378312706947} ({'split': 'test'})
Epoch 109
accuracy: {'epoch': 109, 'value': 0.9397400000572204} ({'split': 'train'})
cross_entropy: {'epoch': 109, 'value': 0.17627318148612978} ({'split': 'train'})
accuracy: {'epoch': 109, 'value': 0.8831999802589415} ({'split': 'test'})
cross_entropy: {'epoch': 109, 'value': 0.40323496893048283} ({'split': 'test'})
Epoch 110
accuracy: {'epoch': 110, 'value': 0.9416399999809263} ({'split': 'train'})
cross_entropy: {'epoch': 110, 'value': 0.16838365761756893} ({'split': 'train'})
accuracy: {'epoch': 110, 'value': 0.8793999838829041} ({'split': 'test'})
cross_entropy: {'epoch': 110, 'value': 0.41221259459853155} ({'split': 'test'})
Epoch 111
accuracy: {'epoch': 111, 'value': 0.9405200000572207} ({'split': 'train'})
cross_entropy: {'epoch': 111, 'value': 0.1728247666358947} ({'split': 'train'})
accuracy: {'epoch': 111, 'value': 0.8837999790906904} ({'split': 'test'})
cross_entropy: {'epoch': 111, 'value': 0.39189670935273174} ({'split': 'test'})
Epoch 112
accuracy: {'epoch': 112, 'value': 0.9402599999809269} ({'split': 'train'})
cross_entropy: {'epoch': 112, 'value': 0.1734306243944167} ({'split': 'train'})
accuracy: {'epoch': 112, 'value': 0.86119998216629} ({'split': 'test'})
cross_entropy: {'epoch': 112, 'value': 0.4812045809626579} ({'split': 'test'})
Epoch 113
accuracy: {'epoch': 113, 'value': 0.9390199999809267} ({'split': 'train'})
cross_entropy: {'epoch': 113, 'value': 0.17683995101928718} ({'split': 'train'})
accuracy: {'epoch': 113, 'value': 0.8814999824762344} ({'split': 'test'})
cross_entropy: {'epoch': 113, 'value': 0.38610553532838826} ({'split': 'test'})
Epoch 114
accuracy: {'epoch': 114, 'value': 0.9411000000190735} ({'split': 'train'})
cross_entropy: {'epoch': 114, 'value': 0.17259042754888534} ({'split': 'train'})
accuracy: {'epoch': 114, 'value': 0.8880999821424483} ({'split': 'test'})
cross_entropy: {'epoch': 114, 'value': 0.40876357287168497} ({'split': 'test'})
Epoch 115
accuracy: {'epoch': 115, 'value': 0.9432200000190735} ({'split': 'train'})
cross_entropy: {'epoch': 115, 'value': 0.16424573184490204} ({'split': 'train'})
accuracy: {'epoch': 115, 'value': 0.8844999808073043} ({'split': 'test'})
cross_entropy: {'epoch': 115, 'value': 0.4166028916090728} ({'split': 'test'})
Epoch 116
accuracy: {'epoch': 116, 'value': 0.9402000000572206} ({'split': 'train'})
cross_entropy: {'epoch': 116, 'value': 0.17548467190742498} ({'split': 'train'})
accuracy: {'epoch': 116, 'value': 0.8773999792337418} ({'split': 'test'})
cross_entropy: {'epoch': 116, 'value': 0.41291552603244774} ({'split': 'test'})
Epoch 117
accuracy: {'epoch': 117, 'value': 0.9411400000572204} ({'split': 'train'})
cross_entropy: {'epoch': 117, 'value': 0.1701409453630448} ({'split': 'train'})
accuracy: {'epoch': 117, 'value': 0.8901999831199648} ({'split': 'test'})
cross_entropy: {'epoch': 117, 'value': 0.38067210495471965} ({'split': 'test'})
We have a new best! with accuracy::0.8901999831199648 and at epoch::117, let's save it!
Epoch 118
accuracy: {'epoch': 118, 'value': 0.9433999999809264} ({'split': 'train'})
cross_entropy: {'epoch': 118, 'value': 0.16761925389289853} ({'split': 'train'})
accuracy: {'epoch': 118, 'value': 0.8720999813079834} ({'split': 'test'})
cross_entropy: {'epoch': 118, 'value': 0.4212697274982929} ({'split': 'test'})
Epoch 119
accuracy: {'epoch': 119, 'value': 0.9408400000000003} ({'split': 'train'})
cross_entropy: {'epoch': 119, 'value': 0.16931664245128636} ({'split': 'train'})
accuracy: {'epoch': 119, 'value': 0.8797999811172484} ({'split': 'test'})
cross_entropy: {'epoch': 119, 'value': 0.4055077768862248} ({'split': 'test'})
Epoch 120
accuracy: {'epoch': 120, 'value': 0.9419800000381467} ({'split': 'train'})
cross_entropy: {'epoch': 120, 'value': 0.16900047451019284} ({'split': 'train'})
accuracy: {'epoch': 120, 'value': 0.8902999812364578} ({'split': 'test'})
cross_entropy: {'epoch': 120, 'value': 0.3717101669311522} ({'split': 'test'})
We have a new best! with accuracy::0.8902999812364578 and at epoch::120, let's save it!
Epoch 121
accuracy: {'epoch': 121, 'value': 0.9423000000572207} ({'split': 'train'})
cross_entropy: {'epoch': 121, 'value': 0.16650479157447812} ({'split': 'train'})
accuracy: {'epoch': 121, 'value': 0.8790999829769135} ({'split': 'test'})
cross_entropy: {'epoch': 121, 'value': 0.41699282854795466} ({'split': 'test'})
Epoch 122
accuracy: {'epoch': 122, 'value': 0.9425599999809269} ({'split': 'train'})
cross_entropy: {'epoch': 122, 'value': 0.1686890008878708} ({'split': 'train'})
accuracy: {'epoch': 122, 'value': 0.8803999817371367} ({'split': 'test'})
cross_entropy: {'epoch': 122, 'value': 0.4160316245257853} ({'split': 'test'})
Epoch 123
accuracy: {'epoch': 123, 'value': 0.9422000000572203} ({'split': 'train'})
cross_entropy: {'epoch': 123, 'value': 0.167978560552597} ({'split': 'train'})
accuracy: {'epoch': 123, 'value': 0.8858999824523924} ({'split': 'test'})
cross_entropy: {'epoch': 123, 'value': 0.3950605764985084} ({'split': 'test'})
Epoch 124
accuracy: {'epoch': 124, 'value': 0.9449599999999995} ({'split': 'train'})
cross_entropy: {'epoch': 124, 'value': 0.16318678061962127} ({'split': 'train'})
accuracy: {'epoch': 124, 'value': 0.8858999812602996} ({'split': 'test'})
cross_entropy: {'epoch': 124, 'value': 0.3881891600787641} ({'split': 'test'})
Epoch 125
accuracy: {'epoch': 125, 'value': 0.9450800000190732} ({'split': 'train'})
cross_entropy: {'epoch': 125, 'value': 0.16166780070781714} ({'split': 'train'})
accuracy: {'epoch': 125, 'value': 0.8849999803304672} ({'split': 'test'})
cross_entropy: {'epoch': 125, 'value': 0.4082673966884612} ({'split': 'test'})
Epoch 126
accuracy: {'epoch': 126, 'value': 0.9477999999999998} ({'split': 'train'})
cross_entropy: {'epoch': 126, 'value': 0.15255912529945376} ({'split': 'train'})
accuracy: {'epoch': 126, 'value': 0.8905999809503554} ({'split': 'test'})
cross_entropy: {'epoch': 126, 'value': 0.3926684349775314} ({'split': 'test'})
We have a new best! with accuracy::0.8905999809503554 and at epoch::126, let's save it!
Epoch 127
accuracy: {'epoch': 127, 'value': 0.9460400000190731} ({'split': 'train'})
cross_entropy: {'epoch': 127, 'value': 0.15768458848953248} ({'split': 'train'})
accuracy: {'epoch': 127, 'value': 0.8767999786138537} ({'split': 'test'})
cross_entropy: {'epoch': 127, 'value': 0.4387639921903611} ({'split': 'test'})
Epoch 128
accuracy: {'epoch': 128, 'value': 0.944459999980926} ({'split': 'train'})
cross_entropy: {'epoch': 128, 'value': 0.16301171878814702} ({'split': 'train'})
accuracy: {'epoch': 128, 'value': 0.8881999796628951} ({'split': 'test'})
cross_entropy: {'epoch': 128, 'value': 0.40418236739933494} ({'split': 'test'})
Epoch 129
accuracy: {'epoch': 129, 'value': 0.9420400000572203} ({'split': 'train'})
cross_entropy: {'epoch': 129, 'value': 0.16682930919647215} ({'split': 'train'})
accuracy: {'epoch': 129, 'value': 0.8802999806404117} ({'split': 'test'})
cross_entropy: {'epoch': 129, 'value': 0.42608540371060377} ({'split': 'test'})
Epoch 130
accuracy: {'epoch': 130, 'value': 0.9438600000381465} ({'split': 'train'})
cross_entropy: {'epoch': 130, 'value': 0.15862935840129855} ({'split': 'train'})
accuracy: {'epoch': 130, 'value': 0.8823999810218811} ({'split': 'test'})
cross_entropy: {'epoch': 130, 'value': 0.4128377233445645} ({'split': 'test'})
Epoch 131
accuracy: {'epoch': 131, 'value': 0.9441400000000003} ({'split': 'train'})
cross_entropy: {'epoch': 131, 'value': 0.16129215923786158} ({'split': 'train'})
accuracy: {'epoch': 131, 'value': 0.8864999818801882} ({'split': 'test'})
cross_entropy: {'epoch': 131, 'value': 0.38570084005594246} ({'split': 'test'})
Epoch 132
accuracy: {'epoch': 132, 'value': 0.9456399999999999} ({'split': 'train'})
cross_entropy: {'epoch': 132, 'value': 0.15846340088844302} ({'split': 'train'})
accuracy: {'epoch': 132, 'value': 0.880399980545044} ({'split': 'test'})
cross_entropy: {'epoch': 132, 'value': 0.40860368445515627} ({'split': 'test'})
Epoch 133
accuracy: {'epoch': 133, 'value': 0.9403200000000004} ({'split': 'train'})
cross_entropy: {'epoch': 133, 'value': 0.17007965386390697} ({'split': 'train'})
accuracy: {'epoch': 133, 'value': 0.8846999794244765} ({'split': 'test'})
cross_entropy: {'epoch': 133, 'value': 0.39552626237273225} ({'split': 'test'})
Epoch 134
accuracy: {'epoch': 134, 'value': 0.9459800000381469} ({'split': 'train'})
cross_entropy: {'epoch': 134, 'value': 0.15671383025646207} ({'split': 'train'})
accuracy: {'epoch': 134, 'value': 0.8932999795675278} ({'split': 'test'})
cross_entropy: {'epoch': 134, 'value': 0.3625370518863201} ({'split': 'test'})
We have a new best! with accuracy::0.8932999795675278 and at epoch::134, let's save it!
Epoch 135
accuracy: {'epoch': 135, 'value': 0.9481199999809264} ({'split': 'train'})
cross_entropy: {'epoch': 135, 'value': 0.15086271389007583} ({'split': 'train'})
accuracy: {'epoch': 135, 'value': 0.8849999809265136} ({'split': 'test'})
cross_entropy: {'epoch': 135, 'value': 0.38350066378712655} ({'split': 'test'})
Epoch 136
accuracy: {'epoch': 136, 'value': 0.9471999999809265} ({'split': 'train'})
cross_entropy: {'epoch': 136, 'value': 0.15447326891422275} ({'split': 'train'})
accuracy: {'epoch': 136, 'value': 0.8867999804019929} ({'split': 'test'})
cross_entropy: {'epoch': 136, 'value': 0.4039117200672628} ({'split': 'test'})
Epoch 137
accuracy: {'epoch': 137, 'value': 0.9488400000381465} ({'split': 'train'})
cross_entropy: {'epoch': 137, 'value': 0.14929801095008854} ({'split': 'train'})
accuracy: {'epoch': 137, 'value': 0.8823999804258348} ({'split': 'test'})
cross_entropy: {'epoch': 137, 'value': 0.40639702796936034} ({'split': 'test'})
Epoch 138
accuracy: {'epoch': 138, 'value': 0.9428000000572208} ({'split': 'train'})
cross_entropy: {'epoch': 138, 'value': 0.16361065204143505} ({'split': 'train'})
accuracy: {'epoch': 138, 'value': 0.8753999811410904} ({'split': 'test'})
cross_entropy: {'epoch': 138, 'value': 0.40690841674804695} ({'split': 'test'})
Epoch 139
accuracy: {'epoch': 139, 'value': 0.9472199999809265} ({'split': 'train'})
cross_entropy: {'epoch': 139, 'value': 0.15209599665641788} ({'split': 'train'})
accuracy: {'epoch': 139, 'value': 0.8796999830007548} ({'split': 'test'})
cross_entropy: {'epoch': 139, 'value': 0.40828263625502575} ({'split': 'test'})
Epoch 140
accuracy: {'epoch': 140, 'value': 0.9470999999809263} ({'split': 'train'})
cross_entropy: {'epoch': 140, 'value': 0.15253988617897038} ({'split': 'train'})
accuracy: {'epoch': 140, 'value': 0.8822999805212023} ({'split': 'test'})
cross_entropy: {'epoch': 140, 'value': 0.4079851725697518} ({'split': 'test'})
Epoch 141
accuracy: {'epoch': 141, 'value': 0.9447599999999997} ({'split': 'train'})
cross_entropy: {'epoch': 141, 'value': 0.1604864826250077} ({'split': 'train'})
accuracy: {'epoch': 141, 'value': 0.8857999795675278} ({'split': 'test'})
cross_entropy: {'epoch': 141, 'value': 0.39307862795889364} ({'split': 'test'})
Epoch 142
accuracy: {'epoch': 142, 'value': 0.9455000000572202} ({'split': 'train'})
cross_entropy: {'epoch': 142, 'value': 0.15975543690204624} ({'split': 'train'})
accuracy: {'epoch': 142, 'value': 0.8816999793052673} ({'split': 'test'})
cross_entropy: {'epoch': 142, 'value': 0.4463972705602644} ({'split': 'test'})
Epoch 143
accuracy: {'epoch': 143, 'value': 0.9411200000572202} ({'split': 'train'})
cross_entropy: {'epoch': 143, 'value': 0.17090427999496463} ({'split': 'train'})
accuracy: {'epoch': 143, 'value': 0.8795999807119368} ({'split': 'test'})
cross_entropy: {'epoch': 143, 'value': 0.4422831756621599} ({'split': 'test'})
Epoch 144
accuracy: {'epoch': 144, 'value': 0.944} ({'split': 'train'})
cross_entropy: {'epoch': 144, 'value': 0.16372511713027962} ({'split': 'train'})
accuracy: {'epoch': 144, 'value': 0.8836999815702438} ({'split': 'test'})
cross_entropy: {'epoch': 144, 'value': 0.41178371265530594} ({'split': 'test'})
Epoch 145
accuracy: {'epoch': 145, 'value': 0.9471800000190734} ({'split': 'train'})
cross_entropy: {'epoch': 145, 'value': 0.15196017232656478} ({'split': 'train'})
accuracy: {'epoch': 145, 'value': 0.8760999840497972} ({'split': 'test'})
cross_entropy: {'epoch': 145, 'value': 0.4467598485946656} ({'split': 'test'})
Epoch 146
accuracy: {'epoch': 146, 'value': 0.9451400000572205} ({'split': 'train'})
cross_entropy: {'epoch': 146, 'value': 0.1585471630454064} ({'split': 'train'})
accuracy: {'epoch': 146, 'value': 0.8807999807596206} ({'split': 'test'})
cross_entropy: {'epoch': 146, 'value': 0.4524008053541182} ({'split': 'test'})
Epoch 147
accuracy: {'epoch': 147, 'value': 0.9492000000572204} ({'split': 'train'})
cross_entropy: {'epoch': 147, 'value': 0.14876676932334906} ({'split': 'train'})
accuracy: {'epoch': 147, 'value': 0.882599982023239} ({'split': 'test'})
cross_entropy: {'epoch': 147, 'value': 0.45777559094130993} ({'split': 'test'})
Epoch 148
accuracy: {'epoch': 148, 'value': 0.9460799999999993} ({'split': 'train'})
cross_entropy: {'epoch': 148, 'value': 0.1549251599645613} ({'split': 'train'})
accuracy: {'epoch': 148, 'value': 0.8861999791860586} ({'split': 'test'})
cross_entropy: {'epoch': 148, 'value': 0.37504481390118577} ({'split': 'test'})
Epoch 149
accuracy: {'epoch': 149, 'value': 0.9465200000190731} ({'split': 'train'})
cross_entropy: {'epoch': 149, 'value': 0.1561946313142778} ({'split': 'train'})
accuracy: {'epoch': 149, 'value': 0.8889999812841414} ({'split': 'test'})
cross_entropy: {'epoch': 149, 'value': 0.3746819911897183} ({'split': 'test'})
Epoch 150
accuracy: {'epoch': 150, 'value': 0.9731000000000001} ({'split': 'train'})
cross_entropy: {'epoch': 150, 'value': 0.07765819105148312} ({'split': 'train'})
accuracy: {'epoch': 150, 'value': 0.9099999839067459} ({'split': 'test'})
cross_entropy: {'epoch': 150, 'value': 0.338507628366351} ({'split': 'test'})
We have a new best! with accuracy::0.9099999839067459 and at epoch::150, let's save it!
Epoch 151
accuracy: {'epoch': 151, 'value': 0.981780000038147} ({'split': 'train'})
cross_entropy: {'epoch': 151, 'value': 0.05391014783859253} ({'split': 'train'})
accuracy: {'epoch': 151, 'value': 0.9129999792575836} ({'split': 'test'})
cross_entropy: {'epoch': 151, 'value': 0.34311335876584054} ({'split': 'test'})
We have a new best! with accuracy::0.9129999792575836 and at epoch::151, let's save it!
Epoch 152
accuracy: {'epoch': 152, 'value': 0.9831400000190734} ({'split': 'train'})
cross_entropy: {'epoch': 152, 'value': 0.04789982226371763} ({'split': 'train'})
accuracy: {'epoch': 152, 'value': 0.9134999811649325} ({'split': 'test'})
cross_entropy: {'epoch': 152, 'value': 0.33913200087845324} ({'split': 'test'})
We have a new best! with accuracy::0.9134999811649325 and at epoch::152, let's save it!
Epoch 153
accuracy: {'epoch': 153, 'value': 0.9865600000000001} ({'split': 'train'})
cross_entropy: {'epoch': 153, 'value': 0.03982269165873525} ({'split': 'train'})
accuracy: {'epoch': 153, 'value': 0.9163999825716015} ({'split': 'test'})
cross_entropy: {'epoch': 153, 'value': 0.34470922209322447} ({'split': 'test'})
We have a new best! with accuracy::0.9163999825716015 and at epoch::153, let's save it!
Epoch 154
accuracy: {'epoch': 154, 'value': 0.9877800000572208} ({'split': 'train'})
cross_entropy: {'epoch': 154, 'value': 0.035600540351867674} ({'split': 'train'})
accuracy: {'epoch': 154, 'value': 0.915599982142448} ({'split': 'test'})
cross_entropy: {'epoch': 154, 'value': 0.35810096770524963} ({'split': 'test'})
Epoch 155
accuracy: {'epoch': 155, 'value': 0.98828} ({'split': 'train'})
cross_entropy: {'epoch': 155, 'value': 0.032437718363106265} ({'split': 'train'})
accuracy: {'epoch': 155, 'value': 0.9161999785900118} ({'split': 'test'})
cross_entropy: {'epoch': 155, 'value': 0.3608296128362417} ({'split': 'test'})
Epoch 156
accuracy: {'epoch': 156, 'value': 0.9888200000190736} ({'split': 'train'})
cross_entropy: {'epoch': 156, 'value': 0.03079523785233499} ({'split': 'train'})
accuracy: {'epoch': 156, 'value': 0.9170999819040295} ({'split': 'test'})
cross_entropy: {'epoch': 156, 'value': 0.3608165395259857} ({'split': 'test'})
We have a new best! with accuracy::0.9170999819040295 and at epoch::156, let's save it!
Epoch 157
accuracy: {'epoch': 157, 'value': 0.9904000000190732} ({'split': 'train'})
cross_entropy: {'epoch': 157, 'value': 0.028683347130119795} ({'split': 'train'})
accuracy: {'epoch': 157, 'value': 0.9172999775409695} ({'split': 'test'})
cross_entropy: {'epoch': 157, 'value': 0.3699779179692268} ({'split': 'test'})
We have a new best! with accuracy::0.9172999775409695 and at epoch::157, let's save it!
Epoch 158
accuracy: {'epoch': 158, 'value': 0.9909000000190729} ({'split': 'train'})
cross_entropy: {'epoch': 158, 'value': 0.027743981922864907} ({'split': 'train'})
accuracy: {'epoch': 158, 'value': 0.9187999850511552} ({'split': 'test'})
cross_entropy: {'epoch': 158, 'value': 0.37651901781559} ({'split': 'test'})
We have a new best! with accuracy::0.9187999850511552 and at epoch::158, let's save it!
Epoch 159
accuracy: {'epoch': 159, 'value': 0.9913200000190734} ({'split': 'train'})
cross_entropy: {'epoch': 159, 'value': 0.026078293681144706} ({'split': 'train'})
accuracy: {'epoch': 159, 'value': 0.9181999832391738} ({'split': 'test'})
cross_entropy: {'epoch': 159, 'value': 0.3672443063557148} ({'split': 'test'})
Epoch 160
accuracy: {'epoch': 160, 'value': 0.9921199999999996} ({'split': 'train'})
cross_entropy: {'epoch': 160, 'value': 0.023889769037365918} ({'split': 'train'})
accuracy: {'epoch': 160, 'value': 0.9195999836921693} ({'split': 'test'})
cross_entropy: {'epoch': 160, 'value': 0.3719285433739423} ({'split': 'test'})
We have a new best! with accuracy::0.9195999836921693 and at epoch::160, let's save it!
Epoch 161
accuracy: {'epoch': 161, 'value': 0.9922400000190739} ({'split': 'train'})
cross_entropy: {'epoch': 161, 'value': 0.02300971996843814} ({'split': 'train'})
accuracy: {'epoch': 161, 'value': 0.9185999822616573} ({'split': 'test'})
cross_entropy: {'epoch': 161, 'value': 0.3881238044053314} ({'split': 'test'})
Epoch 162
accuracy: {'epoch': 162, 'value': 0.9925399999999998} ({'split': 'train'})
cross_entropy: {'epoch': 162, 'value': 0.021218428289592275} ({'split': 'train'})
accuracy: {'epoch': 162, 'value': 0.9178999811410903} ({'split': 'test'})
cross_entropy: {'epoch': 162, 'value': 0.3884762905538083} ({'split': 'test'})
Epoch 163
accuracy: {'epoch': 163, 'value': 0.992680000038147} ({'split': 'train'})
cross_entropy: {'epoch': 163, 'value': 0.02099129668593406} ({'split': 'train'})
accuracy: {'epoch': 163, 'value': 0.919599983692169} ({'split': 'test'})
cross_entropy: {'epoch': 163, 'value': 0.3890420855581759} ({'split': 'test'})
Epoch 164
accuracy: {'epoch': 164, 'value': 0.9938400000190732} ({'split': 'train'})
cross_entropy: {'epoch': 164, 'value': 0.01850030989646912} ({'split': 'train'})
accuracy: {'epoch': 164, 'value': 0.9201999837160109} ({'split': 'test'})
cross_entropy: {'epoch': 164, 'value': 0.39082142911851403} ({'split': 'test'})
We have a new best! with accuracy::0.9201999837160109 and at epoch::164, let's save it!
Epoch 165
accuracy: {'epoch': 165, 'value': 0.99352} ({'split': 'train'})
cross_entropy: {'epoch': 165, 'value': 0.019160627620518195} ({'split': 'train'})
accuracy: {'epoch': 165, 'value': 0.9199999827146531} ({'split': 'test'})
cross_entropy: {'epoch': 165, 'value': 0.40692882269620884} ({'split': 'test'})
Epoch 166
accuracy: {'epoch': 166, 'value': 0.9940599999999998} ({'split': 'train'})
cross_entropy: {'epoch': 166, 'value': 0.017534308176934722} ({'split': 'train'})
accuracy: {'epoch': 166, 'value': 0.9193999809026716} ({'split': 'test'})
cross_entropy: {'epoch': 166, 'value': 0.39892969086766245} ({'split': 'test'})
Epoch 167
accuracy: {'epoch': 167, 'value': 0.9944000000000002} ({'split': 'train'})
cross_entropy: {'epoch': 167, 'value': 0.014943389147967102} ({'split': 'train'})
accuracy: {'epoch': 167, 'value': 0.9211999815702439} ({'split': 'test'})
cross_entropy: {'epoch': 167, 'value': 0.4060900348424911} ({'split': 'test'})
We have a new best! with accuracy::0.9211999815702439 and at epoch::167, let's save it!
Epoch 168
accuracy: {'epoch': 168, 'value': 0.9949600000000001} ({'split': 'train'})
cross_entropy: {'epoch': 168, 'value': 0.01620234587907791} ({'split': 'train'})
accuracy: {'epoch': 168, 'value': 0.9178999811410904} ({'split': 'test'})
cross_entropy: {'epoch': 168, 'value': 0.40700262591242803} ({'split': 'test'})
Epoch 169
accuracy: {'epoch': 169, 'value': 0.9959399999999997} ({'split': 'train'})
cross_entropy: {'epoch': 169, 'value': 0.01314456614779308} ({'split': 'train'})
accuracy: {'epoch': 169, 'value': 0.9191999822854997} ({'split': 'test'})
cross_entropy: {'epoch': 169, 'value': 0.4156139022111893} ({'split': 'test'})
Epoch 170
accuracy: {'epoch': 170, 'value': 0.9952800000000004} ({'split': 'train'})
cross_entropy: {'epoch': 170, 'value': 0.014505342994555834} ({'split': 'train'})
accuracy: {'epoch': 170, 'value': 0.9193999785184859} ({'split': 'test'})
cross_entropy: {'epoch': 170, 'value': 0.4050755395740269} ({'split': 'test'})
Epoch 171
accuracy: {'epoch': 171, 'value': 0.9948999999999999} ({'split': 'train'})
cross_entropy: {'epoch': 171, 'value': 0.014748144977241754} ({'split': 'train'})
accuracy: {'epoch': 171, 'value': 0.9192999821901325} ({'split': 'test'})
cross_entropy: {'epoch': 171, 'value': 0.4138101379573345} ({'split': 'test'})
Epoch 172
accuracy: {'epoch': 172, 'value': 0.9951600000190731} ({'split': 'train'})
cross_entropy: {'epoch': 172, 'value': 0.01367502376377583} ({'split': 'train'})
accuracy: {'epoch': 172, 'value': 0.9193999814987186} ({'split': 'test'})
cross_entropy: {'epoch': 172, 'value': 0.41887996785342707} ({'split': 'test'})
Epoch 173
accuracy: {'epoch': 173, 'value': 0.9956200000000004} ({'split': 'train'})
cross_entropy: {'epoch': 173, 'value': 0.012941892850808797} ({'split': 'train'})
accuracy: {'epoch': 173, 'value': 0.9195999819040299} ({'split': 'test'})
cross_entropy: {'epoch': 173, 'value': 0.4151314989477394} ({'split': 'test'})
Epoch 174
accuracy: {'epoch': 174, 'value': 0.9960800000190733} ({'split': 'train'})
cross_entropy: {'epoch': 174, 'value': 0.012203684824705123} ({'split': 'train'})
accuracy: {'epoch': 174, 'value': 0.9205999833345413} ({'split': 'test'})
cross_entropy: {'epoch': 174, 'value': 0.41263135060668} ({'split': 'test'})
Epoch 175
accuracy: {'epoch': 175, 'value': 0.9958199999999998} ({'split': 'train'})
cross_entropy: {'epoch': 175, 'value': 0.013102064569741483} ({'split': 'train'})
accuracy: {'epoch': 175, 'value': 0.9212999820709229} ({'split': 'test'})
cross_entropy: {'epoch': 175, 'value': 0.42756896100938324} ({'split': 'test'})
We have a new best! with accuracy::0.9212999820709229 and at epoch::175, let's save it!
Epoch 176
accuracy: {'epoch': 176, 'value': 0.9968400000190736} ({'split': 'train'})
cross_entropy: {'epoch': 176, 'value': 0.010676427337825298} ({'split': 'train'})
accuracy: {'epoch': 176, 'value': 0.9203999835252763} ({'split': 'test'})
cross_entropy: {'epoch': 176, 'value': 0.42391815409064293} ({'split': 'test'})
Epoch 177
accuracy: {'epoch': 177, 'value': 0.9962199999999999} ({'split': 'train'})
cross_entropy: {'epoch': 177, 'value': 0.011973548545688389} ({'split': 'train'})
accuracy: {'epoch': 177, 'value': 0.9208999824523928} ({'split': 'test'})
cross_entropy: {'epoch': 177, 'value': 0.4287617444992065} ({'split': 'test'})
Epoch 178
accuracy: {'epoch': 178, 'value': 0.9962399999999996} ({'split': 'train'})
cross_entropy: {'epoch': 178, 'value': 0.010525770917367196} ({'split': 'train'})
accuracy: {'epoch': 178, 'value': 0.9200999814271928} ({'split': 'test'})
cross_entropy: {'epoch': 178, 'value': 0.43836249858140947} ({'split': 'test'})
Epoch 179
accuracy: {'epoch': 179, 'value': 0.9967} ({'split': 'train'})
cross_entropy: {'epoch': 179, 'value': 0.01046408515390009} ({'split': 'train'})
accuracy: {'epoch': 179, 'value': 0.9216999810934069} ({'split': 'test'})
cross_entropy: {'epoch': 179, 'value': 0.42709002591669554} ({'split': 'test'})
We have a new best! with accuracy::0.9216999810934069 and at epoch::179, let's save it!
Epoch 180
accuracy: {'epoch': 180, 'value': 0.99688} ({'split': 'train'})
cross_entropy: {'epoch': 180, 'value': 0.010026696646884081} ({'split': 'train'})
accuracy: {'epoch': 180, 'value': 0.9193999820947647} ({'split': 'test'})
cross_entropy: {'epoch': 180, 'value': 0.43235377788543705} ({'split': 'test'})
Epoch 181
accuracy: {'epoch': 181, 'value': 0.9968599999999997} ({'split': 'train'})
cross_entropy: {'epoch': 181, 'value': 0.00984462928429246} ({'split': 'train'})
accuracy: {'epoch': 181, 'value': 0.91829998254776} ({'split': 'test'})
cross_entropy: {'epoch': 181, 'value': 0.44935261420905576} ({'split': 'test'})
Epoch 182
accuracy: {'epoch': 182, 'value': 0.9967800000000002} ({'split': 'train'})
cross_entropy: {'epoch': 182, 'value': 0.009548374516069888} ({'split': 'train'})
accuracy: {'epoch': 182, 'value': 0.921899982690811} ({'split': 'test'})
cross_entropy: {'epoch': 182, 'value': 0.4399241609871387} ({'split': 'test'})
We have a new best! with accuracy::0.921899982690811 and at epoch::182, let's save it!
Epoch 183
accuracy: {'epoch': 183, 'value': 0.9968599999999999} ({'split': 'train'})
cross_entropy: {'epoch': 183, 'value': 0.008970836259424688} ({'split': 'train'})
accuracy: {'epoch': 183, 'value': 0.9212999826669696} ({'split': 'test'})
cross_entropy: {'epoch': 183, 'value': 0.4351644858717918} ({'split': 'test'})
Epoch 184
accuracy: {'epoch': 184, 'value': 0.99722} ({'split': 'train'})
cross_entropy: {'epoch': 184, 'value': 0.008382702974975108} ({'split': 'train'})
accuracy: {'epoch': 184, 'value': 0.920299981832504} ({'split': 'test'})
cross_entropy: {'epoch': 184, 'value': 0.4629273615777492} ({'split': 'test'})
Epoch 185
accuracy: {'epoch': 185, 'value': 0.9972599999999998} ({'split': 'train'})
cross_entropy: {'epoch': 185, 'value': 0.008476951837018127} ({'split': 'train'})
accuracy: {'epoch': 185, 'value': 0.9209999829530716} ({'split': 'test'})
cross_entropy: {'epoch': 185, 'value': 0.4471890575438738} ({'split': 'test'})
Epoch 186
accuracy: {'epoch': 186, 'value': 0.99732} ({'split': 'train'})
cross_entropy: {'epoch': 186, 'value': 0.008135873397216201} ({'split': 'train'})
accuracy: {'epoch': 186, 'value': 0.9218999832868574} ({'split': 'test'})
cross_entropy: {'epoch': 186, 'value': 0.4555903647840022} ({'split': 'test'})
We have a new best! with accuracy::0.9218999832868574 and at epoch::186, let's save it!
Epoch 187
accuracy: {'epoch': 187, 'value': 0.9969400000190733} ({'split': 'train'})
cross_entropy: {'epoch': 187, 'value': 0.0088314281731844} ({'split': 'train'})
accuracy: {'epoch': 187, 'value': 0.9183999806642532} ({'split': 'test'})
cross_entropy: {'epoch': 187, 'value': 0.46355332955718026} ({'split': 'test'})
Epoch 188
accuracy: {'epoch': 188, 'value': 0.9970800000000002} ({'split': 'train'})
cross_entropy: {'epoch': 188, 'value': 0.008313306431360542} ({'split': 'train'})
accuracy: {'epoch': 188, 'value': 0.9215999823808669} ({'split': 'test'})
cross_entropy: {'epoch': 188, 'value': 0.46124279864132406} ({'split': 'test'})
Epoch 189
accuracy: {'epoch': 189, 'value': 0.9972199999999999} ({'split': 'train'})
cross_entropy: {'epoch': 189, 'value': 0.008115125968456267} ({'split': 'train'})
accuracy: {'epoch': 189, 'value': 0.9206999820470809} ({'split': 'test'})
cross_entropy: {'epoch': 189, 'value': 0.45771479994058617} ({'split': 'test'})
Epoch 190
accuracy: {'epoch': 190, 'value': 0.9980799999999995} ({'split': 'train'})
cross_entropy: {'epoch': 190, 'value': 0.007061753882691262} ({'split': 'train'})
accuracy: {'epoch': 190, 'value': 0.920399980545044} ({'split': 'test'})
cross_entropy: {'epoch': 190, 'value': 0.47701625235378736} ({'split': 'test'})
Epoch 191
accuracy: {'epoch': 191, 'value': 0.9979000000000001} ({'split': 'train'})
cross_entropy: {'epoch': 191, 'value': 0.006951806565336883} ({'split': 'train'})
accuracy: {'epoch': 191, 'value': 0.9210999804735183} ({'split': 'test'})
cross_entropy: {'epoch': 191, 'value': 0.46798601776361465} ({'split': 'test'})
Epoch 192
accuracy: {'epoch': 192, 'value': 0.9974800000190737} ({'split': 'train'})
cross_entropy: {'epoch': 192, 'value': 0.007508704447597269} ({'split': 'train'})
accuracy: {'epoch': 192, 'value': 0.9205999809503554} ({'split': 'test'})
cross_entropy: {'epoch': 192, 'value': 0.46535181730985625} ({'split': 'test'})
Epoch 193
accuracy: {'epoch': 193, 'value': 0.9979000000000005} ({'split': 'train'})
cross_entropy: {'epoch': 193, 'value': 0.00634434148091823} ({'split': 'train'})
accuracy: {'epoch': 193, 'value': 0.9222999811172483} ({'split': 'test'})
cross_entropy: {'epoch': 193, 'value': 0.45939149245619776} ({'split': 'test'})
We have a new best! with accuracy::0.9222999811172483 and at epoch::193, let's save it!
Epoch 194
accuracy: {'epoch': 194, 'value': 0.9982} ({'split': 'train'})
cross_entropy: {'epoch': 194, 'value': 0.006441688896119593} ({'split': 'train'})
accuracy: {'epoch': 194, 'value': 0.9230999809503558} ({'split': 'test'})
cross_entropy: {'epoch': 194, 'value': 0.4714570527523758} ({'split': 'test'})
We have a new best! with accuracy::0.9230999809503558 and at epoch::194, let's save it!
Epoch 195
accuracy: {'epoch': 195, 'value': 0.9980599999999997} ({'split': 'train'})
cross_entropy: {'epoch': 195, 'value': 0.006769828580399042} ({'split': 'train'})
accuracy: {'epoch': 195, 'value': 0.9209999799728393} ({'split': 'test'})
cross_entropy: {'epoch': 195, 'value': 0.4584240762889385} ({'split': 'test'})
Epoch 196
accuracy: {'epoch': 196, 'value': 0.9977400000000002} ({'split': 'train'})
cross_entropy: {'epoch': 196, 'value': 0.006893049809522923} ({'split': 'train'})
accuracy: {'epoch': 196, 'value': 0.9205999827384949} ({'split': 'test'})
cross_entropy: {'epoch': 196, 'value': 0.47078812994062885} ({'split': 'test'})
Epoch 197
accuracy: {'epoch': 197, 'value': 0.9982799999999996} ({'split': 'train'})
cross_entropy: {'epoch': 197, 'value': 0.0060386931306868775} ({'split': 'train'})
accuracy: {'epoch': 197, 'value': 0.921899979710579} ({'split': 'test'})
cross_entropy: {'epoch': 197, 'value': 0.4678827372193336} ({'split': 'test'})
Epoch 198
accuracy: {'epoch': 198, 'value': 0.9980400000000001} ({'split': 'train'})
cross_entropy: {'epoch': 198, 'value': 0.005892153355851769} ({'split': 'train'})
accuracy: {'epoch': 198, 'value': 0.9198999786376953} ({'split': 'test'})
cross_entropy: {'epoch': 198, 'value': 0.47318208053708083} ({'split': 'test'})
Epoch 199
accuracy: {'epoch': 199, 'value': 0.99826} ({'split': 'train'})
cross_entropy: {'epoch': 199, 'value': 0.005715801982516422} ({'split': 'train'})
accuracy: {'epoch': 199, 'value': 0.9222999805212018} ({'split': 'test'})
cross_entropy: {'epoch': 199, 'value': 0.4689079101383686} ({'split': 'test'})
Epoch 200
accuracy: {'epoch': 200, 'value': 0.9979800000000004} ({'split': 'train'})
cross_entropy: {'epoch': 200, 'value': 0.006491285979077219} ({'split': 'train'})
accuracy: {'epoch': 200, 'value': 0.9215999805927277} ({'split': 'test'})
cross_entropy: {'epoch': 200, 'value': 0.45769594438374034} ({'split': 'test'})
Epoch 201
accuracy: {'epoch': 201, 'value': 0.9979599999999996} ({'split': 'train'})
cross_entropy: {'epoch': 201, 'value': 0.006132355415159834} ({'split': 'train'})
accuracy: {'epoch': 201, 'value': 0.9225999802350998} ({'split': 'test'})
cross_entropy: {'epoch': 201, 'value': 0.4622803287953138} ({'split': 'test'})
Epoch 202
accuracy: {'epoch': 202, 'value': 0.99838} ({'split': 'train'})
cross_entropy: {'epoch': 202, 'value': 0.005671960421651598} ({'split': 'train'})
accuracy: {'epoch': 202, 'value': 0.9220999795198437} ({'split': 'test'})
cross_entropy: {'epoch': 202, 'value': 0.45766763336956495} ({'split': 'test'})
Epoch 203
accuracy: {'epoch': 203, 'value': 0.99822} ({'split': 'train'})
cross_entropy: {'epoch': 203, 'value': 0.005875576115939767} ({'split': 'train'})
accuracy: {'epoch': 203, 'value': 0.9208999818563464} ({'split': 'test'})
cross_entropy: {'epoch': 203, 'value': 0.4612857361137866} ({'split': 'test'})
Epoch 204
accuracy: {'epoch': 204, 'value': 0.9982200000190735} ({'split': 'train'})
cross_entropy: {'epoch': 204, 'value': 0.00585128645464778} ({'split': 'train'})
accuracy: {'epoch': 204, 'value': 0.9206999808549883} ({'split': 'test'})
cross_entropy: {'epoch': 204, 'value': 0.46564113855361927} ({'split': 'test'})
Epoch 205
accuracy: {'epoch': 205, 'value': 0.9984999999999995} ({'split': 'train'})
cross_entropy: {'epoch': 205, 'value': 0.005127290436327459} ({'split': 'train'})
accuracy: {'epoch': 205, 'value': 0.920899981856346} ({'split': 'test'})
cross_entropy: {'epoch': 205, 'value': 0.4745754279196263} ({'split': 'test'})
Epoch 206
accuracy: {'epoch': 206, 'value': 0.9982400000190736} ({'split': 'train'})
cross_entropy: {'epoch': 206, 'value': 0.005514311906546355} ({'split': 'train'})
accuracy: {'epoch': 206, 'value': 0.920499981045723} ({'split': 'test'})
cross_entropy: {'epoch': 206, 'value': 0.46586049728095535} ({'split': 'test'})
Epoch 207
accuracy: {'epoch': 207, 'value': 0.99806} ({'split': 'train'})
cross_entropy: {'epoch': 207, 'value': 0.00558386288180947} ({'split': 'train'})
accuracy: {'epoch': 207, 'value': 0.9244999825954433} ({'split': 'test'})
cross_entropy: {'epoch': 207, 'value': 0.46624942198395714} ({'split': 'test'})
We have a new best! with accuracy::0.9244999825954433 and at epoch::207, let's save it!
Epoch 208
accuracy: {'epoch': 208, 'value': 0.9988000000000001} ({'split': 'train'})
cross_entropy: {'epoch': 208, 'value': 0.004826233514994385} ({'split': 'train'})
accuracy: {'epoch': 208, 'value': 0.924099982380867} ({'split': 'test'})
cross_entropy: {'epoch': 208, 'value': 0.47494232170283796} ({'split': 'test'})
Epoch 209
accuracy: {'epoch': 209, 'value': 0.9986} ({'split': 'train'})
cross_entropy: {'epoch': 209, 'value': 0.0049465253895521165} ({'split': 'train'})
accuracy: {'epoch': 209, 'value': 0.9221999806165693} ({'split': 'test'})
cross_entropy: {'epoch': 209, 'value': 0.47116960503160954} ({'split': 'test'})
Epoch 210
accuracy: {'epoch': 210, 'value': 0.9982800000000002} ({'split': 'train'})
cross_entropy: {'epoch': 210, 'value': 0.005071696946918963} ({'split': 'train'})
accuracy: {'epoch': 210, 'value': 0.9233999824523925} ({'split': 'test'})
cross_entropy: {'epoch': 210, 'value': 0.47377014301717285} ({'split': 'test'})
Epoch 211
accuracy: {'epoch': 211, 'value': 0.9987999999999999} ({'split': 'train'})
cross_entropy: {'epoch': 211, 'value': 0.004484611280690879} ({'split': 'train'})
accuracy: {'epoch': 211, 'value': 0.921999981403351} ({'split': 'test'})
cross_entropy: {'epoch': 211, 'value': 0.4733878356963396} ({'split': 'test'})
Epoch 212
accuracy: {'epoch': 212, 'value': 0.99842} ({'split': 'train'})
cross_entropy: {'epoch': 212, 'value': 0.0047954879842698585} ({'split': 'train'})
accuracy: {'epoch': 212, 'value': 0.9233999806642528} ({'split': 'test'})
cross_entropy: {'epoch': 212, 'value': 0.46573080264031896} ({'split': 'test'})
Epoch 213
accuracy: {'epoch': 213, 'value': 0.9989600000000001} ({'split': 'train'})
cross_entropy: {'epoch': 213, 'value': 0.004529390933141111} ({'split': 'train'})
accuracy: {'epoch': 213, 'value': 0.9224999815225602} ({'split': 'test'})
cross_entropy: {'epoch': 213, 'value': 0.47739278621971604} ({'split': 'test'})
Epoch 214
accuracy: {'epoch': 214, 'value': 0.9984399999999999} ({'split': 'train'})
cross_entropy: {'epoch': 214, 'value': 0.005011761578731238} ({'split': 'train'})
accuracy: {'epoch': 214, 'value': 0.9225999796390534} ({'split': 'test'})
cross_entropy: {'epoch': 214, 'value': 0.4695463453978301} ({'split': 'test'})
Epoch 215
accuracy: {'epoch': 215, 'value': 0.9989799999999999} ({'split': 'train'})
cross_entropy: {'epoch': 215, 'value': 0.004018587115108966} ({'split': 'train'})
accuracy: {'epoch': 215, 'value': 0.9231999814510345} ({'split': 'test'})
cross_entropy: {'epoch': 215, 'value': 0.48544754050672057} ({'split': 'test'})
Epoch 216
accuracy: {'epoch': 216, 'value': 0.9982799999999995} ({'split': 'train'})
cross_entropy: {'epoch': 216, 'value': 0.005270293245799842} ({'split': 'train'})
accuracy: {'epoch': 216, 'value': 0.9233999830484392} ({'split': 'test'})
cross_entropy: {'epoch': 216, 'value': 0.46925912179052853} ({'split': 'test'})
Epoch 217
accuracy: {'epoch': 217, 'value': 0.9986999999999999} ({'split': 'train'})
cross_entropy: {'epoch': 217, 'value': 0.004680976080335678} ({'split': 'train'})
accuracy: {'epoch': 217, 'value': 0.9234999793767927} ({'split': 'test'})
cross_entropy: {'epoch': 217, 'value': 0.4726233570277692} ({'split': 'test'})
Epoch 218
accuracy: {'epoch': 218, 'value': 0.99876} ({'split': 'train'})
cross_entropy: {'epoch': 218, 'value': 0.004021498745800928} ({'split': 'train'})
accuracy: {'epoch': 218, 'value': 0.922299982905388} ({'split': 'test'})
cross_entropy: {'epoch': 218, 'value': 0.4751312533766032} ({'split': 'test'})
Epoch 219
accuracy: {'epoch': 219, 'value': 0.9987999999999995} ({'split': 'train'})
cross_entropy: {'epoch': 219, 'value': 0.0046096668872982255} ({'split': 'train'})
accuracy: {'epoch': 219, 'value': 0.9219999808073045} ({'split': 'test'})
cross_entropy: {'epoch': 219, 'value': 0.4780053240060805} ({'split': 'test'})
Epoch 220
accuracy: {'epoch': 220, 'value': 0.9986999999999999} ({'split': 'train'})
cross_entropy: {'epoch': 220, 'value': 0.004693137309998273} ({'split': 'train'})
accuracy: {'epoch': 220, 'value': 0.9223999822139739} ({'split': 'test'})
cross_entropy: {'epoch': 220, 'value': 0.4739678335934877} ({'split': 'test'})
Epoch 221
accuracy: {'epoch': 221, 'value': 0.9986399999999999} ({'split': 'train'})
cross_entropy: {'epoch': 221, 'value': 0.0044375818789750355} ({'split': 'train'})
accuracy: {'epoch': 221, 'value': 0.9213999825716022} ({'split': 'test'})
cross_entropy: {'epoch': 221, 'value': 0.47972192436456684} ({'split': 'test'})
Epoch 222
accuracy: {'epoch': 222, 'value': 0.9985800000190739} ({'split': 'train'})
cross_entropy: {'epoch': 222, 'value': 0.004847596017718315} ({'split': 'train'})
accuracy: {'epoch': 222, 'value': 0.9231999820470811} ({'split': 'test'})
cross_entropy: {'epoch': 222, 'value': 0.4599525975435972} ({'split': 'test'})
Epoch 223
accuracy: {'epoch': 223, 'value': 0.9987400000000004} ({'split': 'train'})
cross_entropy: {'epoch': 223, 'value': 0.004394404942695981} ({'split': 'train'})
accuracy: {'epoch': 223, 'value': 0.9219999819993975} ({'split': 'test'})
cross_entropy: {'epoch': 223, 'value': 0.4803852805122734} ({'split': 'test'})
Epoch 224
accuracy: {'epoch': 224, 'value': 0.9989800000000002} ({'split': 'train'})
cross_entropy: {'epoch': 224, 'value': 0.00392595468411222} ({'split': 'train'})
accuracy: {'epoch': 224, 'value': 0.9223999828100207} ({'split': 'test'})
cross_entropy: {'epoch': 224, 'value': 0.48062080577015875} ({'split': 'test'})
Epoch 225
accuracy: {'epoch': 225, 'value': 0.9986} ({'split': 'train'})
cross_entropy: {'epoch': 225, 'value': 0.004376078688502312} ({'split': 'train'})
accuracy: {'epoch': 225, 'value': 0.9232999831438065} ({'split': 'test'})
cross_entropy: {'epoch': 225, 'value': 0.48576828826218843} ({'split': 'test'})
Epoch 226
accuracy: {'epoch': 226, 'value': 0.9987600000190734} ({'split': 'train'})
cross_entropy: {'epoch': 226, 'value': 0.004184791305288673} ({'split': 'train'})
accuracy: {'epoch': 226, 'value': 0.9226999819278716} ({'split': 'test'})
cross_entropy: {'epoch': 226, 'value': 0.4868722231313586} ({'split': 'test'})
Epoch 227
accuracy: {'epoch': 227, 'value': 0.9988399999999998} ({'split': 'train'})
cross_entropy: {'epoch': 227, 'value': 0.004254273978006096} ({'split': 'train'})
accuracy: {'epoch': 227, 'value': 0.9215999817848206} ({'split': 'test'})
cross_entropy: {'epoch': 227, 'value': 0.488385992050171} ({'split': 'test'})
Epoch 228
accuracy: {'epoch': 228, 'value': 0.999} ({'split': 'train'})
cross_entropy: {'epoch': 228, 'value': 0.0037071301905065796} ({'split': 'train'})
accuracy: {'epoch': 228, 'value': 0.9229999828338624} ({'split': 'test'})
cross_entropy: {'epoch': 228, 'value': 0.49474481359124184} ({'split': 'test'})
Epoch 229
accuracy: {'epoch': 229, 'value': 0.9989599999999996} ({'split': 'train'})
cross_entropy: {'epoch': 229, 'value': 0.003887903085276485} ({'split': 'train'})
accuracy: {'epoch': 229, 'value': 0.9205999839305881} ({'split': 'test'})
cross_entropy: {'epoch': 229, 'value': 0.4966787836328149} ({'split': 'test'})
Epoch 230
accuracy: {'epoch': 230, 'value': 0.9987399999999999} ({'split': 'train'})
cross_entropy: {'epoch': 230, 'value': 0.004234261423423884} ({'split': 'train'})
accuracy: {'epoch': 230, 'value': 0.9205999809503556} ({'split': 'test'})
cross_entropy: {'epoch': 230, 'value': 0.48736655086278935} ({'split': 'test'})
Epoch 231
accuracy: {'epoch': 231, 'value': 0.9988999999999996} ({'split': 'train'})
cross_entropy: {'epoch': 231, 'value': 0.003960444570938123} ({'split': 'train'})
accuracy: {'epoch': 231, 'value': 0.9231999814510345} ({'split': 'test'})
cross_entropy: {'epoch': 231, 'value': 0.48273350134491927} ({'split': 'test'})
Epoch 232
accuracy: {'epoch': 232, 'value': 0.9989800000000001} ({'split': 'train'})
cross_entropy: {'epoch': 232, 'value': 0.0036121108941733824} ({'split': 'train'})
accuracy: {'epoch': 232, 'value': 0.9224999827146528} ({'split': 'test'})
cross_entropy: {'epoch': 232, 'value': 0.4749186983332038} ({'split': 'test'})
Epoch 233
accuracy: {'epoch': 233, 'value': 0.99888} ({'split': 'train'})
cross_entropy: {'epoch': 233, 'value': 0.004168705830201508} ({'split': 'train'})
accuracy: {'epoch': 233, 'value': 0.9229999828338626} ({'split': 'test'})
cross_entropy: {'epoch': 233, 'value': 0.4845852318406105} ({'split': 'test'})
Epoch 234
accuracy: {'epoch': 234, 'value': 0.9988200000000003} ({'split': 'train'})
cross_entropy: {'epoch': 234, 'value': 0.004401178548522293} ({'split': 'train'})
accuracy: {'epoch': 234, 'value': 0.9219999819993971} ({'split': 'test'})
cross_entropy: {'epoch': 234, 'value': 0.47948458842933195} ({'split': 'test'})
Epoch 235
accuracy: {'epoch': 235, 'value': 0.9989599999999996} ({'split': 'train'})
cross_entropy: {'epoch': 235, 'value': 0.0038892049906961617} ({'split': 'train'})
accuracy: {'epoch': 235, 'value': 0.9212999790906908} ({'split': 'test'})
cross_entropy: {'epoch': 235, 'value': 0.47767528498545275} ({'split': 'test'})
Epoch 236
accuracy: {'epoch': 236, 'value': 0.9989000000000001} ({'split': 'train'})
cross_entropy: {'epoch': 236, 'value': 0.004057787730544804} ({'split': 'train'})
accuracy: {'epoch': 236, 'value': 0.921799980401993} ({'split': 'test'})
cross_entropy: {'epoch': 236, 'value': 0.48346865043044096} ({'split': 'test'})
Epoch 237
accuracy: {'epoch': 237, 'value': 0.9987799999999997} ({'split': 'train'})
cross_entropy: {'epoch': 237, 'value': 0.004187691594213246} ({'split': 'train'})
accuracy: {'epoch': 237, 'value': 0.9227999806404112} ({'split': 'test'})
cross_entropy: {'epoch': 237, 'value': 0.4789956513419747} ({'split': 'test'})
Epoch 238
accuracy: {'epoch': 238, 'value': 0.9993399999999995} ({'split': 'train'})
cross_entropy: {'epoch': 238, 'value': 0.0029120815878687424} ({'split': 'train'})
accuracy: {'epoch': 238, 'value': 0.9218999832868577} ({'split': 'test'})
cross_entropy: {'epoch': 238, 'value': 0.49927595272660286} ({'split': 'test'})
Epoch 239
accuracy: {'epoch': 239, 'value': 0.9988399999999995} ({'split': 'train'})
cross_entropy: {'epoch': 239, 'value': 0.003710385162383318} ({'split': 'train'})
accuracy: {'epoch': 239, 'value': 0.9235999822616583} ({'split': 'test'})
cross_entropy: {'epoch': 239, 'value': 0.48900779098272334} ({'split': 'test'})
Epoch 240
accuracy: {'epoch': 240, 'value': 0.9990199999999996} ({'split': 'train'})
cross_entropy: {'epoch': 240, 'value': 0.003569377688486128} ({'split': 'train'})
accuracy: {'epoch': 240, 'value': 0.9221999812126158} ({'split': 'test'})
cross_entropy: {'epoch': 240, 'value': 0.4867963499575853} ({'split': 'test'})
Epoch 241
accuracy: {'epoch': 241, 'value': 0.9994} ({'split': 'train'})
cross_entropy: {'epoch': 241, 'value': 0.002887370399702339} ({'split': 'train'})
accuracy: {'epoch': 241, 'value': 0.9245999825000764} ({'split': 'test'})
cross_entropy: {'epoch': 241, 'value': 0.4875395830720661} ({'split': 'test'})
We have a new best! with accuracy::0.9245999825000764 and at epoch::241, let's save it!
Epoch 242
accuracy: {'epoch': 242, 'value': 0.99904} ({'split': 'train'})
cross_entropy: {'epoch': 242, 'value': 0.0034576229973137386} ({'split': 'train'})
accuracy: {'epoch': 242, 'value': 0.9219999825954436} ({'split': 'test'})
cross_entropy: {'epoch': 242, 'value': 0.49454564314335586} ({'split': 'test'})
Epoch 243
accuracy: {'epoch': 243, 'value': 0.9987000000000003} ({'split': 'train'})
cross_entropy: {'epoch': 243, 'value': 0.0039038681036606434} ({'split': 'train'})
accuracy: {'epoch': 243, 'value': 0.9236999827623367} ({'split': 'test'})
cross_entropy: {'epoch': 243, 'value': 0.4671608220413327} ({'split': 'test'})
Epoch 244
accuracy: {'epoch': 244, 'value': 0.9992800000000001} ({'split': 'train'})
cross_entropy: {'epoch': 244, 'value': 0.0030532633853144935} ({'split': 'train'})
accuracy: {'epoch': 244, 'value': 0.9209999787807464} ({'split': 'test'})
cross_entropy: {'epoch': 244, 'value': 0.4898363833874465} ({'split': 'test'})
Epoch 245
accuracy: {'epoch': 245, 'value': 0.99878} ({'split': 'train'})
cross_entropy: {'epoch': 245, 'value': 0.004428360779795325} ({'split': 'train'})
accuracy: {'epoch': 245, 'value': 0.9232999825477599} ({'split': 'test'})
cross_entropy: {'epoch': 245, 'value': 0.4696294911950828} ({'split': 'test'})
Epoch 246
accuracy: {'epoch': 246, 'value': 0.9991800000190736} ({'split': 'train'})
cross_entropy: {'epoch': 246, 'value': 0.003289445514008401} ({'split': 'train'})
accuracy: {'epoch': 246, 'value': 0.9220999813079835} ({'split': 'test'})
cross_entropy: {'epoch': 246, 'value': 0.4773657699674367} ({'split': 'test'})
Epoch 247
accuracy: {'epoch': 247, 'value': 0.9989999999999999} ({'split': 'train'})
cross_entropy: {'epoch': 247, 'value': 0.003689798602908849} ({'split': 'train'})
accuracy: {'epoch': 247, 'value': 0.9232999825477601} ({'split': 'test'})
cross_entropy: {'epoch': 247, 'value': 0.4813259602338074} ({'split': 'test'})
Epoch 248
accuracy: {'epoch': 248, 'value': 0.9994400000000001} ({'split': 'train'})
cross_entropy: {'epoch': 248, 'value': 0.0025745427255937825} ({'split': 'train'})
accuracy: {'epoch': 248, 'value': 0.9224999821186065} ({'split': 'test'})
cross_entropy: {'epoch': 248, 'value': 0.49349100086838005} ({'split': 'test'})
Epoch 249
accuracy: {'epoch': 249, 'value': 0.9991799999999998} ({'split': 'train'})
cross_entropy: {'epoch': 249, 'value': 0.0031715972469002016} ({'split': 'train'})
accuracy: {'epoch': 249, 'value': 0.9230999809503555} ({'split': 'test'})
cross_entropy: {'epoch': 249, 'value': 0.5052216040715575} ({'split': 'test'})
Epoch 250
accuracy: {'epoch': 250, 'value': 0.99926} ({'split': 'train'})
cross_entropy: {'epoch': 250, 'value': 0.0029338317915983494} ({'split': 'train'})
accuracy: {'epoch': 250, 'value': 0.922199983596802} ({'split': 'test'})
cross_entropy: {'epoch': 250, 'value': 0.49885665550827984} ({'split': 'test'})
Epoch 251
accuracy: {'epoch': 251, 'value': 0.99938} ({'split': 'train'})
cross_entropy: {'epoch': 251, 'value': 0.002540292836185545} ({'split': 'train'})
accuracy: {'epoch': 251, 'value': 0.9224999827146533} ({'split': 'test'})
cross_entropy: {'epoch': 251, 'value': 0.4959705023467542} ({'split': 'test'})
Epoch 252
accuracy: {'epoch': 252, 'value': 0.9994799999999994} ({'split': 'train'})
cross_entropy: {'epoch': 252, 'value': 0.002251198981590567} ({'split': 'train'})
accuracy: {'epoch': 252, 'value': 0.9225999838113782} ({'split': 'test'})
cross_entropy: {'epoch': 252, 'value': 0.49700242958962937} ({'split': 'test'})
Epoch 253
accuracy: {'epoch': 253, 'value': 0.9994600000000001} ({'split': 'train'})
cross_entropy: {'epoch': 253, 'value': 0.0023996605927124634} ({'split': 'train'})
accuracy: {'epoch': 253, 'value': 0.922899982333183} ({'split': 'test'})
cross_entropy: {'epoch': 253, 'value': 0.4955603689327836} ({'split': 'test'})
Epoch 254
accuracy: {'epoch': 254, 'value': 0.9994} ({'split': 'train'})
cross_entropy: {'epoch': 254, 'value': 0.0024772406196966767} ({'split': 'train'})
accuracy: {'epoch': 254, 'value': 0.9233999818563461} ({'split': 'test'})
cross_entropy: {'epoch': 254, 'value': 0.4939623324573038} ({'split': 'test'})
Epoch 255
accuracy: {'epoch': 255, 'value': 0.9994400000000002} ({'split': 'train'})
cross_entropy: {'epoch': 255, 'value': 0.0023716022605076432} ({'split': 'train'})
accuracy: {'epoch': 255, 'value': 0.92329998254776} ({'split': 'test'})
cross_entropy: {'epoch': 255, 'value': 0.4935110530629754} ({'split': 'test'})
Epoch 256
accuracy: {'epoch': 256, 'value': 0.9992199999999996} ({'split': 'train'})
cross_entropy: {'epoch': 256, 'value': 0.002603683115104213} ({'split': 'train'})
accuracy: {'epoch': 256, 'value': 0.9234999811649321} ({'split': 'test'})
cross_entropy: {'epoch': 256, 'value': 0.49263975899666546} ({'split': 'test'})
Epoch 257
accuracy: {'epoch': 257, 'value': 0.9994999999999999} ({'split': 'train'})
cross_entropy: {'epoch': 257, 'value': 0.002295822931304573} ({'split': 'train'})
accuracy: {'epoch': 257, 'value': 0.9230999827384947} ({'split': 'test'})
cross_entropy: {'epoch': 257, 'value': 0.4938864385709166} ({'split': 'test'})
Epoch 258
accuracy: {'epoch': 258, 'value': 0.9994} ({'split': 'train'})
cross_entropy: {'epoch': 258, 'value': 0.00228689561739564} ({'split': 'train'})
accuracy: {'epoch': 258, 'value': 0.922999981641769} ({'split': 'test'})
cross_entropy: {'epoch': 258, 'value': 0.493113006539643} ({'split': 'test'})
Epoch 259
accuracy: {'epoch': 259, 'value': 0.9996999999999994} ({'split': 'train'})
cross_entropy: {'epoch': 259, 'value': 0.0021502559652714984} ({'split': 'train'})
accuracy: {'epoch': 259, 'value': 0.9226999825239182} ({'split': 'test'})
cross_entropy: {'epoch': 259, 'value': 0.49466910138726256} ({'split': 'test'})
Epoch 260
accuracy: {'epoch': 260, 'value': 0.9995400000000002} ({'split': 'train'})
cross_entropy: {'epoch': 260, 'value': 0.0020965805319650096} ({'split': 'train'})
accuracy: {'epoch': 260, 'value': 0.9227999830245973} ({'split': 'test'})
cross_entropy: {'epoch': 260, 'value': 0.4948334189876917} ({'split': 'test'})
Epoch 261
accuracy: {'epoch': 261, 'value': 0.99962} ({'split': 'train'})
cross_entropy: {'epoch': 261, 'value': 0.0019561683241790177} ({'split': 'train'})
accuracy: {'epoch': 261, 'value': 0.9233999812602998} ({'split': 'test'})
cross_entropy: {'epoch': 261, 'value': 0.4946163218840959} ({'split': 'test'})
Epoch 262
accuracy: {'epoch': 262, 'value': 0.9996800000190733} ({'split': 'train'})
cross_entropy: {'epoch': 262, 'value': 0.0018843553648889067} ({'split': 'train'})
accuracy: {'epoch': 262, 'value': 0.9233999812602995} ({'split': 'test'})
cross_entropy: {'epoch': 262, 'value': 0.4952846023067831} ({'split': 'test'})
Epoch 263
accuracy: {'epoch': 263, 'value': 0.9995999999999996} ({'split': 'train'})
cross_entropy: {'epoch': 263, 'value': 0.001939227690212429} ({'split': 'train'})
accuracy: {'epoch': 263, 'value': 0.9230999809503557} ({'split': 'test'})
cross_entropy: {'epoch': 263, 'value': 0.4956345589831472} ({'split': 'test'})
Epoch 264
accuracy: {'epoch': 264, 'value': 0.9995599999999996} ({'split': 'train'})
cross_entropy: {'epoch': 264, 'value': 0.0020840394558757558} ({'split': 'train'})
accuracy: {'epoch': 264, 'value': 0.9231999814510347} ({'split': 'test'})
cross_entropy: {'epoch': 264, 'value': 0.4951967047527431} ({'split': 'test'})
Epoch 265
accuracy: {'epoch': 265, 'value': 0.9993999999999998} ({'split': 'train'})
cross_entropy: {'epoch': 265, 'value': 0.0024257831267919406} ({'split': 'train'})
accuracy: {'epoch': 265, 'value': 0.9237999820709228} ({'split': 'test'})
cross_entropy: {'epoch': 265, 'value': 0.49350818660110246} ({'split': 'test'})
Epoch 266
accuracy: {'epoch': 266, 'value': 0.9994999999999999} ({'split': 'train'})
cross_entropy: {'epoch': 266, 'value': 0.002261035117879508} ({'split': 'train'})
accuracy: {'epoch': 266, 'value': 0.9237999820709228} ({'split': 'test'})
cross_entropy: {'epoch': 266, 'value': 0.4945980596542358} ({'split': 'test'})
Epoch 267
accuracy: {'epoch': 267, 'value': 0.9996400000000001} ({'split': 'train'})
cross_entropy: {'epoch': 267, 'value': 0.0017487170847877858} ({'split': 'train'})
accuracy: {'epoch': 267, 'value': 0.9239999812841414} ({'split': 'test'})
cross_entropy: {'epoch': 267, 'value': 0.49595532700419426} ({'split': 'test'})
Epoch 268
accuracy: {'epoch': 268, 'value': 0.9997000000000001} ({'split': 'train'})
cross_entropy: {'epoch': 268, 'value': 0.001914634929038585} ({'split': 'train'})
accuracy: {'epoch': 268, 'value': 0.9236999815702437} ({'split': 'test'})
cross_entropy: {'epoch': 268, 'value': 0.497069659419358} ({'split': 'test'})
Epoch 269
accuracy: {'epoch': 269, 'value': 0.9995800000000002} ({'split': 'train'})
cross_entropy: {'epoch': 269, 'value': 0.0021878567236941304} ({'split': 'train'})
accuracy: {'epoch': 269, 'value': 0.923499982357025} ({'split': 'test'})
cross_entropy: {'epoch': 269, 'value': 0.4964960946142675} ({'split': 'test'})
Epoch 270
accuracy: {'epoch': 270, 'value': 0.9996599999999999} ({'split': 'train'})
cross_entropy: {'epoch': 270, 'value': 0.0018029822866246104} ({'split': 'train'})
accuracy: {'epoch': 270, 'value': 0.9235999822616578} ({'split': 'test'})
cross_entropy: {'epoch': 270, 'value': 0.49699540022760635} ({'split': 'test'})
Epoch 271
accuracy: {'epoch': 271, 'value': 0.9994799999999997} ({'split': 'train'})
cross_entropy: {'epoch': 271, 'value': 0.0021893177271354947} ({'split': 'train'})
accuracy: {'epoch': 271, 'value': 0.924099981188774} ({'split': 'test'})
cross_entropy: {'epoch': 271, 'value': 0.4960811691358685} ({'split': 'test'})
Epoch 272
accuracy: {'epoch': 272, 'value': 0.9996200000190734} ({'split': 'train'})
cross_entropy: {'epoch': 272, 'value': 0.0019014872527122497} ({'split': 'train'})
accuracy: {'epoch': 272, 'value': 0.9238999819755552} ({'split': 'test'})
cross_entropy: {'epoch': 272, 'value': 0.4959101391956207} ({'split': 'test'})
Epoch 273
accuracy: {'epoch': 273, 'value': 0.9994999999999998} ({'split': 'train'})
cross_entropy: {'epoch': 273, 'value': 0.0019248802350461474} ({'split': 'train'})
accuracy: {'epoch': 273, 'value': 0.924699982404709} ({'split': 'test'})
cross_entropy: {'epoch': 273, 'value': 0.4963839551433921} ({'split': 'test'})
We have a new best! with accuracy::0.924699982404709 and at epoch::273, let's save it!
Epoch 274
accuracy: {'epoch': 274, 'value': 0.99968} ({'split': 'train'})
cross_entropy: {'epoch': 274, 'value': 0.0020574563208036124} ({'split': 'train'})
accuracy: {'epoch': 274, 'value': 0.9243999814987182} ({'split': 'test'})
cross_entropy: {'epoch': 274, 'value': 0.49728844661265614} ({'split': 'test'})
Epoch 275
accuracy: {'epoch': 275, 'value': 0.9994199999999999} ({'split': 'train'})
cross_entropy: {'epoch': 275, 'value': 0.0023121150862425565} ({'split': 'train'})
accuracy: {'epoch': 275, 'value': 0.9240999817848203} ({'split': 'test'})
cross_entropy: {'epoch': 275, 'value': 0.4968421703204516} ({'split': 'test'})
Epoch 276
accuracy: {'epoch': 276, 'value': 0.9995999999999999} ({'split': 'train'})
cross_entropy: {'epoch': 276, 'value': 0.002115139665417374} ({'split': 'train'})
accuracy: {'epoch': 276, 'value': 0.9234999817609785} ({'split': 'test'})
cross_entropy: {'epoch': 276, 'value': 0.4970677391439673} ({'split': 'test'})
Epoch 277
accuracy: {'epoch': 277, 'value': 0.9995200000000002} ({'split': 'train'})
cross_entropy: {'epoch': 277, 'value': 0.00230037700008601} ({'split': 'train'})
accuracy: {'epoch': 277, 'value': 0.9238999807834624} ({'split': 'test'})
cross_entropy: {'epoch': 277, 'value': 0.49723694305866967} ({'split': 'test'})
Epoch 278
accuracy: {'epoch': 278, 'value': 0.9995800000000002} ({'split': 'train'})
cross_entropy: {'epoch': 278, 'value': 0.0019505539248511187} ({'split': 'train'})
accuracy: {'epoch': 278, 'value': 0.923799982070923} ({'split': 'test'})
cross_entropy: {'epoch': 278, 'value': 0.49668647255748516} ({'split': 'test'})
Epoch 279
accuracy: {'epoch': 279, 'value': 0.9995600000000002} ({'split': 'train'})
cross_entropy: {'epoch': 279, 'value': 0.0018792666161805396} ({'split': 'train'})
accuracy: {'epoch': 279, 'value': 0.9235999810695649} ({'split': 'test'})
cross_entropy: {'epoch': 279, 'value': 0.4970012162998317} ({'split': 'test'})
Epoch 280
accuracy: {'epoch': 280, 'value': 0.9995200000000003} ({'split': 'train'})
cross_entropy: {'epoch': 280, 'value': 0.002239904334396122} ({'split': 'train'})
accuracy: {'epoch': 280, 'value': 0.9240999817848203} ({'split': 'test'})
cross_entropy: {'epoch': 280, 'value': 0.4967181134596469} ({'split': 'test'})
Epoch 281
accuracy: {'epoch': 281, 'value': 0.9995600000000003} ({'split': 'train'})
cross_entropy: {'epoch': 281, 'value': 0.0021487790491618217} ({'split': 'train'})
accuracy: {'epoch': 281, 'value': 0.923899980187416} ({'split': 'test'})
cross_entropy: {'epoch': 281, 'value': 0.49809348732233033} ({'split': 'test'})
Epoch 282
accuracy: {'epoch': 282, 'value': 0.9995800000000001} ({'split': 'train'})
cross_entropy: {'epoch': 282, 'value': 0.00205178416668903} ({'split': 'train'})
accuracy: {'epoch': 282, 'value': 0.9239999818801877} ({'split': 'test'})
cross_entropy: {'epoch': 282, 'value': 0.4977301785722376} ({'split': 'test'})
Epoch 283
accuracy: {'epoch': 283, 'value': 0.9996599999999998} ({'split': 'train'})
cross_entropy: {'epoch': 283, 'value': 0.0018592302436055616} ({'split': 'train'})
accuracy: {'epoch': 283, 'value': 0.9238999825716018} ({'split': 'test'})
cross_entropy: {'epoch': 283, 'value': 0.49773422475904255} ({'split': 'test'})
Epoch 284
accuracy: {'epoch': 284, 'value': 0.9994999999999996} ({'split': 'train'})
cross_entropy: {'epoch': 284, 'value': 0.0020320396213978527} ({'split': 'train'})
accuracy: {'epoch': 284, 'value': 0.9239999830722806} ({'split': 'test'})
cross_entropy: {'epoch': 284, 'value': 0.497537102214992} ({'split': 'test'})
Epoch 285
accuracy: {'epoch': 285, 'value': 0.9995999999999997} ({'split': 'train'})
cross_entropy: {'epoch': 285, 'value': 0.0018841979677230124} ({'split': 'train'})
accuracy: {'epoch': 285, 'value': 0.923999980688095} ({'split': 'test'})
cross_entropy: {'epoch': 285, 'value': 0.4986786088347436} ({'split': 'test'})
Epoch 286
accuracy: {'epoch': 286, 'value': 0.9996400000000001} ({'split': 'train'})
cross_entropy: {'epoch': 286, 'value': 0.0019776346149295554} ({'split': 'train'})
accuracy: {'epoch': 286, 'value': 0.9245999830961229} ({'split': 'test'})
cross_entropy: {'epoch': 286, 'value': 0.4994186179712414} ({'split': 'test'})
Epoch 287
accuracy: {'epoch': 287, 'value': 0.9996199999999996} ({'split': 'train'})
cross_entropy: {'epoch': 287, 'value': 0.0019726774113252746} ({'split': 'train'})
accuracy: {'epoch': 287, 'value': 0.9234999811649321} ({'split': 'test'})
cross_entropy: {'epoch': 287, 'value': 0.4986473495513202} ({'split': 'test'})
Epoch 288
accuracy: {'epoch': 288, 'value': 0.9995799999999998} ({'split': 'train'})
cross_entropy: {'epoch': 288, 'value': 0.0020696635685861116} ({'split': 'train'})
accuracy: {'epoch': 288, 'value': 0.9244999825954436} ({'split': 'test'})
cross_entropy: {'epoch': 288, 'value': 0.49718099918216474} ({'split': 'test'})
Epoch 289
accuracy: {'epoch': 289, 'value': 0.9996400000000001} ({'split': 'train'})
cross_entropy: {'epoch': 289, 'value': 0.0017893135376647123} ({'split': 'train'})
accuracy: {'epoch': 289, 'value': 0.9239999800920488} ({'split': 'test'})
cross_entropy: {'epoch': 289, 'value': 0.4983296966552734} ({'split': 'test'})
Epoch 290
accuracy: {'epoch': 290, 'value': 0.9996599999999994} ({'split': 'train'})
cross_entropy: {'epoch': 290, 'value': 0.0018749079061299557} ({'split': 'train'})
accuracy: {'epoch': 290, 'value': 0.9241999804973599} ({'split': 'test'})
cross_entropy: {'epoch': 290, 'value': 0.5018023046478627} ({'split': 'test'})
Epoch 291
accuracy: {'epoch': 291, 'value': 0.9996799999999998} ({'split': 'train'})
cross_entropy: {'epoch': 291, 'value': 0.0017390433356165894} ({'split': 'train'})
accuracy: {'epoch': 291, 'value': 0.9242999821901322} ({'split': 'test'})
cross_entropy: {'epoch': 291, 'value': 0.5016763303801419} ({'split': 'test'})
Epoch 292
accuracy: {'epoch': 292, 'value': 0.9996199999999997} ({'split': 'train'})
cross_entropy: {'epoch': 292, 'value': 0.001949306547460144} ({'split': 'train'})
accuracy: {'epoch': 292, 'value': 0.923999980688095} ({'split': 'test'})
cross_entropy: {'epoch': 292, 'value': 0.5011578581109646} ({'split': 'test'})
Epoch 293
accuracy: {'epoch': 293, 'value': 0.9996599999999992} ({'split': 'train'})
cross_entropy: {'epoch': 293, 'value': 0.0017944303731154663} ({'split': 'train'})
accuracy: {'epoch': 293, 'value': 0.9234999805688859} ({'split': 'test'})
cross_entropy: {'epoch': 293, 'value': 0.5009642348438499} ({'split': 'test'})
Epoch 294
accuracy: {'epoch': 294, 'value': 0.9995200000000003} ({'split': 'train'})
cross_entropy: {'epoch': 294, 'value': 0.001924944764263928} ({'split': 'train'})
accuracy: {'epoch': 294, 'value': 0.9231999808549881} ({'split': 'test'})
cross_entropy: {'epoch': 294, 'value': 0.5019787460938095} ({'split': 'test'})
Epoch 295
accuracy: {'epoch': 295, 'value': 0.99966} ({'split': 'train'})
cross_entropy: {'epoch': 295, 'value': 0.0018566261758562188} ({'split': 'train'})
accuracy: {'epoch': 295, 'value': 0.9235999798774721} ({'split': 'test'})
cross_entropy: {'epoch': 295, 'value': 0.5037913573160769} ({'split': 'test'})
Epoch 296
accuracy: {'epoch': 296, 'value': 0.9996400000000001} ({'split': 'train'})
cross_entropy: {'epoch': 296, 'value': 0.0018361183485202496} ({'split': 'train'})
accuracy: {'epoch': 296, 'value': 0.923399980068207} ({'split': 'test'})
cross_entropy: {'epoch': 296, 'value': 0.5032884125038982} ({'split': 'test'})
Epoch 297
accuracy: {'epoch': 297, 'value': 0.9994199999999998} ({'split': 'train'})
cross_entropy: {'epoch': 297, 'value': 0.0019537469329684973} ({'split': 'train'})
accuracy: {'epoch': 297, 'value': 0.9237999796867371} ({'split': 'test'})
cross_entropy: {'epoch': 297, 'value': 0.5031769572943449} ({'split': 'test'})
Epoch 298
accuracy: {'epoch': 298, 'value': 0.9997599999999998} ({'split': 'train'})
cross_entropy: {'epoch': 298, 'value': 0.0017130400654673575} ({'split': 'train'})
accuracy: {'epoch': 298, 'value': 0.9235999810695648} ({'split': 'test'})
cross_entropy: {'epoch': 298, 'value': 0.5040180951729417} ({'split': 'test'})
Epoch 299
accuracy: {'epoch': 299, 'value': 0.9997399999999999} ({'split': 'train'})
cross_entropy: {'epoch': 299, 'value': 0.00188218604542315} ({'split': 'train'})
accuracy: {'epoch': 299, 'value': 0.9244999802112579} ({'split': 'test'})
cross_entropy: {'epoch': 299, 'value': 0.5021451647207144} ({'split': 'test'})
----- Saved results at sample_cifar10_resnet18_nobias_nobn_structured_pruning_50.csv ------
{'exp_name': 'exp_cifar10_resnet18_nobias_nobn_structured_pruning_50', 'model0_acc': 93.10999816656113, 'model1_acc': 93.19999837875366, 'geometric_acc': 13.31, 'prediction_acc': 36.04, 'naive_acc': 13.93, 'geometric_gain': -79.88999837875366, 'geometric_gain_%': -85.7188838717467, 'prediction_gain': -57.15999837875366, 'prediction_gain_%': -61.33047143033443, 'relative_loss_wrt_prediction': 24.38841244141227, 'geometric_time': 15.593362676911056, 'retrain_geometric_best': 92.4699982404709, 'retrain_naive_best': -100, 'retrain_model0_best': -100, 'retrain_model1_best': -100, 'retrain_epochs': 300}
FYI: the parameters were: 
 Namespace(n_epochs=300, batch_size_train=64, batch_size_test=1000, learning_rate=0.01, momentum=0.5, log_interval=100, to_download=True, disable_bias=True, dataset='Cifar10', num_models=2, model_name='resnet18_nobias_nobn', config_file=None, config_dir='/home/gvignen/otfusion/exp_cifar10_resnet18_nobias_nobn_structured_pruning_50/configurations', num_hidden_nodes=400, num_hidden_nodes1=400, num_hidden_nodes2=200, num_hidden_nodes3=100, num_hidden_nodes4=50, sweep_id=90, gpu_id=0, skip_last_layer=False, skip_last_layer_type='average', debug=False, cifar_style_data=False, activation_histograms=True, act_num_samples=200, softmax_temperature=1, activation_mode='raw', options_type='generic', deprecated=None, save_result_file='sample_cifar10_resnet18_nobias_nobn_structured_pruning_50.csv', sweep_name='exp_cifar10_resnet18_nobias_nobn_structured_pruning_50', reg=0.01, reg_m=0.001, ground_metric='euclidean', ground_metric_normalize='none', not_squared=True, clip_gm=False, clip_min=0, clip_max=5, tmap_stats=False, ensemble_step=0.5, ground_metric_eff=True, retrain=300, retrain_lr_decay=-1, retrain_lr_decay_factor=None, retrain_lr_decay_epochs=None, retrain_avg_only=False, retrain_geometric_only=True, load_models='./resnet_models/', ckpt_type='best', recheck_cifar=True, recheck_acc=True, eval_aligned=False, enable_dropout=False, dump_model=False, dump_final_models=False, correction=True, activation_seed=21, weight_stats=True, sinkhorn_type='normal', geom_ensemble_type='acts', act_bug=False, standardize_acts=False, transform_acts=False, center_acts=False, prelu_acts=True, pool_acts=False, pool_relu=False, normalize_acts=False, normalize_wts=False, gromov=False, gromov_loss='square_loss', tensorboard_root='./tensorboard', tensorboard=False, same_model=-1, dist_normalize=False, update_acts=False, past_correction=True, partial_reshape=False, choice='0 2 4 6 8', diff_init=False, partition_type='labels', personal_class_idx=9, partition_dataloader=-1, personal_split_frac=0.1, exact=True, skip_personal_idx=False, prediction_wts=False, width_ratio=1, proper_marginals=False, retrain_seed=-1, no_random_trainloaders=False, reinit_trainloaders=False, second_model_name=None, print_distances=False, deterministic=False, skip_retrain=-1, importance=None, unbalanced=False, temperature=20, alpha=0.7, dist_epochs=60, handle_skips=True, prune=True, prune_frac=0.5, prune_type='structured', experiment_name='cifar10_resnet18_nobias_nobn_structured_pruning_50', timestamp='2024-01-06_11-09-07_280008', rootdir='/home/gvignen/otfusion/exp_cifar10_resnet18_nobias_nobn_structured_pruning_50', baseroot='/home/gvignen/otfusion', result_dir='/home/gvignen/otfusion/exp_cifar10_resnet18_nobias_nobn_structured_pruning_50/results', exp_name='exp_cifar10_resnet18_nobias_nobn_structured_pruning_50', csv_dir='/home/gvignen/otfusion/exp_cifar10_resnet18_nobias_nobn_structured_pruning_50/csv', config={'dataset': 'Cifar10', 'model': 'resnet18_nobias_nobn', 'optimizer': 'SGD', 'optimizer_decay_at_epochs': [150, 250], 'optimizer_decay_with_factor': 10.0, 'optimizer_learning_rate': 0.1, 'optimizer_momentum': 0.9, 'optimizer_weight_decay': 0.0001, 'batch_size': 256, 'num_epochs': 300, 'seed': 42, 'nick': 'geometric_21', 'start_acc': 13.31}, second_config={'dataset': 'Cifar10', 'model': 'resnet18_nobias_nobn', 'optimizer': 'SGD', 'optimizer_decay_at_epochs': [150, 250], 'optimizer_decay_with_factor': 10.0, 'optimizer_learning_rate': 0.1, 'optimizer_momentum': 0.9, 'optimizer_weight_decay': 0.0001, 'batch_size': 256, 'num_epochs': 300, 'seed': 42, 'nick': 'geometric_21', 'start_acc': 13.31}, cifar_init_lr=0.1, num_personal_idx=25, activation_time=4.840196515899152, params_model_0=11164352, params_model_1=11164352, geometric_time=15.593362676911056, params_geometric=11164352, retrain_geometric_best=0.924699982404709, retrain_naive_best=-1, retrain_model0_best=-1, retrain_model1_best=-1, **{'trace_sum_ratio_conv1.weight': 0.03125, 'trace_sum_ratio_layer1.0.conv1.weight': 0.015625, 'trace_sum_ratio_layer1.0.conv2.weight': 0.046875, 'trace_sum_ratio_layer1.1.conv1.weight': 0.03125, 'trace_sum_ratio_layer1.1.conv2.weight': 0.03125, 'trace_sum_ratio_layer2.0.conv1.weight': 0.0078125, 'trace_sum_ratio_layer2.0.conv2.weight': 0.03125, 'trace_sum_ratio_layer2.0.shortcut.0.weight': 0.015625, 'trace_sum_ratio_layer2.1.conv1.weight': 0.015625, 'trace_sum_ratio_layer2.1.conv2.weight': 0.0078125, 'trace_sum_ratio_layer3.0.conv1.weight': 0.00390625, 'trace_sum_ratio_layer3.0.conv2.weight': 0.0, 'trace_sum_ratio_layer3.0.shortcut.0.weight': 0.0078125, 'trace_sum_ratio_layer3.1.conv1.weight': 0.0, 'trace_sum_ratio_layer3.1.conv2.weight': 0.00390625, 'trace_sum_ratio_layer4.0.conv1.weight': 0.001953125, 'trace_sum_ratio_layer4.0.conv2.weight': 0.0, 'trace_sum_ratio_layer4.0.shortcut.0.weight': 0.0, 'trace_sum_ratio_layer4.1.conv1.weight': 0.0, 'trace_sum_ratio_layer4.1.conv2.weight': 0.00390625, 'trace_sum_ratio_linear.weight': 1.0})
